<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术匝记簿</title>
  
  
  <link href="https://www.ckxgzxa.top/atom.xml" rel="self"/>
  
  <link href="https://www.ckxgzxa.top/"/>
  <updated>2022-09-28T11:34:52.225Z</updated>
  <id>https://www.ckxgzxa.top/</id>
  
  <author>
    <name>残魁斜罡</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023年中国石油招聘笔试03——重点关注</title>
    <link href="https://www.ckxgzxa.top/cnpc-recuit-03.html"/>
    <id>https://www.ckxgzxa.top/cnpc-recuit-03.html</id>
    <published>2022-09-26T15:29:33.000Z</published>
    <updated>2022-09-28T11:34:52.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年中国石油招聘笔试03——重点关注"><a href="#2023年中国石油招聘笔试03——重点关注" class="headerlink" title="2023年中国石油招聘笔试03——重点关注"></a>2023年中国石油招聘笔试03——重点关注</h1><h2 id="1-常识解决技巧"><a href="#1-常识解决技巧" class="headerlink" title="1. 常识解决技巧"></a>1. 常识解决技巧</h2><p>从知识的偏重性来说，常识判断部分的导向性非常清晰，即加强考生对国情、社情的了解程度。</p><p>此阶段备考重在平时，平时多了解一些国家大事和重大举措，例如两会、政府工作报道、国家主权、法律等知识，平时多留意、多观察、多思考。</p><h2 id="2-判断推理题解题技巧"><a href="#2-判断推理题解题技巧" class="headerlink" title="2. 判断推理题解题技巧"></a>2. 判断推理题解题技巧</h2><h3 id="2-1-图形推理"><a href="#2-1-图形推理" class="headerlink" title="2.1 图形推理"></a>2.1 图形推理</h3><pre class="mermaid">graph LR    图形推理 --> A["一、规律推理"]    图形推理 --> B["二、重构推理"]    A --> 1.数量类:点,线,角,面,素    A --> 2.样式类    2.样式类 --> 遍历    2.样式类 --> C["运算(叠加、相减、求同去同)"]    2.样式类 --> D["属性(对称性、曲直性、封闭性)"]    A --> 3.位置类:平移,旋转,翻转    B --> 1.空间构成:一个面的特征+两个面的关系    B --> 2.平面组成:种类不同数个数,种类相同看时针    B --> 3.平面拼合:直线消去法    B --> 4.线条组合:对比排除法</pre><h4 id="2-1-1-规律推理-数量类"><a href="#2-1-1-规律推理-数量类" class="headerlink" title="2.1.1 规律推理: 数量类"></a>2.1.1 规律推理: 数量类</h4><p>概要说明:数量指图形中包含某种元素的多少，如含有几条边、含有几种元素等。题目中的每个图形仅代表一个或几个数量。</p><p>识别方法:观察题干中的图形组成元紊是否凌乱，或者部分相同元紊数量上的变化是否明显。如果某道题目组成元素混乱，那么可以判别该题目为数量类规律推理。</p><pre class="mermaid">graph LR    A["数量类"] --> 点    A --> 线    A --> 角    A --> 面    A --> 素        点 --> 阐述:蕴含交点数的变化.交点数是指线与线之间的交点数,包含交点,切点,割点等.    点 --> 识别:一般具有一条明显的割线,可以得到一组清晰的交点数,并且一组中的几幅图外观非常相似.    点 --> 引申:对交点的定义思路更开阔,既有圆和直线的交点,又有直线之间的交点,甚至还有线段的起点和终点    线 --> B1["线条数:多边形、复杂图形的直线段、曲线段数.常见于一堆线段(包括直线段、曲线段)组成的图形中。"]    线 --> B2["线头数:图形中线段的出头数. 常见于有清晰线头出头的图形中."]    线 --> B3["笔画数:汉字、英文字母、图形的笔画数。常见于汉字、英文字母中。"]    线 --> B4["一笔画问题：只有所有点为偶点的图形和只两个奇点的图形可一笔画出"]        角 --> C1["阐述:图形包含“边”“角”要素，蕴含边角数的变化.其变化规律常常呈现为常数列和等差数列"]    角 --> C2["识别:常见于多边形及圆组成的图形。构成简洁，图形间无复杂交叉。当出现扇形时，大多属于角数问题，且扇形角数为1。边角数题目要注意计算清楚边数和角数，寻找其中规律。"]    角 --> C3["引申:国考中线数量仅包括线段，圆形及曲线其边数定义为0。而地方考试中圆形及曲线有时为1，有时为0。"]        面 --> D1["阐述:包含有“面”的要素，蕴含着区域数(包括封闭区域和连通区域)的变化。"]    面 --> D2["识别:常见于看似复杂、纵横交错动的图形中。看上去组成元素复杂、不易寻找规律，实则区域区分明显、区域数容易观察。"]    面 --> D3["引申:“面”在近年的考题中内涵不断丰富，既可以定义为内外图形相交得出的部分，也可以定义为面积。"]        素 --> E1["阐述:蕴含着元素种类、数目的变化，既包括图形整体的变化，又包括各组成部分的变化。"]    素 --> E2["识别:每个图形皆由多个单独的小元素组成，常见于由多种元素组成的图形中。要先看元素整体的种类和数目变化有无规律，规律不明显时再看各类元素的数目变化有无规律。"]    素 --> E3["引申:图形中的两类元素发生数量上的一些规律性变化;两种元素在图形中存在等价关系(“一个顶俩”)。"]</pre><ul><li><strong>数量型解题要点总结: 点  线  角  面  素</strong><ol><li>首先从整体数考虑, 识别”点线角面素”, 确定数量规律;</li><li>如果整体不行的话, 可以从部分(分位置或分样式)的角度确定数量, 得出规律.</li></ol></li></ul><blockquote><p><strong>元素组成不同, 且无明显属性规律, 考虑数量规律</strong></p><p>例题:</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209280318192.png"></p><p>观察图形可知, 第一个图形是分为2个区域, 第二个图形分为3个区域, 第三个图形分为4个区域…, 以此类推,可以判断第6个图形应该选择可以划分出7个区域的A图形,故选择A    <em>(面)</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209280340384.png"></p><p>黑块内部直角数量, B <em>(角)</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209280346454.png"></p><p>切点数量分类, ①④⑤/②③⑥, <em>(点)</em></p></blockquote><h4 id="2-1-2-规律推理-样式类"><a href="#2-1-2-规律推理-样式类" class="headerlink" title="2.1.2 规律推理:样式类"></a>2.1.2 规律推理:样式类</h4><p>概要说明:样式是指图形的形状模样, 它表明了某个图形区别于其他图形的本质特征.</p><p>识别方法:观察题干中图形的组成元素是否相似, 相似也就是图形部分元素非实质性残缺. 如果某道题目组成的元素相似, 那么可以判别该题目为样式类规律推理.</p><pre class="mermaid">graph LR    样式类 --> A["遍历"]    样式类 --> B["运算"]    样式类 --> C["属性"]        A --> A1["阐述:每行/列中含有完全相同的若干个样式, 在每行/列中对相同的样式进行不同的排列组合,保证每一种样式在每行(或每列)中都要出现一次"]    A --> A2["识别:主要见于九宫推理，特征是图形元素的变化，观察每行/列图形的组成元素均相同，但每个图形间却不相同，因此整体上看各图都非常相似。"]    A --> A3["引申:如在每行中有超过三种样式的题目，则可以在原图的基础上等效为四列，其中一列隐藏不显示。"]        B --> B1["识别:主要见于九宫推理和对比推理，特征是若干图形的样式观察起来一定有相同之处，但同时又有不同之处。"]    B --> 类型    类型 --> B21["叠加:第一幅与第二幅叠加得到第三幅图(近年来也包括进了拼合); 不同图形在同一位置的叠加."]    类型 --> B22["相减:第一幅减去第二幅得到第三幅图(第一幅图拆分成后面两幅图); 不同图形在同一位置的相减."]    类型 --> B23["去同:第一幅图和第二幅图去掉共同部分，得到剩余部分即是第三幅图。"]    类型 --> B24["求同:第一幅图和第二幅图取共同的部分得到第三幅图形; 题干给出的若干幅图形存在着某种共同点，而在选项中应当选择一个能够延续这种共同点的选项"]        C --> C1["对称性"]    C --> C2["曲直性"]    C --> C3["封闭性"]    C1 --> C11["轴对称:轴对称是指一幅图形关于自身的中轴对称"]    C1 --> C12["中心对称:指一幅图形关于自身的中心点对称"]    C1 --> C13["整体对称:指若干幅图形关于某个对称轴呈现出整体轴对称或关于某个中心点呈现出整体中心对称"]    C2 --> C21["阐述:指一组图形中,常常呈现曲直性的规律,即有的图形均由曲线组成, 有的均由直线组成;"]    C2 --> C22["识别:当看到一组图形均由直线或曲线组成是,或看到曲线和直线呈间歇出现时"]    C3 --> C31["阐述:指一组图形中, 常常呈现封闭性的规律, 即有的图形是封闭的, 有的图形是非封闭的;"]    C3 --> C32["识别:当看到一组图形均为封闭图形时, 或一组封闭图形与非封闭与非封闭图形间隔出现时,应想到封闭性"]</pre><ul><li><strong>样式类解题要点总结: 先看样式遍历, 再看加减同异</strong><ol><li>首先观察是否属于样式遍历;</li><li>其次观察是否属于样式运算, 熟练掌握 ”加、减、同、异“四种情况；</li><li>最后再观察其他诸如周期、属性的变化规律</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年中国石油招聘笔试03——重点关注&quot;&gt;&lt;a href=&quot;#2023年中国石油招聘笔试03——重点关注&quot; class=&quot;headerlink&quot; title=&quot;2023年中国石油招聘笔试03——重点关注&quot;&gt;&lt;/a&gt;2023年中国石油招聘笔试03——重点关注&lt;/</summary>
      
    
    
    
    <category term="秋招" scheme="https://www.ckxgzxa.top/categories/%E7%A7%8B%E6%8B%9B/"/>
    
    
    <category term="中石油" scheme="https://www.ckxgzxa.top/tags/%E4%B8%AD%E7%9F%B3%E6%B2%B9/"/>
    
  </entry>
  
  <entry>
    <title>2023年中国石油招聘笔试02——考点归纳</title>
    <link href="https://www.ckxgzxa.top/cnpc-recuit-02.html"/>
    <id>https://www.ckxgzxa.top/cnpc-recuit-02.html</id>
    <published>2022-09-25T16:30:20.000Z</published>
    <updated>2022-09-28T12:59:02.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年中国石油招聘笔试02——考点归纳"><a href="#2023年中国石油招聘笔试02——考点归纳" class="headerlink" title="2023年中国石油招聘笔试02——考点归纳"></a>2023年中国石油招聘笔试02——考点归纳</h1><h2 id="1-中国石油笔试专业题考点"><a href="#1-中国石油笔试专业题考点" class="headerlink" title="1. 中国石油笔试专业题考点"></a>1. 中国石油笔试专业题考点</h2><p>一般涉及较少，请扫码关注公众号回复 “中石油专业题考点” ：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209262041045.png" alt="扫码_搜索联合传播样式-标准色版"></p><h2 id="2-中国石油笔试行测题考点"><a href="#2-中国石油笔试行测题考点" class="headerlink" title="2. 中国石油笔试行测题考点"></a>2. 中国石油笔试行测题考点</h2><ol><li><strong>常识题【考的少】：</strong> 包括历史常识、地理常识、文化常识、科技常识、生活常识等，设计范围广泛。考查知识广度</li><li><strong>推理【必考】：</strong> 根据给出的一组图形、数字、文字、一段话寻找规律，并据此找到另一组图形、数字、文字、一段话中类似关系。考查对图形的敏感性和推理能力</li><li><strong>数量关系【必考】：</strong> 一种类似于数列题，找出给出数列的规律，据此推断出下一个数字；另一种类似于应用题，根据给出条件计算结果。</li><li><strong>言语理解与表达【必考】：</strong> 言语理解与表达主要有四种类型的试题：<ul><li>词语替换，选词填空, 语句表达和阅读理解。近年出现语句表达和阅读理解居多;词语替换；从所给的四个选项中选一个填入句中划线部分，尽量使句子的意思保持不变；</li><li><strong>选词填空【必考】：</strong>从所给的四个词或四组词中选出一个或一组来填入句中的空格内，从而使句子的意思表达得最准确；</li><li><strong>语句表达【必考】：</strong> 从给出的几句话中选出没有或有歧义的一句或从给出的几句话中选出有或没有语病的一句；</li><li><strong>阅读理解【必考】：</strong> 形式较多，主要是对长句的意思进行准确的理解，即先给你一个复杂的长句，然后针对长句提出一个问题，提供四个选项，要求你根据长句的意思对这一问题作出正确的回答，选择出正确答案, 考查应试者对长句语意的理解和语言的组合、表达能力。</li></ul></li><li><strong>资料分析【必考】：</strong> 资料分析测验一般提供一组资料，这组资料可能是一个统计表，一个统计图，或者是一段文字的内容，考查包括三个部分:一是对某项工作或任务的进展或完成情况做出评价和判断，如对政策、计划执行情况的检查和监督: 二是对被研究现象的统计规律、现象之间的依存关系及依存程度的规律等加以揭示和阐述;三是对被研究现象的未来发展趋势及其变化特征进行预测或推断。考查应试者对各种资料(主要是统计资料，包括图表和文字资料)进行准确理解、转换与分析综合的能力。</li></ol><h2 id="3-中国石油笔试英语题考点"><a href="#3-中国石油笔试英语题考点" class="headerlink" title="3. 中国石油笔试英语题考点"></a>3. 中国石油笔试英语题考点</h2><p>一般都是考阅读理解题、语法题或者完型填空或改错，难度与托业考试或英语六级相当，多为金融英语。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年中国石油招聘笔试02——考点归纳&quot;&gt;&lt;a href=&quot;#2023年中国石油招聘笔试02——考点归纳&quot; class=&quot;headerlink&quot; title=&quot;2023年中国石油招聘笔试02——考点归纳&quot;&gt;&lt;/a&gt;2023年中国石油招聘笔试02——考点归纳&lt;/</summary>
      
    
    
    
    <category term="秋招" scheme="https://www.ckxgzxa.top/categories/%E7%A7%8B%E6%8B%9B/"/>
    
    
    <category term="中石油" scheme="https://www.ckxgzxa.top/tags/%E4%B8%AD%E7%9F%B3%E6%B2%B9/"/>
    
  </entry>
  
  <entry>
    <title>2023年中国石油招聘笔试01——综述</title>
    <link href="https://www.ckxgzxa.top/cnpc-recuit-01.html"/>
    <id>https://www.ckxgzxa.top/cnpc-recuit-01.html</id>
    <published>2022-09-25T16:03:25.000Z</published>
    <updated>2022-09-28T13:32:33.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年中国石油招聘笔试01——综述"><a href="#2023年中国石油招聘笔试01——综述" class="headerlink" title="2023年中国石油招聘笔试01——综述"></a>2023年中国石油招聘笔试01——综述</h1><h2 id="1-中国石油招聘流程"><a href="#1-中国石油招聘流程" class="headerlink" title="1. 中国石油招聘流程"></a>1. 中国石油招聘流程</h2><p>一般分为如下四个环节：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209282132242.svg"></p><p>一般笔试在前， 面试在后，</p><p>大部分分公司考试类型为 <strong>综合能力测试</strong> 或者 <strong>综合能力测试 + 专业题</strong> 的形式，少数分公司考试题型为 <strong>英语测试+综合测试+性格测试</strong>。 面试一般分为初面、专业面等几个环节。。。</p><h2 id="2-中国石油招聘笔试考什么？"><a href="#2-中国石油招聘笔试考什么？" class="headerlink" title="2. 中国石油招聘笔试考什么？"></a>2. 中国石油招聘笔试考什么？</h2><p>大部分中国石油为 <strong>EPI 综合能力测试</strong> 的形式， 有的分公司还会考查英语知识，写作能力等。</p><p>EPI 综合能力测试也就是 <strong>行测题测试</strong> .</p><h2 id="3-中国石油招聘笔试考试时长"><a href="#3-中国石油招聘笔试考试时长" class="headerlink" title="3. 中国石油招聘笔试考试时长"></a>3. 中国石油招聘笔试考试时长</h2><p>据绝大部分考过的考生反馈, 时间很紧张, 根本不够用, 尤其是没搞过行测专业训练的考生.</p><h2 id="4-应对笔试整体方案-关键在于准度、速度、技巧"><a href="#4-应对笔试整体方案-关键在于准度、速度、技巧" class="headerlink" title="4. 应对笔试整体方案: 关键在于准度、速度、技巧"></a>4. 应对笔试整体方案: 关键在于准度、速度、技巧</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年中国石油招聘笔试01——综述&quot;&gt;&lt;a href=&quot;#2023年中国石油招聘笔试01——综述&quot; class=&quot;headerlink&quot; title=&quot;2023年中国石油招聘笔试01——综述&quot;&gt;&lt;/a&gt;2023年中国石油招聘笔试01——综述&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="秋招" scheme="https://www.ckxgzxa.top/categories/%E7%A7%8B%E6%8B%9B/"/>
    
    
    <category term="中石油" scheme="https://www.ckxgzxa.top/tags/%E4%B8%AD%E7%9F%B3%E6%B2%B9/"/>
    
  </entry>
  
  <entry>
    <title>对KMP算法的一些认识</title>
    <link href="https://www.ckxgzxa.top/KMP.html"/>
    <id>https://www.ckxgzxa.top/KMP.html</id>
    <published>2022-08-26T06:54:39.000Z</published>
    <updated>2022-08-26T06:56:21.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;KMP算法&quot;&gt;&lt;a href=&quot;#KMP算法&quot; class=&quot;headerlink&quot; title=&quot;KMP算法&quot;&gt;&lt;/a&gt;KMP算法&lt;/h1&gt;</summary>
      
    
    
    
    <category term="校招" scheme="https://www.ckxgzxa.top/categories/%E6%A0%A1%E6%8B%9B/"/>
    
    <category term="算法" scheme="https://www.ckxgzxa.top/categories/%E6%A0%A1%E6%8B%9B/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>从零搭建ELK日志分析系统</title>
    <link href="https://www.ckxgzxa.top/ELKLogConstruction.html"/>
    <id>https://www.ckxgzxa.top/ELKLogConstruction.html</id>
    <published>2022-08-19T05:29:58.000Z</published>
    <updated>2022-08-19T15:42:06.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零搭建ELK-filebeat-日志分析系统-以Windows为例"><a href="#从零搭建ELK-filebeat-日志分析系统-以Windows为例" class="headerlink" title="从零搭建ELK + filebeat 日志分析系统(以Windows为例)"></a>从零搭建ELK + filebeat 日志分析系统(以Windows为例)</h1><h2 id="1-什么是ELK"><a href="#1-什么是ELK" class="headerlink" title="1. 什么是ELK?"></a>1. 什么是ELK?</h2><p>ELK 是elastic公司提供的一套完整的日志收集以及展示的解决方案，是三个产品的首字母缩写，分别是 ElasticSearch、Logstash 和 Kibana。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191354749.png"></p><h2 id="2-filebeat"><a href="#2-filebeat" class="headerlink" title="2. filebeat"></a>2. filebeat</h2><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191357605.png" alt="Filebeat工作流程图"></p><p>​        Filebeat是用于转发和集中日志数据的轻量级传送工具。Filebeat监视您指定的日志文件或位置，收集日志事件，并将它们转发到Elasticsearch或 Logstash进行索引。</p><p>　　Filebeat的工作方式如下：启动Filebeat时，它将启动一个或多个输入，这些输入将在为日志数据指定的位置中查找。对于Filebeat所找到的每个日志，Filebeat都会启动收集器。每个收集器都读取单个日志以获取新内容，并将新日志数据发送到libbeat，libbeat将聚集事件，并将聚集的数据发送到为Filebeat配置的输出。</p><h2 id="3-安装ElasticSearch"><a href="#3-安装ElasticSearch" class="headerlink" title="3. 安装ElasticSearch"></a>3. 安装ElasticSearch</h2><h3 id="3-1-ES-单节点搭建"><a href="#3-1-ES-单节点搭建" class="headerlink" title="3.1 ES 单节点搭建"></a>3.1 ES 单节点搭建</h3><ol><li><p>首先在官网下载Windows版本的<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">Elasticsearch压缩包</a>, 在任意处解压。</p><p>解压后文件结构如下：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191840111.png"></p></li><li><p>启动方式：</p><p>进入bin文件目录，在此处打开终端窗口，运行 <code>elasticsearch.bat</code>文件即可</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191844657.png"></p><p>待命令行窗口显示<code>started</code>即为启动成功.</p></li><li><p>此时可以在浏览器访问<a href="http://localhost:9200/">http://localhost:9200</a>, 可以看到浏览器返回如下信息</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191847965.png"></p></li></ol><h3 id="3-2-ES-集群搭建"><a href="#3-2-ES-集群搭建" class="headerlink" title="3.2 ES 集群搭建"></a>3.2 ES 集群搭建</h3><ol><li><p>创建<code>elasticsearch-cluster</code> 文件夹, 将ES安装包解压出的内容物复制三份分别命名如下：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191852452.png"></p></li><li><p>配置各节点的配置文件(各节点config文件夹下的<code>elasticsearch.yml</code>文件)</p><p>节点1配置文件配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 节点1的配置信息:</span><br><span class="hljs-comment"># 集群名称, 节点之间要保持一致</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-elasticsearch</span><br><span class="hljs-comment">#节点名称, 集群唯一</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># ip地址</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-string">localhost</span><br><span class="hljs-comment"># http端口</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9201</span><br><span class="hljs-comment"># tcp监听端口</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9301</span><br><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;localhost:9301&quot;</span>, <span class="hljs-string">&quot;localhost:9302&quot;</span>,<span class="hljs-string">&quot;localhost:9303&quot;</span>]<br><span class="hljs-attr">discovery.zen.fd.ping_timeout:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">discovery.zen.fd.ping_retries:</span> <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 集群内可被选为主节点的节点列表</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>, <span class="hljs-string">&quot;node-2&quot;</span>, <span class="hljs-string">&quot;node-3&quot;</span>]<br><br><span class="hljs-comment"># 跨域配置</span><br><span class="hljs-comment"># action.destructive_requires_name: true</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>节点2配置文件配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 节点 2 的配置信息：</span><br><span class="hljs-comment"># 集群名称，节点之间要保持一致</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-elasticsearch</span><br><span class="hljs-comment"># 节点名称，集群内唯一</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-2</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#ip 地址</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-string">localhost</span><br><span class="hljs-comment"># http端口</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9202</span><br><span class="hljs-comment">#tcp监听端口</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9302</span><br><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;localhost:9301&quot;</span>]<br><span class="hljs-attr">discovery.zen.fd.ping_timeout:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">discovery.zen.fd.ping_retries:</span> <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 集群内可被选为主节点的节点列表</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>, <span class="hljs-string">&quot;node-2&quot;</span>, <span class="hljs-string">&quot;node-3&quot;</span>]<br><br><span class="hljs-comment"># 跨域配置</span><br><span class="hljs-comment"># action.destructive_requires_name: true</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>节点3配置文件配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 节点 3 的配置信息：</span><br><span class="hljs-comment"># 集群名称，节点之间要保持一致</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-elasticsearch</span><br><span class="hljs-comment"># 节点名称，集群内要唯一</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-3</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#ip 地址</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-string">localhost</span><br><span class="hljs-comment"># http端口</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9203</span><br><span class="hljs-comment">#tcp监听端口</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9303</span><br><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;localhost:9301&quot;</span>, <span class="hljs-string">&quot;localhost:9302&quot;</span>]<br><span class="hljs-attr">discovery.zen.fd.ping_timeout:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">discovery.zen.fd.ping_retries:</span> <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 集群内可被选为主节点的节点列表</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>, <span class="hljs-string">&quot;node-2&quot;</span>, <span class="hljs-string">&quot;node-3&quot;</span>]<br><br><span class="hljs-comment"># 跨域配置</span><br><span class="hljs-comment"># action.destructive_requires_name: true</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>修改好各节点的配置文件之后, 依次启动各节点即可成功创建ES集群</p></li><li><p><a href="https://chrome.google.com/webstore/detail/multi-elasticsearch-head/cpmmilfkofbeimbmgiclohpodggeheim">Multi Elasticsearch Head</a> 插件的安装</p><p>我们可以在如下链接下载此浏览器插件进行安装,浏览器插件安装方式请自行搜索有关资料</p><ul><li>Chrome应用商店直接安装<a href="https://chrome.google.com/webstore/detail/multi-elasticsearch-head/cpmmilfkofbeimbmgiclohpodggeheim">https://chrome.google.com/webstore/detail/multi-elasticsearch-head/cpmmilfkofbeimbmgiclohpodggeheim</a></li><li>Github仓库<a href="https://github.com/Mu-L/multi-elasticsearch-head-chrome">https://github.com/Mu-L/multi-elasticsearch-head-chrome</a></li></ul><p>安装插件完成之后我们可以点击插件,进入监控 Elasticsearch 状态界面,</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191905241.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191906392.png"></p><p>在此页面我们可以方便地对ES集群进行管理，可以查看到索引所有节点各个分片的健康度等信息，并且能够对索引进行增删改查操作</p></li></ol><h2 id="4-Kibana的安装及启动"><a href="#4-Kibana的安装及启动" class="headerlink" title="4. Kibana的安装及启动"></a>4. Kibana的安装及启动</h2><ol><li><p>在官网下载<a href="https://www.elastic.co/cn/downloads/past-releases/kibana-7-8-0">Kibana安装压缩包</a>, 并解压</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191918424.png"></p><ol start="2"><li><p>进入bin目录，双击<code>kibana.bat</code>即可启动成功</p><p>访问<a href="http://localhost:5601/">http://localhost:5601</a>, 查看kibana页面：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191920483.png"></p><blockquote><p>页面修改为中文需要在 <code>config/kibana.yml</code>中添加 <code>i18n.locale: &quot;zh-CN&quot;</code> 配置</p></blockquote></li></ol><h2 id="5-Logstash-的安装与配置"><a href="#5-Logstash-的安装与配置" class="headerlink" title="5. Logstash 的安装与配置"></a>5. Logstash 的安装与配置</h2><ol><li><p>首先从官网下载<a href="https://www.elastic.co/cn/downloads/past-releases/logstash-7-8-0">Logstash的zip压缩包</a>, 随后解压:</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191928354.png" alt="image-20220819192802301"></p></li><li><p>修改<code>config/logstash.conf</code> 文件如下, 为修改elasticsearch:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Sample Logstash configuration for creating a simple</span><br><span class="hljs-comment"># Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br> <br><span class="hljs-attr">input</span> <span class="hljs-string">&#123;</span><br>  <span class="hljs-attr">beats</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">port</span> =<span class="hljs-string">&gt; 5044</span><br>  <span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br> <br><span class="hljs-attr">filter</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">grok</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">match</span> =<span class="hljs-string">&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;NGINXACCESS&#125;&quot; &#125;</span><br><br>    <span class="hljs-attr">&#125;</span><br>    <span class="hljs-attr">geoip</span> <span class="hljs-string">&#123;</span><br>      <span class="hljs-attr">source</span> =<span class="hljs-string">&gt; &quot;http_x_forwarded_for&quot;</span><br>      <span class="hljs-attr">target</span> =<span class="hljs-string">&gt; &quot;geoip&quot;</span><br>      <span class="hljs-attr">database</span> =<span class="hljs-string">&gt; &quot;C:\Software\nginx-1.22.0\GeoLiteCity.dat&quot;</span><br>      <span class="hljs-attr">add_field</span> =<span class="hljs-string">&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][longitude]&#125;&quot; ]</span><br>      <span class="hljs-attr">add_field</span> =<span class="hljs-string">&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][latitude]&#125;&quot; ]</span><br>    <span class="hljs-attr">&#125;</span><br><br>    <span class="hljs-attr">mutate</span> <span class="hljs-string">&#123;</span><br>      <span class="hljs-attr">convert</span> =<span class="hljs-string">&gt; [ &quot;[geoip][coordinates]&quot;, &quot;float&quot; ]</span><br>      <span class="hljs-attr">convert</span> =<span class="hljs-string">&gt; [ &quot;response&quot;,&quot;integer&quot; ]</span><br>      <span class="hljs-attr">convert</span> =<span class="hljs-string">&gt; [ &quot;bytes&quot;,&quot;integer&quot; ]</span><br>      <span class="hljs-attr">replace</span> =<span class="hljs-string">&gt; &#123; &quot;type&quot; =&gt; &quot;nginx_access&quot; &#125;</span><br>      <span class="hljs-attr">remove_field</span> =<span class="hljs-string">&gt; &quot;message&quot;</span><br>    <span class="hljs-attr">&#125;</span><br><br>    <span class="hljs-attr">date</span> <span class="hljs-string">&#123;</span><br>      <span class="hljs-attr">match</span> =<span class="hljs-string">&gt; [ &quot;timestamp&quot;,&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;]</span><br><br>    <span class="hljs-attr">&#125;</span><br>    <span class="hljs-attr">mutate</span> <span class="hljs-string">&#123;</span><br>      <span class="hljs-attr">remove_field</span> =<span class="hljs-string">&gt; &quot;timestamp&quot;</span><br><br>    <span class="hljs-attr">&#125;</span><br><br><br><span class="hljs-attr">&#125;</span><br> <br> <br><span class="hljs-attr">output</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">elasticsearch</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">hosts</span> =<span class="hljs-string">&gt;  [&quot;http://localhost:9201&quot;]</span><br><span class="hljs-attr">&#125;</span><br> <br> <br><span class="hljs-attr">stdout</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">codec</span> =<span class="hljs-string">&gt; rubydebug</span><br><span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>启动命令<code>.\bin\logstash.bat -f &lt;配置文件路径(config/logstash.conf)&gt;</code> </p></li></ol></li></ol><h2 id="6-Filebeat-的安装与配置"><a href="#6-Filebeat-的安装与配置" class="headerlink" title="6. Filebeat 的安装与配置"></a>6. Filebeat 的安装与配置</h2><ol><li><p>从官网下载<a href="https://www.elastic.co/cn/downloads/past-releases/filebeat-7-8-0">Filebeat压缩包</a>, 并解压缩<br><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208192136902.png"></p></li><li><p>随后以采集nginx产生的日志为例:</p><p>配置<code>filebeat.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">output.logstash:</span><br>  <span class="hljs-comment"># The Logstash hosts</span><br>  <span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;localhost:5044&quot;</span>]<br></code></pre></td></tr></table></figure><p>运行<code>.\filebeat.exe modules enable nginx</code>,随后更改<code>modules.d\nginx.yml</code>设置nginx日志的输出路径.</p><p>随后使用<code>.\filebeat.exe -e</code>运行filebeat即可</p><p>也或可将filebeat注册到Windows服务启动</p></li></ol><h2 id="7-启动整个日志系统"><a href="#7-启动整个日志系统" class="headerlink" title="7. 启动整个日志系统"></a>7. 启动整个日志系统</h2><p>按顺序(ES(集群)=&gt;logstash=&gt;filebeat=&gt;kibana)依次启动各项服务,随后启动nginx服务,并产生部分日志:</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208192205968.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208192322272.png"></p><p>随后回到kibana界面, 使用logstash-* 新建索引模式</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208192209991.png"></p><p>随后就可看见kibana收集来的nginx日志</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208192322492.png"></p><p>更多使用方法可以查阅<a href="https://www.elastic.co/guide/en/elastic-stack/7.8/index.html">Kibana官网文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从零搭建ELK-filebeat-日志分析系统-以Windows为例&quot;&gt;&lt;a href=&quot;#从零搭建ELK-filebeat-日志分析系统-以Windows为例&quot; class=&quot;headerlink&quot; title=&quot;从零搭建ELK + filebeat 日志分析系</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>0718 Excel表格</title>
    <link href="https://www.ckxgzxa.top/icbcinternship05.html"/>
    <id>https://www.ckxgzxa.top/icbcinternship05.html</id>
    <published>2022-08-08T20:33:27.000Z</published>
    <updated>2022-08-09T15:57:25.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10个Excel中的小问题"><a href="#10个Excel中的小问题" class="headerlink" title="10个Excel中的小问题"></a>10个Excel中的小问题</h1><h2 id="1-为什么丢数据"><a href="#1-为什么丢数据" class="headerlink" title="1. 为什么丢数据"></a>1. 为什么丢数据</h2><table>    <caption>Excel 文件最大存储容量</caption>    <tr>        <td>文件扩展名</td>        <td>.xls</td>        <td>.xlsx</td>    </tr>    <tr>        <td>行R</td>        <td>65536</td>        <td>1048576</td>    </tr>    <tr>        <td>列C</td>        <td>256</td>        <td>16384</td>    </tr>    <tr>        <td>版本</td>        <td>2003以前</td>        <td>2007以后</td>    </tr></table><h2 id="2-大表格如何固定表头"><a href="#2-大表格如何固定表头" class="headerlink" title="2. 大表格如何固定表头"></a>2. 大表格如何固定表头</h2><ul><li><p><strong>查阅</strong>固定表头</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090455764.png"></p></li><li><p>选中</p><p><kbd>Ctrl</kbd> + <kbd>A</kbd> : 选中内容部分任意单元格后，按组合键，全选内容部分</p><p><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>↑↓←→</kbd>   : 按组合键, 可逐步选择内容</p></li></ul><h2 id="3-快速分离数据"><a href="#3-快速分离数据" class="headerlink" title="3. 快速分离数据"></a>3. 快速分离数据</h2><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090459982.png"></p><ul><li>分列</li></ul><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090500978.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090500747.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090501112.png" alt="image-20220809050122059"></p><h2 id="4-编码中的0怎么不见了"><a href="#4-编码中的0怎么不见了" class="headerlink" title="4. 编码中的0怎么不见了"></a>4. 编码中的0怎么不见了</h2><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090503824.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090503944.png"></p><blockquote><p>知识补充：</p><ul><li><p>单元格默认格式是“常规”，如果输入的数值前面带“0”，系统会自动忽略。</p></li><li><p>文本格式的单元格一般显示为左对齐，左上角有个绿色的小三角形。</p></li><li><p>数值格式一般右对齐。</p></li><li><p>快速输入文本的方法是，首先输入一个英文(半角）状态下的单引号，再输入数字。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090505681.png"></p></li></ul></blockquote><h2 id="5-身份证号码这是怎么了"><a href="#5-身份证号码这是怎么了" class="headerlink" title="5. 身份证号码这是怎么了"></a>5. 身份证号码这是怎么了</h2><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090507125.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090508412.png"></p><blockquote><p>知识补充：</p><ul><li>Excel中默认数值显示11位，如果超过11位，则用科学计数法显示。</li><li>Excel中默认数值如果超过15位，15位后的非0自动变成0，且不可逆转。</li><li>计算字符串长度的公式是: =LEN(需要计算的单元格)</li></ul></blockquote><h2 id="6-数字为什么不能计算"><a href="#6-数字为什么不能计算" class="headerlink" title="6. 数字为什么不能计算"></a>6. 数字为什么不能计算</h2><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090510998.png"></p><p>文本转数据的三种方法：</p><h3 id="1-直接修改"><a href="#1-直接修改" class="headerlink" title="1. 直接修改"></a>1. 直接修改</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090512098.png"></p><h3 id="2-选择性粘贴"><a href="#2-选择性粘贴" class="headerlink" title="2. 选择性粘贴"></a>2. 选择性粘贴</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090516939.png"></p><h3 id="3-分列"><a href="#3-分列" class="headerlink" title="3. 分列"></a>3. 分列</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090517260.png"></p><h2 id="7-快速正确输入性别、单位等"><a href="#7-快速正确输入性别、单位等" class="headerlink" title="7. 快速正确输入性别、单位等"></a>7. 快速正确输入性别、单位等</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;10个Excel中的小问题&quot;&gt;&lt;a href=&quot;#10个Excel中的小问题&quot; class=&quot;headerlink&quot; title=&quot;10个Excel中的小问题&quot;&gt;&lt;/a&gt;10个Excel中的小问题&lt;/h1&gt;&lt;h2 id=&quot;1-为什么丢数据&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="2022新疆工行星令营" scheme="https://www.ckxgzxa.top/categories/2022%E6%96%B0%E7%96%86%E5%B7%A5%E8%A1%8C%E6%98%9F%E4%BB%A4%E8%90%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>0714 可视化思维与表达</title>
    <link href="https://www.ckxgzxa.top/icbcinternship04.html"/>
    <id>https://www.ckxgzxa.top/icbcinternship04.html</id>
    <published>2022-07-15T04:10:18.000Z</published>
    <updated>2022-07-15T18:08:45.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0714-可视化思维与表达"><a href="#0714-可视化思维与表达" class="headerlink" title="0714 可视化思维与表达"></a>0714 可视化思维与表达</h1><h2 id="1-可视化思维缘起"><a href="#1-可视化思维缘起" class="headerlink" title="1. 可视化思维缘起"></a>1. 可视化思维缘起</h2><blockquote><p>思维可视化：是指运用一系列图示技术把本来不可视的思维(思考方法和思考路径)呈现出来，使其清晰可见的过。被可视化的”思维”更有利于理解和记忆，因此可以有效提高信息加工及信息传递的效能。</p></blockquote><p>由巴普洛夫实验等相关的实验表明：</p><ul><li><p>学习的宏观本质：<strong>建立联系</strong></p></li><li><p>学习的微观本质：<strong>赫布定律</strong></p></li></ul><p>可视化思维：</p><ol><li>知识数量是基础，联结是关键；</li><li>内存有限，需要提供辅助；</li><li>广泛的联结需要更丰富的刺激；</li><li>可以通过练习达成稳定的联结。</li></ol><h2 id="2-可视化工具介绍"><a href="#2-可视化工具介绍" class="headerlink" title="2. 可视化工具介绍"></a>2. 可视化工具介绍</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p>传统笔记缺点：</p><ol><li><strong>关键性信息少</strong>，不超过全部信息的20%;</li><li>笔记的修改整理让人头痛，内容<strong>存在重复</strong>;</li><li>难以看出材料中的内在<strong>逻辑关系</strong>;</li><li>单一的文字信息，让大脑<strong>昏昏欲睡</strong>;</li><li>阅读资料<strong>被动式接受</strong>，信息传递单向性，缺乏互动和创造;</li><li>传统的笔记记录方式容易有疏漏造成<strong>记忆断层</strong>。</li></ol><p>思维导图的原则：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207160206835.png"></p><h2 id="3-可视化表达应用"><a href="#3-可视化表达应用" class="headerlink" title="3. 可视化表达应用"></a>3. 可视化表达应用</h2><h3 id="3-1-提升自我"><a href="#3-1-提升自我" class="headerlink" title="3.1 提升自我"></a>3.1 提升自我</h3><h3 id="3-2-分析问题"><a href="#3-2-分析问题" class="headerlink" title="3.2 分析问题"></a>3.2 分析问题</h3><h3 id="3-3-改善团队"><a href="#3-3-改善团队" class="headerlink" title="3.3 改善团队"></a>3.3 改善团队</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0714-可视化思维与表达&quot;&gt;&lt;a href=&quot;#0714-可视化思维与表达&quot; class=&quot;headerlink&quot; title=&quot;0714 可视化思维与表达&quot;&gt;&lt;/a&gt;0714 可视化思维与表达&lt;/h1&gt;&lt;h2 id=&quot;1-可视化思维缘起&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="2022新疆工行星令营" scheme="https://www.ckxgzxa.top/categories/2022%E6%96%B0%E7%96%86%E5%B7%A5%E8%A1%8C%E6%98%9F%E4%BB%A4%E8%90%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>0712 结构性思维笔记</title>
    <link href="https://www.ckxgzxa.top/icbcinternship03.html"/>
    <id>https://www.ckxgzxa.top/icbcinternship03.html</id>
    <published>2022-07-14T14:37:23.000Z</published>
    <updated>2022-07-15T04:09:49.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0712-结构性思维笔记"><a href="#0712-结构性思维笔记" class="headerlink" title="0712 结构性思维笔记"></a>0712 结构性思维笔记</h1><blockquote><p>结构的定义：组成整体的各部分的搭配和安排</p><p>作用：</p><ul><li>在建筑中，决定形状建立连接</li><li>在影片中，不可见，确保故事精彩</li><li>在企业中，建立管理体系，决定组织效率</li></ul></blockquote><h2 id="1-构建结构性思维"><a href="#1-构建结构性思维" class="headerlink" title="1. 构建结构性思维"></a>1. 构建结构性思维</h2><h3 id="1-1-结构性思维的四个特点"><a href="#1-1-结构性思维的四个特点" class="headerlink" title="1.1 结构性思维的四个特点"></a>1.1 结构性思维的四个特点</h3><ul><li>结构先行</li><li>上下对应</li><li>分类清楚</li><li>排序逻辑</li></ul><h3 id="1-2-结构性思维接收信息"><a href="#1-2-结构性思维接收信息" class="headerlink" title="1.2 结构性思维接收信息"></a>1.2 结构性思维接收信息</h3><ol><li><strong>识别</strong>：识别信息中的事实与个人观点或判断</li><li><strong>对应</strong>：找到事实与观点之间的对应关系</li><li><strong>结构</strong>：画出结构性关系图</li><li><strong>表达</strong>：用语言表达信息的主要含义</li></ol><h2 id="2-纵向结构"><a href="#2-纵向结构" class="headerlink" title="2. 纵向结构"></a>2. 纵向结构</h2><h3 id="2-1-从上到下提问回答"><a href="#2-1-从上到下提问回答" class="headerlink" title="2.1 从上到下提问回答"></a>2.1 从上到下提问回答</h3><ol><li>步骤一、设定场景</li><li>步骤二、确定主题</li><li>步骤三、设想问题</li><li>步骤四、回答问题</li></ol><h3 id="2-2-从下到上概括总结"><a href="#2-2-从下到上概括总结" class="headerlink" title="2.2 从下到上概括总结"></a>2.2 从下到上概括总结</h3><blockquote><ol><li>文章的标题句就是主题句；</li><li>PPT的标题句就是主题句；</li><li>自然段的段首句就是主题句。</li></ol></blockquote><h3 id="3-横向结构"><a href="#3-横向结构" class="headerlink" title="3. 横向结构"></a>3. 横向结构</h3><h4 id="3-1-演绎论证"><a href="#3-1-演绎论证" class="headerlink" title="3.1 演绎论证"></a>3.1 演绎论证</h4><blockquote><p>从普遍性的理论知识出发认识个别、特殊的现象的一种论证推理方法、</p></blockquote><p>演绎论证的两种结构：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207150135950.png"></p><h4 id="3-2-归纳论证"><a href="#3-2-归纳论证" class="headerlink" title="3.2 归纳论证"></a>3.2 归纳论证</h4><blockquote><p>从许多个别的事务中概括出性概念、原则或结论的推理方法。</p></blockquote><p>三种排序：时间顺序、结构顺序、重要性顺序</p><p>分类的标准：<strong>MECE</strong>原则</p><blockquote><p>Mutually Exclusive &amp; Collectively Exhaustive</p><p>相互独立 完全穷尽 | 不重不漏</p><p>互不交叉 应有尽有 | 分清分尽</p></blockquote><h3 id="4-序言结构"><a href="#4-序言结构" class="headerlink" title="4. 序言结构"></a>4. 序言结构</h3><table>    <caption>序言的四要素</caption>    <tr>        <td style="background-color:red">S(情景)</td>        <td>发展和科技的进步，人群结构中的“老龄化”已经呈现明显的趋势</td>    </tr>    <tr>        <td style="background-color:red">C(冲突)</td>        <td>然而记者在调查中发现，虽然老年人越来越多，然而他们在服装购买方面却存在着各种各样的困难，在商场中很难找到老年人专柜，老年人也没有自己的“名牌”</td>    </tr>      <tr>        <td style="background-color:red">Q(疑问)</td>        <td>如何满足老年人的服装购买需要</td>    </tr>    <tr>        <td style="background-color:red">A(回答)</td>        <td>这一问题引起了嗅觉敏捷的商家开始经营老年人的服装，并初见成效</td>    </tr>    </table><p>序言标准结构及变化</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207150147153.png"></p><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5 小结"></a>5 小结</h3><p>第一部分:构建结构性思维，共学习了两个四。第一个，结构性思维的四大基本特点:结论先行、上下对应、分类清楚、排序逻辑。第二个，结构性思维接收信息的四大步骤:<br>第一识别，识别信息中的事实和观点;第二对应，找出事实与观点的对应关系;第三结构，画出结构图;<br>第四表达,表达成一句话，“在序的基础上，从ABC三个方面说明了G”</p><p>第二部分:纵向结构。纵向结构是两个方向:从上到下和从下到上。<br>从上到下是提问回答，从下到上是概括总结。<br>那从上到下的提问回答又做了两个延展，问到多深?公理定理和已知条件;问到多宽?重点是保证主题中所有的关键词都被提问到。<br>从下到上的概括总结基本要求是严格的上下对应，相当于数学题的等号，在商务文体写作中做到有内容的主题句。</p><p>第三部分:横向结构。两种逻辑关系:一个演绎、第二个归纳。<br>演绎论证有两种形式，第一个叫标准式，也叫三段论，也就是大前提、小前提和结论;第二个是常见式，也分三个部分，是现象、原因、解决方案。<br>归纳的重点两个知识点:排序和分类。三种常见的排序方法:第一个是按时间，第二个按结构，第三个按重要性。分类的衡量标准式MECE原则，分清和分净,或者相互独立、完全穷尽、或者不重不漏。分类的重要行为要求是界定范围和明确标准。</p><p>第四部分:序言结构。四要素，用英文字母是SCQA,用中文表达是:背景、冲突、提问和回答。一起做个变形:开门见山式是A在前面,突出忧虑式是C在前,突出信心式Q在前面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0712-结构性思维笔记&quot;&gt;&lt;a href=&quot;#0712-结构性思维笔记&quot; class=&quot;headerlink&quot; title=&quot;0712 结构性思维笔记&quot;&gt;&lt;/a&gt;0712 结构性思维笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;结构的定义：组成整体的各部分的搭配</summary>
      
    
    
    
    <category term="2022新疆工行星令营" scheme="https://www.ckxgzxa.top/categories/2022%E6%96%B0%E7%96%86%E5%B7%A5%E8%A1%8C%E6%98%9F%E4%BB%A4%E8%90%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>0710 自我认知与个人发展</title>
    <link href="https://www.ckxgzxa.top/icbcinternship02.html"/>
    <id>https://www.ckxgzxa.top/icbcinternship02.html</id>
    <published>2022-07-09T14:39:06.000Z</published>
    <updated>2022-07-09T15:45:04.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0710-自我认知与个人发展-成为更好的自己"><a href="#0710-自我认知与个人发展-成为更好的自己" class="headerlink" title="0710 自我认知与个人发展_成为更好的自己"></a>0710 自我认知与个人发展_成为更好的自己</h1><h2 id="1-谁是我-全景人才画像"><a href="#1-谁是我-全景人才画像" class="headerlink" title="1. 谁是我: 全景人才画像"></a>1. 谁是我: 全景人才画像</h2><ul><li><p>人的全景画像</p><ul><li>德、才</li><li>德、能、勤、绩、廉</li></ul><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207092250236.png"></p></li><li><p>麦克里兰：冰山模型</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207092251418.png"></p></li><li><p>员工画像（MPA模型）</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207092252846.png"></p></li></ul><h2 id="2-我是谁：自我评价与分析"><a href="#2-我是谁：自我评价与分析" class="headerlink" title="2. 我是谁：自我评价与分析"></a>2. 我是谁：自我评价与分析</h2><h3 id="2-1-愿不愿：动机类测评工具"><a href="#2-1-愿不愿：动机类测评工具" class="headerlink" title="2.1 愿不愿：动机类测评工具"></a>2.1 愿不愿：动机类测评工具</h3><ul><li><p><strong>麦克里兰：动机理论</strong></p></li><li><p>霍兰德：职业兴趣测试</p></li><li><p>罗克奇：职业价值观测试</p></li><li><p><strong>埃德加·H·施恩：职业锚</strong></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207092258857.png"></p></li></ul><h3 id="2-2-合不合：人格类测评工具"><a href="#2-2-合不合：人格类测评工具" class="headerlink" title="2.2 合不合：人格类测评工具"></a>2.2 合不合：人格类测评工具</h3><ul><li><p>特质类测评工具</p><ul><li><p>16PF、15FQ+、<strong>盖洛普优势才干</strong>、<strong>大五人格</strong></p></li><li><p>大五人格</p><ul><li><p>情绪稳定性、外倾性、经验开放性、宜人性、尽责性</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207092315603.png"></p></li><li></li></ul></li></ul></li><li><p>风格类测评工具</p><ul><li><p><strong>DISC</strong>、PDP、颜色心理、RTC、MBTI、MMPI</p></li><li><p>DISC</p><ul><li><p>美国心理学家、人类行为科学家马斯顿（Dr.WilliamMoulton Marston)博士于20世纪20年代所创（The Emotions of Normal People,1928)</p><ul><li>Dominance，支配型</li><li>Influence，影响型</li><li>Steadiness，稳健型</li><li>Compliance，服从型</li></ul></li><li><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207092317117.png"></p></li><li><p>高D（支配）型</p><p><strong>结果导向</strong> | 强调结果和目标 | 喜欢有挑战性的工作 | 自信、主动积极 | 说话直接 |地盘意识强 | 敢于冒险 | 喜欢创新</p></li><li><p>高I（影响）型</p><p><strong>人际导向</strong> | 喜欢做与人有关的工作 | 积极乐观、幽默风趣 | 善于语言激励 | 人际洞察力强 | 富有同理心 | 热情友善 | 富有创意</p></li><li><p>高S（稳健）型</p><p><strong>价值导向</strong> | 追求专业和中长期的卓越 | 做事持久有耐心 | 善于做中长期规划 | 喜欢按照自己的节奏、步调做事，不喜欢临时变化 | 追求和谐、富合作精神 | 避免冲突 | 亲切温暖</p></li><li><p>高C（服从）型</p><p><strong>过程导向</strong> | 重计划，讲条理、制度、规则 | 原则性强 | 完美主义、重细节 | 讲求专业价值 | 是非、道德观念强 | 可靠、重承诺 | 细心谨慎</p></li><li><p>整合型</p><p><strong>情景导向</strong> | 适应性和灵活性强 | 扮演不同的角色都感觉很舒适 | 能够轻易地在四种特质之间转换</p></li></ul></li><li><p>风格类测评报告解读</p><ul><li><strong>性格只有差异,没有好坏,相对于特定的情景,性格特质都有可能有不足或过当的情况</strong></li><li>每个人的性格特质上没有有无的差别,只有程度的不同</li><li><strong>不要为别人贴”标签”，更不要为自己的不足找借口</strong></li><li>领导需要特殊的才干,但每种类型的人都可能成为领导,重要的是你能否找到合适的领域,并配置好一个互补的团队</li></ul></li></ul></li></ul><h2 id="2-我会是谁：个人发展逻辑"><a href="#2-我会是谁：个人发展逻辑" class="headerlink" title="2. 我会是谁：个人发展逻辑"></a>2. 我会是谁：个人发展逻辑</h2><ul><li><p>自我认知与个人发展路径</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207092335880.png"></p></li><li><p>管理的认知</p><ul><li><p>管理的道与术：儒里道外</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207092339645.png"></p></li><li><p>管理的辩证法</p><ul><li>柔与刚：严管厚爱</li><li>有与无：无为创造有为</li></ul></li><li><p>以出世的心态做入世的事情</p></li></ul></li><li><p>个人发展的逻辑</p><p>知：终身成长</p><p>行：刻意练习</p><ul><li>终身成长=成长型思维+刻意练习</li><li>成长是一辈子的事,无关性格、无关年龄、无关性别,甚至无关天分</li><li>不要把不努力当做没有天分的借口</li><li>自我觉察、发现优势、发展优势</li><li>动机决定行为、行为决定习惯、习惯决定命运</li></ul></li><li><p>建设自己的个人发展计划</p></li></ul><blockquote><p>推荐书籍：</p><ol><li>《我们都是自己的陌生人》(美)戴维迈尔斯</li><li>《终身成长》（美）卡罗尔德韦克</li><li>《刻意练习》(美)安德斯艾利克森</li></ol></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0710-自我认知与个人发展-成为更好的自己&quot;&gt;&lt;a href=&quot;#0710-自我认知与个人发展-成为更好的自己&quot; class=&quot;headerlink&quot; title=&quot;0710 自我认知与个人发展_成为更好的自己&quot;&gt;&lt;/a&gt;0710 自我认知与个人发展_成为更好的</summary>
      
    
    
    
    <category term="2022新疆工行星令营" scheme="https://www.ckxgzxa.top/categories/2022%E6%96%B0%E7%96%86%E5%B7%A5%E8%A1%8C%E6%98%9F%E4%BB%A4%E8%90%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>0708 中国工商银行集团文化介绍笔记</title>
    <link href="https://www.ckxgzxa.top/icbcinternship01.html"/>
    <id>https://www.ckxgzxa.top/icbcinternship01.html</id>
    <published>2022-07-08T14:42:23.000Z</published>
    <updated>2022-07-08T14:46:12.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0708-中国工商银行集团文化介绍笔记"><a href="#0708-中国工商银行集团文化介绍笔记" class="headerlink" title="0708 中国工商银行集团文化介绍笔记"></a>0708 中国工商银行集团文化介绍笔记</h1><h2 id="1-文化传承"><a href="#1-文化传承" class="headerlink" title="1. 文化传承"></a>1. 文化传承</h2><h3 id="1-1-红色金融文化传承"><a href="#1-1-红色金融文化传承" class="headerlink" title="1.1 红色金融文化传承"></a>1.1 红色金融文化传承</h3><ul><li>大革命时期 -&gt; 土地革命时期 -&gt; 抗日战争时期</li><li>扁担银行、马背银行、窑洞银行</li></ul><h3 id="1-2-文化萌芽（1984-1993）"><a href="#1-2-文化萌芽（1984-1993）" class="headerlink" title="1.2 文化萌芽（1984-1993）"></a>1.2 文化萌芽（1984-1993）</h3><p><strong>三铁精神：</strong>铁账本、铁算盘、铁规章</p><p><strong>工行精神：</strong>求实创新、吃苦耐劳、顾全大局、团结奋进</p><p>1983年12月30日，中国工商银行成立大会在北京召开</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207082109157.png" alt="工行总行第一块门牌"></p><h3 id="1-3-文化成长（1994-2005）"><a href="#1-3-文化成长（1994-2005）" class="headerlink" title="1.3 文化成长（1994-2005）"></a>1.3 文化成长（1994-2005）</h3><p><strong>十字方针：</strong> 效益、质量、发展、管理、创新</p><p><strong>五种观念：</strong>稳健的发展观、真实的效益观、全面的质量观、严格的管理观、科学的创新观</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207082118862.png" alt="家喻户晓的宣传语"></p><h3 id="1-4-文化形成（2005-2019）"><a href="#1-4-文化形成（2005-2019）" class="headerlink" title="1.4 文化形成（2005-2019）"></a>1.4 文化形成（2005-2019）</h3><ul><li><p>2005年10月，成立中国工商银行股份有限公司</p></li><li><p>2006年10月，在上海、香港同步上市</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207082122018.png"></p></li><li><p>五项原则</p><ol><li>以<strong>改革</strong>为突破</li><li>以<strong>创新</strong>为突破</li><li>以<strong>服务</strong>为突破</li><li>以转变<strong>发展方式</strong>为主要途径</li><li>以<strong>人</strong>为本</li></ol></li><li><p>股改精神</p><p>勤于<strong>探索</strong> | 勇于<strong>创造</strong></p><p>善于<strong>借鉴</strong> | 敢于<strong>超越</strong></p></li><li><p>一个核心、四个支撑、两个延伸的企业文化建设体系</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207082201856.png"></p><ul><li><p>一个核心：工于至诚，行以致远的价值观</p></li><li><p>四个支撑：</p><pre><code>四个子文化：</code></pre><ol><li>廉洁：公开透明、公私分明、自律律他、言行并重</li><li>合规：合规为本、全员有责、风险可控、稳健高效</li><li>服务：客户为尊、服务如意、员工为本、诚信如一</li><li>创新：聚焦本源、因势革故、协同鼎新、永葆生机</li></ol></li><li><p>两个延伸</p><ul><li><p>向重点业务板块拓展的专业文化</p><p>经济本源 | 诚信合规 | 专家治贷</p><p>审慎稳健 | 客户优选 | 责任落实</p></li><li><p>区域特征鲜明的特色文化</p></li></ul></li></ul></li></ul><h3 id="1-5-文化提升（2019-至今）"><a href="#1-5-文化提升（2019-至今）" class="headerlink" title="1.5 文化提升（2019-至今）"></a>1.5 文化提升（2019-至今）</h3><p>为各地脱贫攻坚提供一支强有力的力量</p><h3 id="1-6-文化基因"><a href="#1-6-文化基因" class="headerlink" title="1.6 文化基因"></a>1.6 文化基因</h3><ul><li>党建引领、凝心聚力，是工行的底色</li><li>诚实守信、尽职尽责，是工行的本色</li><li>严谨规范、稳健合规，是工行的特色</li><li>创新进取、追求卓越，是工行的亮色</li><li>吃苦耐劳、敬业奉献，是工行的基色</li></ul><h2 id="2-文化体系和实践"><a href="#2-文化体系和实践" class="headerlink" title="2. 文化体系和实践"></a>2. 文化体系和实践</h2><h3 id="2-1-企业文化之定义"><a href="#2-1-企业文化之定义" class="headerlink" title="2.1 企业文化之定义"></a>2.1 企业文化之定义</h3><p><strong>企业文化</strong>是在长期经营管理实践活动中逐步形成的，被企业员工普遍认同和遵循的经营理念、价值取向、思维方式、规章制度、行为准则以及企业外部形象的总称。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207082201729.png"></p><h3 id="2-2-工商银行的精神文化"><a href="#2-2-工商银行的精神文化" class="headerlink" title="2.2 工商银行的精神文化"></a>2.2 工商银行的精神文化</h3><h4 id="1-使命"><a href="#1-使命" class="headerlink" title="1. 使命"></a>1. 使命</h4><p>提供卓越金融服务</p><ul><li><strong>服务客户</strong>：就是要不断提高服务能力和质量</li><li><strong>回报股东</strong>：就是要为股东创造最佳价值回报</li><li><strong>成就员工</strong>：就是要为员工提供广阔发展平台</li><li><strong>奉献社会</strong>：就是要主动承担更多企业责任</li></ul><h4 id="2-愿景"><a href="#2-愿景" class="headerlink" title="2. 愿景"></a>2. 愿景</h4><p>全面建设具有全球竞争力的世界一流现代金融企业，成为基业长青的银行</p><ol><li>基本完成现代商业银行布局：于建党100年为起点，直到2023年工商银行成立40周年之际</li><li>完成由传统银行向现代银行的转型：展望2025年，十四五规划完成之际</li><li>成为卓越银行：远眺2035年，我国基本实现社会主义现代化工商银行成立50周年之时</li></ol><h4 id="3-价值观"><a href="#3-价值观" class="headerlink" title="3. 价值观"></a>3. 价值观</h4><p>工于至诚、行以致远</p><p>前提:</p><ul><li>工：工行、工匠 -&gt; 表明一种精神和态度</li><li>诚：诚信、忠诚 -&gt; 表明一种原则和信念</li></ul><p>结果:</p><ul><li>行：执行、同行 -&gt; 表明一种行为和状态</li><li>远：长远、高远 -&gt; 表明一种境界和追求</li></ul><h4 id="4-先进的文化理念"><a href="#4-先进的文化理念" class="headerlink" title="4. 先进的文化理念"></a>4. 先进的文化理念</h4><p>以坚持党的建设为统领，提升文化引导力</p><p>以社会主义核心价值观为指引，提升文化凝聚力</p><p>以融入经营管理为途径，提升文化渗透力</p><p>以打造品牌活动为抓手，提升文化感染力</p><p>以反应员工心声为着力点，提升文化感召力</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0708-中国工商银行集团文化介绍笔记&quot;&gt;&lt;a href=&quot;#0708-中国工商银行集团文化介绍笔记&quot; class=&quot;headerlink&quot; title=&quot;0708 中国工商银行集团文化介绍笔记&quot;&gt;&lt;/a&gt;0708 中国工商银行集团文化介绍笔记&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="2022新疆工行星令营" scheme="https://www.ckxgzxa.top/categories/2022%E6%96%B0%E7%96%86%E5%B7%A5%E8%A1%8C%E6%98%9F%E4%BB%A4%E8%90%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>算法题目01</title>
    <link href="https://www.ckxgzxa.top/algorithm_problem01.html"/>
    <id>https://www.ckxgzxa.top/algorithm_problem01.html</id>
    <published>2022-06-14T15:51:02.000Z</published>
    <updated>2022-06-14T15:53:34.770Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-链表题"><a href="#1-链表题" class="headerlink" title="1. 链表题"></a>1. 链表题</h3><ol><li><a href="https://leetcode.cn/problems/reverse-linked-list/">一个长度为n的单向链表，用O(1) 空间复杂度来实现倒转输出，使用最低时间复杂度</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>) &#123;<br>            tmp = cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">找出单链表的中间元素，要求用时最少</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">middleNode</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br><br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-literal">null</span> &amp;&amp; fast.next!= <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><a href="https://leetcode.cn/problems/linked-list-cycle/">单链表中是否有环，写出代码</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <br>        <span class="hljs-keyword">while</span>(fast!= <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>            fast = fast.next.next;<br>            slow = slow.next;<br>            <span class="hljs-keyword">if</span>(fast == slow) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> !(fast == <span class="hljs-literal">null</span> || fast.next == <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><a href="https://leetcode.cn/problems/c32eOV/">如果单链表中有环，请找到环的入口点</a></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">findLoopNode</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <br>        <span class="hljs-keyword">while</span>(fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span>(slow == fast) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(fast == <span class="hljs-literal">null</span> || fast.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <br>        slow = head;<br>        <br>        <span class="hljs-keyword">while</span>(slow != fast) &#123;<br>            slow = slow.next;<br>            fast = fast.next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> fast;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-删除排序链表中的重复元素"><a href="#2-删除排序链表中的重复元素" class="headerlink" title="2. 删除排序链表中的重复元素"></a>2. 删除排序链表中的重复元素</h3><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list-ii/">题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head;<br><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>        tmp.next = head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span>tmp;<br>        pre.next = head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br><br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span> &amp;&amp; cur.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span>(pre.next.val != cur.next.val) &#123;<br>                pre = pre.next;<br>                cur = cur.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span>(cur!= <span class="hljs-literal">null</span> &amp;&amp; cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.val == pre.next.val) &#123;<br>                    cur = cur.next;<br>                &#125;<br>                pre.next = cur.next;<br>                cur = cur.next;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> tmp.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-简单排序"><a href="#3-简单排序" class="headerlink" title="3. 简单排序"></a>3. 简单排序</h3><ol><li>冒泡排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// TLE</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortArray(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; nums.length - <span class="hljs-number">1</span>;++i) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; nums.length;++j) &#123;<br>                <span class="hljs-keyword">if</span>(nums[i] &gt; nums[j]) &#123;<br>                    nums[i] = nums[i] + nums[j];<br>                    nums[j] = nums[i] - nums[j];<br>                    nums[i] = nums[i] - nums[j];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>插入排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortArray(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; nums[j] &lt; nums[j - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[j];<br>                nums[j] = nums[j - <span class="hljs-number">1</span>];<br>                nums[j - <span class="hljs-number">1</span>] = temp;<br>                j--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-快速排序代码"><a href="#4-快速排序代码" class="headerlink" title="4. 快速排序代码"></a>4. 快速排序代码</h3><p><a href="https://leetcode.cn/problems/sort-an-array/">912. 排序数组 - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortArray(<span class="hljs-type">int</span>[] nums) &#123;<br>        quick_sort(nums, <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> nums[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l -<span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = nums[l+r &gt;&gt; <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span>(i &lt; j) &#123;<br>            <span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span>(nums[i] &lt; x);<br>            <span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span>(nums[j] &gt; x);<br>            <span class="hljs-keyword">if</span>(i&lt;j) &#123;<br>                nums[i] = nums[i] + nums[j];<br>                nums[j] = nums[i] - nums[j];<br>                nums[i] = nums[i] - nums[j];<br>            &#125;<br>        &#125;<br>        quick_sort(nums, l, j);<br>        quick_sort(nums, j + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-链表题&quot;&gt;&lt;a href=&quot;#1-链表题&quot; class=&quot;headerlink&quot; title=&quot;1. 链表题&quot;&gt;&lt;/a&gt;1. 链表题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.cn/problems/reverse-link</summary>
      
    
    
    
    <category term="校招" scheme="https://www.ckxgzxa.top/categories/%E6%A0%A1%E6%8B%9B/"/>
    
    <category term="算法" scheme="https://www.ckxgzxa.top/categories/%E6%A0%A1%E6%8B%9B/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>npm 常见命令</title>
    <link href="https://www.ckxgzxa.top/npm-common-commands.html"/>
    <id>https://www.ckxgzxa.top/npm-common-commands.html</id>
    <published>2022-05-21T15:34:18.000Z</published>
    <updated>2022-05-21T18:05:59.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h2><h3 id="1-构建项目"><a href="#1-构建项目" class="headerlink" title="1. 构建项目"></a>1. 构建项目</h3><p>初始化一个基于node的项目, 会创建一个配置文件<code>package.json</code>(两种方式):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1. 一般情况下, 全部enter</span><br>npm init<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2. 全部使用默认配置</span><br>npm init --yes<br></code></pre></td></tr></table></figure><h3 id="2-安装模块-包"><a href="#2-安装模块-包" class="headerlink" title="2. 安装模块(包)"></a>2. 安装模块(包)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局安装</span><br>npm install 模块名 -g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">本地安装</span><br>npm install 模块名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">一次性安装多个</span><br>npm install 模块名1 模块名2 模块名n --save<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装运行时依赖包</span><br>npm install 模块名 --save<br></code></pre></td></tr></table></figure><h3 id="3-查看安装目录"><a href="#3-查看安装目录" class="headerlink" title="3. 查看安装目录"></a>3. 查看安装目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看本地安装的目录</span><br>npm root<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看全局安装的目录</span><br>npm root -g<br></code></pre></td></tr></table></figure><h3 id="4-卸载模块-包"><a href="#4-卸载模块-包" class="headerlink" title="4. 卸载模块(包)"></a>4. 卸载模块(包)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载本地模块</span><br>npm uninstall 模块名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">加载全局模块</span><br>npm uninstall -g 模块名<br></code></pre></td></tr></table></figure><h3 id="5-更新模块-包"><a href="#5-更新模块-包" class="headerlink" title="5. 更新模块(包)"></a>5. 更新模块(包)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm update 模块名<br>npm update 模块名 -g<br></code></pre></td></tr></table></figure><h3 id="6-查看当前安装的模块-包"><a href="#6-查看当前安装的模块-包" class="headerlink" title="6. 查看当前安装的模块(包)"></a>6. 查看当前安装的模块(包)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm ls<br>npm ls -g<br></code></pre></td></tr></table></figure><h3 id="7-命令配置"><a href="#7-命令配置" class="headerlink" title="7. 命令配置"></a>7. 命令配置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;script&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;命令&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;执行代码&quot;</span><span class="hljs-punctuation">,</span><br>    ...<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>执行配置的命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">必须加run</span><br>npm run 命令<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">特殊的命令 start 可不加run</span><br>npm start<br>或<br>npm run start<br></code></pre></td></tr></table></figure><h3 id="8-使用国内npm镜像源"><a href="#8-使用国内npm镜像源" class="headerlink" title="8. 使用国内npm镜像源"></a>8. 使用国内npm镜像源</h3><ol><li><p>使用配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure></li><li><p>使用<code>cnpm</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">先安装cnpm工具</span><br>npm install -g cnpm --registry=https://registry.npm.taobao.org<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用cnpm代替npm</span><br>cnpm install 模块名<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;npm常用命令&quot;&gt;&lt;a href=&quot;#npm常用命令&quot; class=&quot;headerlink&quot; title=&quot;npm常用命令&quot;&gt;&lt;/a&gt;npm常用命令&lt;/h2&gt;&lt;h3 id=&quot;1-构建项目&quot;&gt;&lt;a href=&quot;#1-构建项目&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="node.js" scheme="https://www.ckxgzxa.top/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin运算符重载重载函数表</title>
    <link href="https://www.ckxgzxa.top/Kotlin-operator-SyntacticSugar.html"/>
    <id>https://www.ckxgzxa.top/Kotlin-operator-SyntacticSugar.html</id>
    <published>2022-05-12T13:36:33.000Z</published>
    <updated>2022-05-12T13:52:37.145Z</updated>
    
    <content type="html"><![CDATA[<table>    <caption><strong>Kotlin运算符重载语法糖表达式和实际调用函数对照表</strong></caption>    <tr>        <th>语法糖表达式</th>        <th>实际调用函数</th>    </tr>    <tr>        <td>a + b</td>        <td>a.plus(b)</td>    </tr>    <tr>        <td>a - b</td>        <td>a.minus(b)</td>    </tr>    <tr>        <td>a * b</td>        <td>a.times(b)</td>    </tr>    <tr>        <td>a / b</td>        <td>a.div(b)</td>    </tr>    <tr>        <td>a % b</td>        <td>a.rem(b)</td>    </tr>    <tr>        <td>a++</td>        <td>a.inc()</td>    </tr>    <tr>        <td>a--</td>        <td>a.dec()</td>    </tr>    <tr>        <td>+a</td>        <td>a.unaryPlus()</td>    </tr>    <tr>        <td>-a</td>        <td>a.unaryMinus()</td>    </tr>    <tr>        <td>!a</td>        <td>a.not()</td>    </tr>    <tr>        <td>a==b</td>        <td rowspan=4>a.equals(b)</td>    </tr>    <tr>        <td>a == b</td>    </tr>    <tr>        <td>a > b</td>    </tr>    <tr>        <td>a < b</td>    </tr>    <tr>        <td>a >= b</td>    </tr>    <tr>        <td>a <= b</td>        <td>a.compareTo(b)</td>    </tr>       <tr>        <td>a..b</td>        <td>a.rangeTo(b)</td>    </tr>    <tr>        <td>a[b]</td>        <td>a.get(b)</td>    </tr>    <tr>        <td>a[b] = c</td>        <td>a.set(b, c)</td>    </tr>    <tr>        <td>a in b</td>        <td>b.contains(a)</td>    </tr></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
    &lt;caption&gt;&lt;strong&gt;Kotlin运算符重载语法糖表达式和实际调用函数对照表&lt;/strong&gt;&lt;/caption&gt;
    &lt;tr&gt;
        &lt;th&gt;语法糖表达式&lt;/th&gt;
        &lt;th&gt;实际调用函数&lt;/th&gt;
    &lt;/t</summary>
      
    
    
    
    <category term="Kotlin" scheme="https://www.ckxgzxa.top/categories/Kotlin/"/>
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android常见限定符(自适应不同屏幕的资源)</title>
    <link href="https://www.ckxgzxa.top/AndroidQuilifiers.html"/>
    <id>https://www.ckxgzxa.top/AndroidQuilifiers.html</id>
    <published>2022-05-11T14:37:47.000Z</published>
    <updated>2022-05-11T15:08:16.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android中常见的限定符-自适应不同屏幕的资源"><a href="#Android中常见的限定符-自适应不同屏幕的资源" class="headerlink" title="Android中常见的限定符(自适应不同屏幕的资源)"></a>Android中常见的限定符(自适应不同屏幕的资源)</h2><table>    <caption>Android中常见的限定符</caption>    <tr>        <th>屏幕特征</th>        <th>限定符</th>        <th>描述</th>    </tr>    <tr>        <td rowspan=4>大小</td>        <td>small</td>        <td>提供给小屏幕设备的资源</td>    </tr>    <tr>        <td>mormal</td>        <td>提供给中等屏幕设备的资源</td>    </tr>    <tr>        <td>large</td>        <td>提供给大屏幕设备的资源</td>    </tr>    <tr>        <td>xlarge</td>        <td>提供给超大屏幕设备的资源</td>    </tr>    <tr>        <td rowspan=5>分辨率</td>        <td>ldpi</td>        <td>提供给低分辨率设备的资源（120 dpi以下）</td>    </tr>    <tr>        <td>mdpi</td>        <td>提供给中等分辨率设备的资源（120 dpi~160 dpi）</td>    </tr>       <tr>        <td>hdpi</td>        <td>提供给高分辨率设备的资源（160 dpi~240 dpi）</td>    </tr>    <tr>        <td>xhdpi</td>        <td>提供给超高分辨率设备的资源（240 dpi~320 dpi）</td>    </tr>    <tr>        <td>xxhdpi</td>        <td>提供给超超高分辨率设备的资源（320 dpi~480 dpi）</td>    </tr>    <tr>        <td rowspan=2>方向</td>        <td>land</td>        <td>提供给横屏设备的资源</td>    </tr>    <tr>        <td>port</td>        <td>提供给竖屏设备的资源</td>    </tr></table><p>下面是上面4种屏幕尺寸所需的最低尺寸</p><ul><li>xlarge屏幕尺寸至少需要 960dp × 720dp</li><li>large屏幕尺寸至少需要 640dp × 480dp</li><li>normal屏幕尺寸至少需要 470dp × 320dp</li><li>small屏幕尺寸至少需要426dp × 320dp</li></ul><blockquote><p>从Android3.2开始，Android的建议直接使用真实的屏幕尺寸来定义屏幕尺寸。</p><p>Android 3.2 支持在layout、 values 目录后添加 </p><p>sw&lt;N&gt;dp （屏幕尺寸至少宽 N 个 dp 才能使用该资源）、</p><p>w&lt;N&gt;dp（屏幕尺寸可用宽度为N个dp可使用该资源）、</p><p>h&lt;N&gt;dp （屏幕尺寸可用高度为N个dp才能使用该资源）、</p><p>例如可指定layout-sw600dp，表明该设备屏幕的宽度大于或等于600个dp时使用该目录下的布局资源。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Android中常见的限定符-自适应不同屏幕的资源&quot;&gt;&lt;a href=&quot;#Android中常见的限定符-自适应不同屏幕的资源&quot; class=&quot;headerlink&quot; title=&quot;Android中常见的限定符(自适应不同屏幕的资源)&quot;&gt;&lt;/a&gt;Android中常见</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Android" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Android/"/>
    
    
    <category term="Android" scheme="https://www.ckxgzxa.top/tags/Android/"/>
    
    <category term="移动开发" scheme="https://www.ckxgzxa.top/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java和Kotlin的对照</title>
    <link href="https://www.ckxgzxa.top/comparasonofJava-Kotlin.html"/>
    <id>https://www.ckxgzxa.top/comparasonofJava-Kotlin.html</id>
    <published>2022-05-04T08:14:14.000Z</published>
    <updated>2022-05-08T04:44:49.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java和Kotlin数据类型对照表"><a href="#Java和Kotlin数据类型对照表" class="headerlink" title="Java和Kotlin数据类型对照表"></a>Java和Kotlin数据类型对照表</h2><table><thead><tr><th align="center">Java基本数据类型</th><th>Kotlin基本数据类型</th><th>数据类型说明</th></tr></thead><tbody><tr><td align="center">int</td><td>Int</td><td>整型</td></tr><tr><td align="center">long</td><td>Long</td><td>长整型</td></tr><tr><td align="center">short</td><td>Short</td><td>短整型</td></tr><tr><td align="center">float</td><td>Float</td><td>单精度浮点型</td></tr><tr><td align="center">double</td><td>Double</td><td>双精度浮点型</td></tr><tr><td align="center">boolean</td><td>Boolean</td><td>布尔型</td></tr><tr><td align="center">char</td><td>Char</td><td>字符型</td></tr><tr><td align="center">byte</td><td>Byte</td><td>字节型</td></tr></tbody></table><h2 id="Java和Kotlin函数可见性修饰符对照表"><a href="#Java和Kotlin函数可见性修饰符对照表" class="headerlink" title="Java和Kotlin函数可见性修饰符对照表"></a>Java和Kotlin函数可见性修饰符对照表</h2><table><thead><tr><th align="center">修饰符</th><th align="center">Java</th><th align="center">Kotlin</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">所有类可见</td><td align="center">所有类可见(默认)</td></tr><tr><td align="center">private</td><td align="center">当前类可见</td><td align="center">当前类可见</td></tr><tr><td align="center">protected</td><td align="center">当前类、子类、同一包路径下的类可见</td><td align="center">当前类、子类可见</td></tr><tr><td align="center">default</td><td align="center">同一包路径下的类可见(默认)</td><td align="center">无</td></tr><tr><td align="center">internal</td><td align="center">无</td><td align="center">同一模块中的类可见</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java和Kotlin数据类型对照表&quot;&gt;&lt;a href=&quot;#Java和Kotlin数据类型对照表&quot; class=&quot;headerlink&quot; title=&quot;Java和Kotlin数据类型对照表&quot;&gt;&lt;/a&gt;Java和Kotlin数据类型对照表&lt;/h2&gt;&lt;table&gt;
&lt;</summary>
      
    
    
    
    <category term="Kotlin" scheme="https://www.ckxgzxa.top/categories/Kotlin/"/>
    
    <category term="Java" scheme="https://www.ckxgzxa.top/categories/Java/"/>
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>UML类图</title>
    <link href="https://www.ckxgzxa.top/UMLClassDiagram.html"/>
    <id>https://www.ckxgzxa.top/UMLClassDiagram.html</id>
    <published>2022-04-19T11:09:06.000Z</published>
    <updated>2022-04-29T03:14:42.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><p>[toc]</p><h2 id="1-UML概述"><a href="#1-UML概述" class="headerlink" title="1. UML概述"></a>1. UML概述</h2><p>UML(Unified Modeling Language， 统一建模语言）是当前面向对象软件系统建模的标准语言 ，它融合了众多软件建模技术的优点 ，通过一系列标准的图形符号来描述系统 。 在设计模式的学习和使用过程中也需要掌握一些UML相关技术 ， 尤其是UML类图 ，通过类图可以更好地理解每一个设计模式的结构并对每一个模式实例进行分析 。</p><h2 id="2-类与类的UML表示"><a href="#2-类与类的UML表示" class="headerlink" title="2. 类与类的UML表示"></a>2. 类与类的UML表示</h2><h3 id="2-1-类"><a href="#2-1-类" class="headerlink" title="2.1 类"></a>2.1 类</h3><p>类(Class)封装了数据和行为 ，是面向对象的重要组成部分，它是具有相同属性 、操作、关系的对象集合的总称。</p><p>类图(Class Diagram)使用出现在系统中的不同类来描述系统的静态结构 ，它用来描述 不同的类以及它们之间的关系 。</p><h3 id="2-2-类的UML图示"><a href="#2-2-类的UML图示" class="headerlink" title="2.2 类的UML图示"></a>2.2 类的UML图示</h3><p>在UML中类使用包含类名属性和操作且带有分隔线的长方形来表示:</p><pre><code class=" mermaid">classDiagramclass Employee&#123;- name : String- age : int- email : String+ modify() : void    &#125;</code></pre><p>对应的Java代码片段如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String email;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">modifyInfo</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在UML类图中, 类一般由三部分组成。</p><ol><li><p>第一部分是列名；</p></li><li><p>第二部分是类的属性（Attributes）：属性是指类的性质，即类的成员变量。一个类可以有任意多个属性，也可以没有属性。</p><hr><p>属性的标识方式如下：</p><p><strong>[ 可见性 ] 名称:类型 [ = 默认值 ]</strong></p><hr></li></ol><ol><li><p>“可见性” 表示该属性对于类外的元素而言是否可见，它们的符号表示如下：</p><table>    <tr>        <td>公有(public)</td>        <td>+</td>    </tr>    <tr>        <td>私有(private)</td>        <td>-</td>    </tr>    <tr>        <td>受保护(protected)</td>        <td>#</td>    </tr>    <tr>        <td>默认</td>        <td>*</td>    </tr></table></li><li><p>”名称“表示属性名，用一个字符串表示。</p></li><li><p>“类型”表示属性的数据类型，可以是基本数据类型，也可以是用户自定义类型。</p></li><li><p>“默认值是一个可选项，即属性的初始值。</p></li><li><p>第三部分是类的操作（Operations）：操作是类的任意一个实例对象都可以使用的行为，是类的成员方法。</p></li></ol><hr><p>   UML规定操作的表示方式如下：</p><p>   <strong>[ 可见性 ] 名称([ 参数列表 ]) [ : 返回类型]</strong></p><hr><p>   其中：</p><ol><li>“可见性”的定义和属性的可见性的定义相同。</li><li>“名称”即方法名或操作名，用一个字符串表示。</li><li>“参数列表”表示方法的参数，其语法与属性的定义相似 ，参数个数是任意的，多个参数之间用逗号” , “隔开 。</li><li>“返回类型”是一个可选性，表示方法的返回值类型，依赖于具体的编程语言，可以是基本数据类型，也可以是用户自定义类型，还可以是空类型(void) ，<em>如果是构造方法， 则无返回类型</em>。</li></ol><h3 id="2-3-类之间的关系"><a href="#2-3-类之间的关系" class="headerlink" title="2.3 类之间的关系"></a>2.3 类之间的关系</h3><p>在软件系统中类并不是孤立存在的 ，类与类之间存在各种关系， 对于不同类型的关系， UML 提供了不同的表示方式。</p><h4 id="2-3-1-关联关系"><a href="#2-3-1-关联关系" class="headerlink" title="2.3.1 关联关系"></a>2.3.1 关联关系</h4><p><strong>关联(Association)关系</strong>是类与类之间最常用的一种关系，它是一种结构化关系，用于表示一类对象与另一类对象之间有联系， 如汽车和轮胎 、 师傅和徒弟 、 班级和学生等。</p><p>在UML类图中用<strong>实线</strong>连接有关联关系的对象所对应的类，在使用 Java 、 C ＃和 C＋＋等编程语言实现关联关系时，通常将一个类的对象作为另一个类的成员变量。</p><p>在使用类图表示关联关系时可以在关联线上标注角色名，一般使用一个表示两者之间关系的动词或者名词表示角色名（有时该名词为实例对象名） ，关系的两端代表两种不同的角色，因此在一个关联关系中可以包含两个角色名，角色名不是必须的 ，可以根据需要增加 ， 其目的是使类之间的关系更加明确 。</p><pre><code class=" mermaid">classDiagramclass LoginForm &#123;- loginButton : JButton&#125;JButton &lt;-- LoginForm : contains</code></pre><p>对应的Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginForm</span> &#123;<br>    <span class="hljs-keyword">private</span> JButton loginButton; <span class="hljs-comment">//定义为成员变量</span><br>    ...<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JButton</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在UML中，关联关系包含以下集中形式：</p><ol><li><p>双向关联</p><p>在默认情况下关联是双向的。例如顾客(Customer)购买商品(Product)并拥有商品，反之，卖出的商品总有某个顾客与之相关联。 因此，Customer 类和 Product 类之间具有双向关联关系， 如下图：</p><pre><code class=" mermaid">classDiagramclass Customer &#123;- products : Product[]&#125;class Product &#123;- customer : Customer&#125;Customer &quot;purchases&quot; -- &quot;is sold to&quot; Product</code></pre><p>对应的Java片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">private</span> Productor[] products;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-keyword">private</span> Customer customer;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>单向关联</p><p>类的关联关系也可以是单向的，单向关联用带箭头的实线表示。例如顾客(Customer)拥有地址 (Address), 则Customer类与Address类具有单向关联关系，如下图：</p><pre><code class=" mermaid">classDiagramCustomer --&gt; Address : hasclass Customer &#123;- address : Address&#125;</code></pre><p>对应的Java片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br><span class="hljs-keyword">private</span> Address address;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>自关联</p><p>在系统中可能会存在一些类的属性对象类型为该类本身 ， 这种特殊的关联关系称为自关联。 例如一个结点类(Node)的成员又是结点 Node 类型的对象 ，如下图：</p><pre><code class=" mermaid">classDiagramclass Node &#123;- subNode : Node&#125;Node --&gt; Node : contains</code></pre><p>对应的Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-keyword">private</span> Node subNode;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>多重性关联</p><p>多重性关联关系又称为重数性(Multiplicity)关联关系，表示两个关联对象在数量上的对应关系。 在UML中对象之间的多重性可以直接在关联直线上用一个数字或一个数字范围表示。</p><p>常见的多重性表示方式如下表所示：</p><table>    <caption>多重性表示方式表</caption>    <tr>        <th>表示方式</th>        <th>多重性说明</th>    </tr>    <tr>        <td>1. .1</td>        <td>表示另—个类的一个对象只与该类的一个对象有关系</td>    </tr>    <tr>        <td>0. .*</td>        <td>表示另—个类的一个对象与该类的零个或多个对象有关系</td>    </tr>    <tr>        <td>1. .*</td>        <td>表示另—个类的一个对象只与该类的一个对象或多个对象有关系</td>    </tr>    <tr>        <td>0. .1</td>        <td>表示另—个类的一个对象没有或只与该类的一个对象有关系</td>    </tr>    <tr>        <td>m. .n</td>        <td>表示另—个类的一个对象与该类最少m最多n个对象有关系(m <= n)</td>    </tr></table><p>例如一个界面(Form)可以拥有零个或多个按钮(Button) ，但是一个按钮只能属于一个界面， 因此一个Form类的对象可以与零个或多个Button类的对象相关联， 但一个Button类的对象只能与一个Form类的对象关联 ，如图所示：</p><pre><code class=" mermaid">classDiagramForm &quot;1. .1&quot; --&gt; &quot;0. .*&quot; Buttonclass Form &#123;- buttons : Button[]&#125;</code></pre><p>对应的Java代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Form</span> &#123;<br><span class="hljs-keyword">private</span> Button[] button; <span class="hljs-comment">//定义一个集合对象</span><br>    ...<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>聚合关系</p><p>聚合(Aggregation)关系表示整体与部分的关系 。 在聚合关系中 ，成员对象是整体对象的一部分 ，但是成员对象可以脱离整体对象独立存在。 在UML中 ，聚合关系用带空心菱形的直线表示 。 例如汽车发动机(Engine)是汽车(Car)的组成部分 ，但是汽车发动机可以独立存在 ， 因此汽车和发动机是聚合关系，如图所示：</p><pre><code class=" mermaid">classDiagramclass Car &#123;-engine : Engine+Car(Engine engine)+setEngine(Engine engine) void&#125;Car o--&gt; Engine : cotains</code></pre><p>对应的Java代码片段如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br><span class="hljs-keyword">private</span> Engine engine;<br><span class="hljs-comment">//构造注入</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Car</span><span class="hljs-params">( Engine engine)</span>&#123;<br><span class="hljs-built_in">this</span>.engine = engine;<br>)<br><span class="hljs-comment">//设值注入</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEngine</span><span class="hljs-params">(Engine engine)</span>&#123;<br><span class="hljs-built_in">this</span>.engine = engine;<br>)<br>)<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Engine</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>组合关系</p><p>组合(Composition)关系也表示类之间整体和部分的关系，但是在组合关系中整体对象可以控制成员对象的生命周期，<em>一旦整体对象不存在，成员对象也将不存在，成员对象与整体对象之间具有同生共死的关系</em>。 在UML中，组合关系用带实心菱形的直线表示 。 例如人的头(Head)与嘴巴(Mouth) ， 嘴巴是头的组成部分之一， 而且如果头没了， 嘴巴也就没了，因此头和嘴巴是组合关系，如图所示:</p><pre><code class=" mermaid">classDiagramclass Head &#123;-mouth : Mouth+Head()&#125;callback Head &quot;callbackFunction&quot; &quot;This is a tooltip for a callback&quot;Head *--&gt; Mouth : has</code></pre><p>Java代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Head</span> &#123;<br>    <span class="hljs-keyword">private</span> Mouth mouth;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Head</span><span class="hljs-params">()</span> &#123;<br>        mouth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mouth</span>();<span class="hljs-comment">//实例化成员类</span><br>    &#125;<br>...<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mouth</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-3-2-依赖关系"><a href="#2-3-2-依赖关系" class="headerlink" title="2.3.2 依赖关系"></a>2.3.2 依赖关系</h4><p><strong>依赖(Dependency )关系</strong>是一种使用关系 ，特定事物的改变有可能会影响到使用该事物的其他事物， 在需要表示一个事物使用另一个事物时使用依赖关系。 在大多数情况下， 依赖关系体现在某个类的方法使用另一个类的对象作为参数。 在UML中， 依赖关系用<strong>带箭头的虚线</strong>表示， 由依赖 的一方指向被依赖 的一方 。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/UML.svg"></p><p>对应的Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Driver</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drive</span><span class="hljs-params">(Car car)</span> &#123;<br>        car.move();<br>    &#125;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在系统实现阶段， 依赖关系通常通过3种方式来实现：</p><p>第一种（也是最常用的一种方式） 将一个类的对象作为另一个类中方法的参数(如上例)；</p><p>第二种方式是在一个类的方法中将另一个类的对象作为其局部变量；</p><p>第三种方式是在一个类的方法中调用另一个类的静态方法。</p><h4 id="2-3-3-泛化关系"><a href="#2-3-3-泛化关系" class="headerlink" title="2.3.3 泛化关系"></a>2.3.3 泛化关系</h4><p><strong>泛化(Generalization)关系</strong>也就是<strong>继承关系</strong> ，用于描述父类与子类之间的关系 ， 父类又称作基类或超类， 子类又称作派生类。 在UML中， 泛化关系用<strong>带空心三角形的直线</strong>来表示 。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/SoWkIImgAStDuUNYvU9CpaaiBbO8I2qgpizJg0OAS2hd9UQcAbWf19SKPUQbWqKIqq42cNab89vsRdvPgeOcKA0iFpC5B5ASM8aiK0itDxYaD2KrhqGXjQ8aDIy5rHxTOeYaNpwAPTeWOHp6XQGc9cUa5c4thWGYYMuSM1ZDE5uk1w1-O1000000.svg"></p><p>对应的Java片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String studentNo;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;<br>    ...<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String teacherNo;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teach</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-4-接口与实现关系"><a href="#2-3-4-接口与实现关系" class="headerlink" title="2.3.4 接口与实现关系"></a>2.3.4 接口与实现关系</h4><p>在 UML 中用与类的表示法类似的方式表示接口，接口之间也可以有与类之间关系类似的继承关系和依赖关系，但是接口和类之间还存在一种<strong>实现(Realization)关系</strong>，在这种关系中类实现了接口，类中的操作实现了接口中所声明的操作。在UML中，类与接口之间的实现关系用<strong>带空心三角形的虚线</strong>来表示。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/SoWkIImgAStDKNYwRjxplWrFMpS_txmRo7wohvkNgoIp92SLgmndPbv9Qb5QOdAgWcDUPcvYZeAD3Lp8pguQg89JEpU_B5L3Ky5AeIm_CmKiKfnVcfU2B5JBomKay_9BKXMIyajAydCLyjEW9e8qFEjR-hH_yVDPBQ6-Fazdxtk-P1TGD3KlHG6a0wmLuOwmr8pCPA1pYN08nDRadCJYOeNWZCm2XSpSWfpKtDIyacAOCOGrEYSMOT6dW5EZ0z3Tm8060000.svg"></p><p>对应的Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;UML类图&quot;&gt;&lt;a href=&quot;#UML类图&quot; class=&quot;headerlink&quot; title=&quot;UML类图&quot;&gt;&lt;/a&gt;UML类图&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;1-UML概述&quot;&gt;&lt;a href=&quot;#1-UML概述&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Java" scheme="https://www.ckxgzxa.top/categories/Java/"/>
    
    <category term="UML" scheme="https://www.ckxgzxa.top/categories/Java/UML/"/>
    
    
  </entry>
  
  <entry>
    <title>java.util.function 接口的基本命名规则</title>
    <link href="https://www.ckxgzxa.top/InterfaceNaming.html"/>
    <id>https://www.ckxgzxa.top/InterfaceNaming.html</id>
    <published>2022-04-15T17:47:53.000Z</published>
    <updated>2022-04-29T05:19:37.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-util-function-接口的命名规则"><a href="#java-util-function-接口的命名规则" class="headerlink" title="java.util.function 接口的命名规则"></a>java.util.function 接口的命名规则</h2><ol><li>如果接口只处理对象，而不是基本类型，那就会用一个直截了当的名字，像 Function、Consumer和Predicate等。参数类型通过泛型添加。</li><li>若接口接受一个基本类型的参数，则会用名字的第一部分来表示，例如LongConsumer、DoubleFunction和Predicate等。参数类型会通过泛型添加。</li><li>若接口返回的是基本类型的结果，则会用 To 来表示，例如 ToLongFunction&lt;T&gt; 和 IntToLongFunction。</li><li>若接口返回的类型和参数类型相同，则会被命名为Operator。UnaryOperator用于表示一个参数，BinaryOperator用于表示两个参数。</li><li>若接口接受一个参数并返回 boolean，则会被命名为Predicate。</li><li>若接口接受两个不同类型的参数，则名字中会有一个Bi（比如BiPredicate）。</li></ol><h3 id="java-util-function的目标类型"><a href="#java-util-function的目标类型" class="headerlink" title="java.util.function的目标类型"></a>java.util.function的目标类型</h3><table><thead><tr><th align="left">特点</th><th align="left">函数式方法命名</th><th align="left">用法</th></tr></thead><tbody><tr><td align="left">没有参数；没有返回值</td><td align="left"><code>Runnable</code> (java.lang) <code>run()</code></td><td align="left"><code>Runnable</code></td></tr><tr><td align="left">没有参数；可以返回任何类型</td><td align="left"><code>Supplier</code> <code>get()</code> <code>getAs</code>type<code>()</code></td><td align="left"><code>Supplier&lt;T&gt;</code> <code>BooleanSupplier</code> <code>IntSupplier</code> <code>LongSupplier</code> <code>DoubleSupplier</code></td></tr><tr><td align="left">没有参数；可以返回任何类型</td><td align="left"><code>Callable</code> (java.util.concurrent) <code>call()</code></td><td align="left"><code>Callable&lt;V&gt;</code></td></tr><tr><td align="left">一个参数；没有返回值</td><td align="left"><code>Consumer</code> <code>accept()</code></td><td align="left"><code>Consumer&lt;T&gt;</code> <code>IntConsumer</code> <code>LongConsumer</code> <code>DoubleConsumer</code></td></tr><tr><td align="left">两个参数的<code>Consumer</code></td><td align="left"><code>BiConsumer</code> <code>accept()</code></td><td align="left"><code>BiConsumer&lt;T,U&gt;</code></td></tr><tr><td align="left">两个参数的<code>Consumer</code>；第一个参数是引用，第二个参数是基本类型</td><td align="left"><code>Obj</code>type<code>Consumer</code> <code>accept()</code></td><td align="left"><code>ObjIntConsumer&lt;T&gt;</code> <code>ObjLongConsumer&lt;T&gt;</code> <code>ObjDoubleConsumer&lt;T&gt;</code></td></tr><tr><td align="left">一个参数；返回值为不同类型</td><td align="left"><code>Function</code> <code>apply()</code> <code>To</code>type &amp; type<code>To</code>type: <code>applyAs</code>type<code>()</code></td><td align="left"><code>Function&lt;T,R&gt;</code> <code>IntFunction&lt;R&gt;</code> <code>LongFunction&lt;R&gt;</code> <code>DoubleFunction&lt;R&gt;</code> <code>ToIntFunction&lt;T&gt;</code> <code>ToLongFunction&lt;T&gt;</code> <code>ToDoubleFunction&lt;T&gt;</code> <code>IntToLongFunction</code> <code>IntToDoubleFunction</code> <code>LongToIntFunction</code> <code>LongToDoubleFunction</code> <code>DoubleToIntFunction</code> <code>DoubleToLongFunction</code></td></tr><tr><td align="left">一个参数；返回值为相同类型</td><td align="left"><code>UnaryOperator</code> <code>apply()</code></td><td align="left"><code>UnaryOperator&lt;T&gt;</code> <code>IntUnaryOperator</code> <code>LongUnaryOperator</code> <code>DoubleUnaryOperator</code></td></tr><tr><td align="left">两个相同类型的参数；返回值也是相同类型</td><td align="left"><code>BinaryOperator</code> <code>apply()</code></td><td align="left"><code>BinaryOperator&lt;T&gt;</code> <code>IntBinaryOperator</code> <code>LongBinaryOperator</code> <code>DoubleBinaryOperator</code></td></tr><tr><td align="left">两个相同类型的参数；返回<code>int</code></td><td align="left"><code>Comparator</code> (java.util) <code>compare()</code></td><td align="left"><code>Comparator&lt;T&gt;</code></td></tr><tr><td align="left">两个参数；返回<code>boolean</code></td><td align="left"><code>Predicate</code> <code>test()</code></td><td align="left"><code>Predicate&lt;T&gt;</code> <code>BiPredicate&lt;T,U&gt;</code> <code>IntPredicate</code> <code>LongPredicate</code> <code>DoublePredicate</code></td></tr><tr><td align="left">基本类型的参数；返回值也是基本类型</td><td align="left">type<code>To</code>type<code>Function</code> <code>applyAs</code>type<code>()</code></td><td align="left"><code>IntToLongFunction</code> <code>IntToDoubleFunction</code> <code>LongToIntFunction</code> <code>LongToDoubleFunction</code> <code>DoubleToIntFunction</code> <code>DoubleToLongFunction</code></td></tr><tr><td align="left">两个参数；不同类型</td><td align="left"><code>Bi</code>+操作名（方法名会变化）</td><td align="left"><code>BiFunction&lt;T,U,R&gt;</code> <code>BiConsumer&lt;T,U&gt;</code> <code>BiPredicate&lt;T,U&gt;</code> <code>ToIntBiFunction&lt;T,U&gt;</code> <code>ToLongBiFunction&lt;T,U&gt;</code> <code>ToDoubleBiFunction&lt;T,U&gt;</code></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;java-util-function-接口的命名规则&quot;&gt;&lt;a href=&quot;#java-util-function-接口的命名规则&quot; class=&quot;headerlink&quot; title=&quot;java.util.function 接口的命名规则&quot;&gt;&lt;/a&gt;java.uti</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Java/"/>
    
    
    <category term="Java" scheme="https://www.ckxgzxa.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>安卓常见距离单位</title>
    <link href="https://www.ckxgzxa.top/AndroidDistances.html"/>
    <id>https://www.ckxgzxa.top/AndroidDistances.html</id>
    <published>2022-04-07T10:17:47.000Z</published>
    <updated>2022-04-16T04:22:39.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安卓常见距离单位"><a href="#安卓常见距离单位" class="headerlink" title="安卓常见距离单位"></a>安卓常见距离单位</h1><ul><li><strong>px (像素)</strong> : 每个px对应屏幕上的一个点</li><li><strong>dip 或 dp (device independent pixels， 设备独立像素)</strong> : 一种屏幕密度的抽象单位。 在每英寸 160 点的显示器上， 1dip = 1px， dip 与 px。 但随着屏幕密度的改变， dip 与 px 的换算会发生改变。</li><li><strong>sp (scaled pixels， 比例像素)</strong> : 主要处理字体的大小， 可以根据用户的字体大小首选项进行缩放。</li><li><strong>in (英寸)</strong> : 标准长度单位。</li><li><strong>mm (毫米)</strong> : 标准长度单位。</li><li><strong>pt (磅)</strong> : 标准长度单位。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安卓常见距离单位&quot;&gt;&lt;a href=&quot;#安卓常见距离单位&quot; class=&quot;headerlink&quot; title=&quot;安卓常见距离单位&quot;&gt;&lt;/a&gt;安卓常见距离单位&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;px (像素)&lt;/strong&gt; : 每个px对应屏幕上的一个点</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Android" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Android/"/>
    
    
    <category term="Android" scheme="https://www.ckxgzxa.top/tags/Android/"/>
    
    <category term="移动开发" scheme="https://www.ckxgzxa.top/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>构造随机数和随机字符串</title>
    <link href="https://www.ckxgzxa.top/randomthingsofpython.html"/>
    <id>https://www.ckxgzxa.top/randomthingsofpython.html</id>
    <published>2022-03-26T05:20:09.000Z</published>
    <updated>2022-03-26T05:21:58.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用Python构造随机数和随机字符串"><a href="#利用Python构造随机数和随机字符串" class="headerlink" title="利用Python构造随机数和随机字符串"></a>利用Python构造随机数和随机字符串</h1><table><thead><tr><th>Python语句</th><th>输出示例</th></tr></thead><tbody><tr><td><code>import random</code> 可以写成：<code>from random import *</code> 此时后面的代码能够简单一点，例如把<code>random.randint</code>直接写为 <code>randint</code></td><td></td></tr><tr><td>在指定范围内生成一个很大的随机整数： <code>print (random.randint(-9999999999999999,10e20))</code></td><td>417715183092046338</td></tr><tr><td>在指定范围内（0到100000）生成一个随机偶数： <code>print (random.randrange(0, 100001, 2))</code></td><td>14908</td></tr><tr><td>生成一个0到1之间的随机浮点数： <code>print (random.random())</code></td><td>0.2856636141181378</td></tr><tr><td>在指定范围内（1到20）生成一个随机浮点数： <code>print (random.uniform(1, 20))</code></td><td>9.81984258258233</td></tr><tr><td>在指定字符中生成一个随机字符： <code>print (random.choice(&#39;abcdefghijklmnopqrst@#$%*()&#39;))</code></td><td>d</td></tr><tr><td>在指定字符中生成指定数量的随机字符： <code>print (random.sample(&#39;utsrqpozyxwvnmlkjihgfedcba&#39;,5))</code></td><td>[‘z’, ‘u’, ‘x’, ‘w’, ‘j’]</td></tr><tr><td><code>import string</code> 若写成 <code>from string import *</code>，下面的<code>string.ascii_letters</code> 改为 <code>ascii_letters</code></td><td></td></tr><tr><td>用a-z、A-Z、0-9生成指定数量的随机字符串： <code>ran_s = &#39;&#39;.join(random.sample(string.ascii_letters + string.digits, 7))print (ran_s)</code></td><td>iCTm6yN</td></tr><tr><td>从多个字符中选取指定数量的字符组成新字符串： <code>print (&#39;&#39;.join(random.sample([&#39;m&#39;,&#39;l&#39;,&#39;i&#39;,&#39;h&#39;,&#39;g&#39;,&#39;k&#39;,&#39;j&#39;,&#39;d&#39;], 5)))</code></td><td>mjlhd</td></tr><tr><td>打乱顺序： <code>items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] random.shuffle(items)for i in range(0,len(items),1): #逐个打印 print (items[i],&quot; &quot;,end=&#39;&#39;)</code></td><td>1 0 8 3 5 7 9 4 6 2###</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;利用Python构造随机数和随机字符串&quot;&gt;&lt;a href=&quot;#利用Python构造随机数和随机字符串&quot; class=&quot;headerlink&quot; title=&quot;利用Python构造随机数和随机字符串&quot;&gt;&lt;/a&gt;利用Python构造随机数和随机字符串&lt;/h1&gt;&lt;tabl</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS 层叠样式表</title>
    <link href="https://www.ckxgzxa.top/CSSLearning.html"/>
    <id>https://www.ckxgzxa.top/CSSLearning.html</id>
    <published>2022-03-26T02:05:54.000Z</published>
    <updated>2022-03-27T14:12:08.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS学习"><a href="#CSS学习" class="headerlink" title="CSS学习"></a>CSS学习</h1><p>CSS全称为“层叠样式表 (Cascading Style Sheets)”，它主要是用于定义HTML内容在浏览器内的显示样式，如文字大小、颜色、字体加粗等。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202203271734537.jpeg" alt="img"></p><p><strong>选择符：</strong>又称选择器，指明网页中要应用样式规则的元素，如本例中是网页中所有的段（p）的文字将变成蓝色，而其他的元素（如ol）不会受到影响。</p><p><strong>声明：</strong>在英文大括号“｛｝”中的的就是声明，属性和值之间用英文冒号“：”分隔。当有多条声明时，中间可以英文分号“;”分隔，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">12px</span>;<span class="hljs-attribute">color</span>:red;&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>1、最后一条声明可以没有分号，但是为了以后修改方便，一般也加上分号。</p><p>2、为了使用样式更加容易阅读，可以将每条代码写在一个新行内，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>   <span class="hljs-attribute">font-size</span>:<span class="hljs-number">12px</span>;<br>   <span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>就像在Html的注释一样，在CSS中也有注释语句：用<code>/*注释语句*/</code>来标明（Html中使用<code>&lt;!--注释语句--&gt;</code>)。就像下面代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>; <span class="hljs-comment">/*设置文字子号为12px*/</span><br>    <span class="hljs-attribute">color</span>: red; <span class="hljs-comment">/*设置文字颜色为红色*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h3><p><em>不要在属性值与单位之间留有空格（如：”margin-left: 20 px” ），正确的写法是 “margin-left: 20px” 。</em></p><h4 id="内联式"><a href="#内联式" class="headerlink" title="内联式"></a>内联式</h4><p>CSS样式可以写在哪些地方呢？从CSS 样式代码插入的形式来看基本可以分为以下3种：内联式、嵌入式和外部式三种。这一小节先来讲解内联式。</p><p><code>内联式</code>css样式表就是把css代码直接写在现有的HTML标签中，如下面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span>这里文字是红色。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意要写在元素的开始标签里，下面这种写法是错误的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这里文字是红色。&lt;/p style=&quot;color:red&quot;&gt;<br></code></pre></td></tr></table></figure><p>并且css样式代码要写在style=””双引号中，如果有多条css样式代码设置可以写在一起，中间用分号隔开。如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red;font-size:12px&quot;</span>&gt;</span>这里文字是红色。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="嵌入式-内部"><a href="#嵌入式-内部" class="headerlink" title="嵌入式/内部"></a>嵌入式/内部</h4><p>嵌入式css样式，就是可以把css样式代码写在**<style type="text/css"></style>**标签之间。如下面代码实现把三个<span>标签中的文字设置为红色：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>嵌入式css样式必须写在<code>&lt;style&gt;``&lt;/style&gt;</code>之间，并且一般情况下嵌入式css样式写在<code>&lt;head&gt;``&lt;/head&gt;</code>之间。如右边编辑器中的代码。</p><h4 id="外部式"><a href="#外部式" class="headerlink" title="外部式"></a>外部式</h4><p>外部式css样式(也可称为外联式)就是把css代码写一个单独的外部文件中，这个css样式文件以“<code>.css</code>”为扩展名，在<code>&lt;head&gt;</code>内（不是在<code>&lt;style&gt;</code>标签内）使用<code>&lt;link&gt;</code>标签将css样式文件链接到HTML文件内，如下面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mystyle.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>mystyle.css : </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">hr &#123;<span class="hljs-attribute">color</span>:sienna;&#125;<br><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">margin-left</span>:<span class="hljs-number">20px</span>;&#125;<br><span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-image</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;/images/back40.gif&quot;</span>);&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li><p>css样式文件名称以有意义的英文字母命名，如 main.css。</p></li><li><p>rel=”stylesheet” type=”text/css” 是固定写法不可修改。</p></li><li><p><code>&lt;link&gt;</code>标签位置一般写在<code>&lt;head&gt;</code>标签之内。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS学习&quot;&gt;&lt;a href=&quot;#CSS学习&quot; class=&quot;headerlink&quot; title=&quot;CSS学习&quot;&gt;&lt;/a&gt;CSS学习&lt;/h1&gt;&lt;p&gt;CSS全称为“层叠样式表 (Cascading Style Sheets)”，它主要是用于定义HTML内容在浏览器内</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="https://www.ckxgzxa.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
