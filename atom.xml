<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术匝记簿</title>
  
  
  <link href="https://www.ckxgzxa.top/atom.xml" rel="self"/>
  
  <link href="https://www.ckxgzxa.top/"/>
  <updated>2022-11-09T13:44:42.358Z</updated>
  <id>https://www.ckxgzxa.top/</id>
  
  <author>
    <name>残魁斜罡</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言学习12-多态</title>
    <link href="https://www.ckxgzxa.top/road2go12.html"/>
    <id>https://www.ckxgzxa.top/road2go12.html</id>
    <published>2022-11-09T10:54:40.000Z</published>
    <updated>2022-11-09T13:44:42.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习12-多态"><a href="#Go语言学习12-多态" class="headerlink" title="Go语言学习12-多态"></a>Go语言学习12-多态</h2><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211091856135.png"></p><h3 id="空接口与断言"><a href="#空接口与断言" class="headerlink" title="空接口与断言"></a>空接口与断言</h3><ol><li><p>空接口可以表示任何类型</p></li><li><p>通过断言来将空接口转换为指定类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">v, ok := p.(<span class="hljs-type">int</span>)   <span class="hljs-comment">//ok = true 时为转换成功</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Go-接口最佳实践"><a href="#Go-接口最佳实践" class="headerlink" title="Go 接口最佳实践"></a>Go 接口最佳实践</h3><ul><li><p>倾向于使用小的接口定义, 很多接口只包含一个方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">interface</span> &#123;<br>    Read(p []<span class="hljs-type">byte</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">int</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> Writer <span class="hljs-keyword">interface</span> &#123;<br>    Write(p []<span class="hljs-type">byte</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">int</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>较大的接口定义, 可以由多个小接口定义组合而成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ReadWriter <span class="hljs-keyword">interface</span> &#123;<br>    Reader<br>    Writer<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>只依赖于必要功能的最小接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StoreData</span><span class="hljs-params">(reader Reader)</span></span> <span class="hljs-type">error</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习12-多态&quot;&gt;&lt;a href=&quot;#Go语言学习12-多态&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习12-多态&quot;&gt;&lt;/a&gt;Go语言学习12-多态&lt;/h2&gt;&lt;h3 id=&quot;多态&quot;&gt;&lt;a href=&quot;#多态&quot; class=&quot;head</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习11-相关接口</title>
    <link href="https://www.ckxgzxa.top/road2go11.html"/>
    <id>https://www.ckxgzxa.top/road2go11.html</id>
    <published>2022-11-09T06:45:45.000Z</published>
    <updated>2022-11-09T10:54:28.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习11-相关接口"><a href="#Go语言学习11-相关接口" class="headerlink" title="Go语言学习11-相关接口"></a>Go语言学习11-相关接口</h2><h3 id="接口与依赖"><a href="#接口与依赖" class="headerlink" title="接口与依赖"></a>接口与依赖</h3><pre class="mermaid">classDiagram    class A    class AImpl    class AClient    <<interface>> A    AImpl ..|> A    AClient ..> A    AClient ..> AImpl</pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Programmer.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Programmer</span> &#123;<br>    String <span class="hljs-title function_">WriteCodes</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// GoProgrammer.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoProgrammer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Programmer</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">WriteCodes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fmt.Println(\&quot;Hello World!\&quot;)&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Task.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Programmer</span> <span class="hljs-variable">prog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GoProgrammer</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">codes</span> <span class="hljs-operator">=</span> prog.WriteCodes();<br>        System.out.printlv(codes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Duck-Type式接口实现"><a href="#Duck-Type式接口实现" class="headerlink" title="Duck Type式接口实现"></a>Duck Type式接口实现</h3><h4 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Programmer <span class="hljs-keyword">interface</span> &#123;<br>    WriteHelloWorld() Code<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> GoProgrammer <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *GoProgrammer)</span></span> WriteHelloWorld() Code &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fmt.Printlv(\&quot;Hello World!\&quot;)&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Go-接口"><a href="#Go-接口" class="headerlink" title="Go 接口"></a>Go 接口</h3><p><font color="blue">与其他主要编程语言的差异</font></p><ol><li>接口为非入侵性, 实现不依赖于接口定义</li><li>所以接口的定义可以包含在接口使用者包内</li></ol><h3 id="接口变量"><a href="#接口变量" class="headerlink" title="接口变量"></a>接口变量</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211091513954.png"></p><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><ol><li><code>type IntConvertionFn func(n int) int</code></li><li><code>type Mypoint int</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习11-相关接口&quot;&gt;&lt;a href=&quot;#Go语言学习11-相关接口&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习11-相关接口&quot;&gt;&lt;/a&gt;Go语言学习11-相关接口&lt;/h2&gt;&lt;h3 id=&quot;接口与依赖&quot;&gt;&lt;a href=&quot;#接口与依</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习10-行为的定义和实现</title>
    <link href="https://www.ckxgzxa.top/road2go10.html"/>
    <id>https://www.ckxgzxa.top/road2go10.html</id>
    <published>2022-11-08T19:34:34.000Z</published>
    <updated>2022-11-09T06:45:37.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习10-行为的定义和实现"><a href="#Go语言学习10-行为的定义和实现" class="headerlink" title="Go语言学习10-行为的定义和实现"></a>Go语言学习10-行为的定义和实现</h2><p>Go语言官方对于Go 语言是否为面向对象编程的描述<a href="https://golang.org/doc/faq">https://golang.org/doc/faq</a>：</p><blockquote><p><font color="blue"><strong>Is Go an object-oriented language?</strong></font></p><p><font color="red">Yes and no.</font> Although Go has types and methods and allows an object-oriented style of programming, there is <strong>no type hierarchy. The concept of “interface” in Go provides a different approach that we believe is wasy to use and in some ways more general.</strong></p><p>Also, the lack of a type hierarchy makes “objects” in Go fell much more lightweight than in language such as C++ or Java.</p></blockquote><h3 id="封装数据和行为"><a href="#封装数据和行为" class="headerlink" title="封装数据和行为"></a>封装数据和行为</h3><h4 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>    Id <span class="hljs-type">string</span><br>    Name <span class="hljs-type">string</span><br>    Age <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实例创建及初始化"><a href="#实例创建及初始化" class="headerlink" title="实例创建及初始化"></a>实例创建及初始化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">e := Employee&#123;<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">20</span>&#125;<br>e1 := Employee&#123;Name: <span class="hljs-string">&quot;Mike&quot;</span>, Age:<span class="hljs-number">30</span>&#125;<br>e2 := <span class="hljs-built_in">new</span>(Employee)<span class="hljs-comment">// 注意这里返回的引用/指针, 相当于 e:=&amp;EmployeeP&#123;&#125;</span><br>e2.Id = <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">// 与其他编程语言的差异: 通过实例的指针访问成员不需要-&gt;</span><br>e2.Age = <span class="hljs-number">22</span><br>e2.Name = <span class="hljs-string">&quot;Rose&quot;</span><br></code></pre></td></tr></table></figure><h4 id="行为-方法-定义"><a href="#行为-方法-定义" class="headerlink" title="行为 (方法) 定义"></a>行为 (方法) 定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 第一种定义方式在实例对应方法被调用时, 实例的成员会进行值复制</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Employee)</span></span> String() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;ID:%s-Name:%s-Age:%d&quot;</span>, e.Id, e.Name, e.Age)<br>&#125;<br><br><span class="hljs-comment">// 通常情况下为了避免内存拷贝我们使用第二种定义方式</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *Employee)</span></span> String() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;ID:%s-Name:%s-Age:%d&quot;</span>, e.Id, e.Name, e.Age)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习10-行为的定义和实现&quot;&gt;&lt;a href=&quot;#Go语言学习10-行为的定义和实现&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习10-行为的定义和实现&quot;&gt;&lt;/a&gt;Go语言学习10-行为的定义和实现&lt;/h2&gt;&lt;p&gt;Go语言官方对于Go</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习09-函数</title>
    <link href="https://www.ckxgzxa.top/road2go09.html"/>
    <id>https://www.ckxgzxa.top/road2go09.html</id>
    <published>2022-11-08T19:13:52.000Z</published>
    <updated>2022-11-08T19:44:03.532Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习09-函数"><a href="#Go语言学习09-函数" class="headerlink" title="Go语言学习09-函数"></a>Go语言学习09-函数</h2><h3 id="函数是一等公民"><a href="#函数是一等公民" class="headerlink" title="函数是一等公民"></a>函数是一等公民</h3><p><font color="Blue">与其他主要编程语言的差异</font></p><ol><li>可以有多个返回值</li><li>所有参数都是值传递: slice, map, channel 会有传引用的错觉</li><li>函数可以作为变量的值</li><li>函数可以作为参数和返回值</li></ol><blockquote><p>学习函数式编程</p><p><img src="https://tse3-mm.cn.bing.net/th/id/OIP-C.4u3dC5EX_oMdrMdvPy4LQgAAAA?pid=ImgDet&rs=1"></p></blockquote><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(ops ...<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    s := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, op := <span class="hljs-keyword">range</span> ops &#123;<br>        s += op<br>    &#125;<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="defer-函数"><a href="#defer-函数" class="headerlink" title="defer 函数"></a>defer 函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestDefer</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        t.Log(<span class="hljs-string">&quot;Clear resources&quot;</span>)<br>    &#125;()<br>    t.Log(<span class="hljs-string">&quot;Started&quot;</span>)<br>    <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;Fatal error&quot;</span>) <span class="hljs-comment">// defer仍会执行</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习09-函数&quot;&gt;&lt;a href=&quot;#Go语言学习09-函数&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习09-函数&quot;&gt;&lt;/a&gt;Go语言学习09-函数&lt;/h2&gt;&lt;h3 id=&quot;函数是一等公民&quot;&gt;&lt;a href=&quot;#函数是一等公民&quot; c</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习08-字符串</title>
    <link href="https://www.ckxgzxa.top/road2go08.html"/>
    <id>https://www.ckxgzxa.top/road2go08.html</id>
    <published>2022-11-08T13:14:58.000Z</published>
    <updated>2022-11-08T18:07:28.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习08-字符串"><a href="#Go语言学习08-字符串" class="headerlink" title="Go语言学习08-字符串"></a>Go语言学习08-字符串</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><font color="Blue">与其他主要编程语言的差异</font></p><ol><li>string 是数据类型, 不是引用或指针类型</li><li>string 是只读的 byte slice, len 函数可以返回它所包含的byte数</li><li>string 的byte数组可以存放任何数据</li></ol><h3 id="Unicode-UTF8"><a href="#Unicode-UTF8" class="headerlink" title="Unicode UTF8"></a>Unicode UTF8</h3><ol><li>Unicode 是一种字符集(code point)</li><li>UTF8 是 unicode 的存储实现(转换为字节序列的规则)</li></ol><h3 id="编码与存储"><a href="#编码与存储" class="headerlink" title="编码与存储"></a>编码与存储</h3><table><thead><tr><th align="center">字符</th><th align="center">“中”</th></tr></thead><tbody><tr><td align="center">Unicode</td><td align="center">0x4E2D</td></tr><tr><td align="center">UTF-8</td><td align="center">0xE4B8AD</td></tr><tr><td align="center">string/[]byte</td><td align="center">[0xE4, 0xB8, 0xAD]</td></tr></tbody></table><h3 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h3><ol><li>strings包(<a href="https://golang.org/pkg/strings">https://golang.org/pkg/strings</a>)</li><li>strconv包(<a href="https://golang.org/pkg/strconv">https://golang.org/pkg/strconv</a>)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习08-字符串&quot;&gt;&lt;a href=&quot;#Go语言学习08-字符串&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习08-字符串&quot;&gt;&lt;/a&gt;Go语言学习08-字符串&lt;/h2&gt;&lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习07-Map与工厂模式, 实现Set</title>
    <link href="https://www.ckxgzxa.top/road2go07.html"/>
    <id>https://www.ckxgzxa.top/road2go07.html</id>
    <published>2022-11-08T03:18:24.000Z</published>
    <updated>2022-11-08T13:35:39.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习07-Map与工厂模式-实现Set"><a href="#Go语言学习07-Map与工厂模式-实现Set" class="headerlink" title="Go语言学习07-Map与工厂模式, 实现Set"></a>Go语言学习07-Map与工厂模式, 实现Set</h2><h3 id="实现Set"><a href="#实现Set" class="headerlink" title="实现Set"></a>实现Set</h3><p><strong>Go 的内置集合中没有 Set 实现, 可以map[type]bool</strong></p><ol><li><p><strong>元素的唯一性</strong></p></li><li><p><strong>基本操作</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMapForSet</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>mySet := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>&#123;&#125;<br>mySet[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span><br>n := <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> mySet[n] &#123;<br>t.Logf(<span class="hljs-string">&quot;%d is existing&quot;</span>, n)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t.Logf(<span class="hljs-string">&quot;%d is not existing&quot;</span>, n)<br>&#125;<br>mySet[<span class="hljs-number">3</span>] = <span class="hljs-literal">true</span><br>t.Log(<span class="hljs-built_in">len</span>(mySet))<br><span class="hljs-built_in">delete</span>(mySet, <span class="hljs-number">1</span>)<br>n = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> mySet[n] &#123;<br>t.Logf(<span class="hljs-string">&quot;%d is existing&quot;</span>, n)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t.Logf(<span class="hljs-string">&quot;%d is not existing&quot;</span>, n)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>添加元素</li><li>判断元素是否存在</li><li>删除元素</li><li>元素个数</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习07-Map与工厂模式-实现Set&quot;&gt;&lt;a href=&quot;#Go语言学习07-Map与工厂模式-实现Set&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习07-Map与工厂模式, 实现Set&quot;&gt;&lt;/a&gt;Go语言学习07-Map与工厂模</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习06-Map声明、元素访问及遍历</title>
    <link href="https://www.ckxgzxa.top/road2go06.html"/>
    <id>https://www.ckxgzxa.top/road2go06.html</id>
    <published>2022-11-08T02:55:13.000Z</published>
    <updated>2022-11-08T03:18:17.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习06-Map声明、元素访问及遍历"><a href="#Go语言学习06-Map声明、元素访问及遍历" class="headerlink" title="Go语言学习06-Map声明、元素访问及遍历"></a>Go语言学习06-Map声明、元素访问及遍历</h2><h3 id="Map声明"><a href="#Map声明" class="headerlink" title="Map声明"></a>Map声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">m := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;one&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;two&quot;</span>:<span class="hljs-number">2</span>, <span class="hljs-string">&quot;three&quot;</span>:<span class="hljs-number">3</span>&#125;<br>m1 := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;&#125;<br>m1[<span class="hljs-string">&quot;one&quot;</span>] = <span class="hljs-number">1</span><br>m2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">10</span> <span class="hljs-comment">/*Initial Capacity*/</span>)<br></code></pre></td></tr></table></figure><h3 id="Map元素的访问"><a href="#Map元素的访问" class="headerlink" title="Map元素的访问"></a>Map元素的访问</h3><p><font color="Blue">与其他主要编程语言的差异</font></p><p>在访问的Key不存在时, 仍会返回零值, 不能通过返回nil来判断元素是否存在</p><h3 id="Map遍历"><a href="#Map遍历" class="headerlink" title="Map遍历"></a>Map遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">m := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;one&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;two&quot;</span>:<span class="hljs-number">2</span>, <span class="hljs-string">&quot;three&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;<br>    t.Log(k, v)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习06-Map声明、元素访问及遍历&quot;&gt;&lt;a href=&quot;#Go语言学习06-Map声明、元素访问及遍历&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习06-Map声明、元素访问及遍历&quot;&gt;&lt;/a&gt;Go语言学习06-Map声明、元素访问及</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习05-数组和切片</title>
    <link href="https://www.ckxgzxa.top/road2go05.html"/>
    <id>https://www.ckxgzxa.top/road2go05.html</id>
    <published>2022-11-07T17:32:53.000Z</published>
    <updated>2022-11-08T02:05:13.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习05-数组和切片"><a href="#Go语言学习05-数组和切片" class="headerlink" title="Go语言学习05-数组和切片"></a>Go语言学习05-数组和切片</h2><h3 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a [<span class="hljs-number">3</span>]<span class="hljs-type">int</span> <span class="hljs-comment">//声明并初始化为默认零值</span><br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br><br>b := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<span class="hljs-comment">// 声明同时初始化</span><br>c := [<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]<span class="hljs-type">int</span>&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;&#125;<span class="hljs-comment">// 多位数组初始化</span><br></code></pre></td></tr></table></figure><p><font color="Blue">与其他主要编程语言的差异</font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestTravelArray</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    a := [...]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<span class="hljs-comment">// 不指定元素个数</span><br>    <span class="hljs-keyword">for</span> idx<span class="hljs-comment">/*索引*/</span>, elem<span class="hljs-comment">/*元素*/</span> := <span class="hljs-keyword">range</span> a &#123;<br>        fmt.Println(idx, elem)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组截取"><a href="#数组截取" class="headerlink" title="数组截取"></a>数组截取</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">a[开始索引(包含)，结束索引(不包含)]<br><br>a := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span>&#125;<br>a[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>] <span class="hljs-comment">//2</span><br>a[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>] <span class="hljs-comment">//2,3</span><br>a[<span class="hljs-number">1</span>:<span class="hljs-built_in">len</span>(a)] <span class="hljs-comment">//2,3,4,5</span><br>a[<span class="hljs-number">1</span>:] <span class="hljs-comment">//2,3,4,5</span><br>a[:<span class="hljs-number">3</span>] <span class="hljs-comment">//1,2,3</span><br></code></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><h4 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h4><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211080205152.png"></p><h4 id="切片声明"><a href="#切片声明" class="headerlink" title="切片声明"></a>切片声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s0 []<span class="hljs-type">int</span><br>s0 = <span class="hljs-built_in">append</span>(s0，<span class="hljs-number">1</span>)<br><br>s := []<span class="hljs-type">int</span>&#123;&#125;<br><br>s1 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>&#125;<br><br>s2 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>，<span class="hljs-number">2</span>，<span class="hljs-number">4</span>)<br>   <span class="hljs-comment">/* []type, len, cap</span><br><span class="hljs-comment">   其中len个元素会被初始化为默认零值, 未初始化元素不可以访问</span><br><span class="hljs-comment">   */</span><br></code></pre></td></tr></table></figure><h4 id="切片共享存储结构"><a href="#切片共享存储结构" class="headerlink" title="切片共享存储结构"></a>切片共享存储结构</h4><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211080216477.png"></p><h3 id="数组-vs-切片"><a href="#数组-vs-切片" class="headerlink" title="数组 vs. 切片"></a>数组 vs. 切片</h3><ol><li>数组容量不可伸缩</li><li>相同维数, 相同长度的数组可以进行比较, 每一个元素都相同, 这两个数组会被认为相同</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习05-数组和切片&quot;&gt;&lt;a href=&quot;#Go语言学习05-数组和切片&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习05-数组和切片&quot;&gt;&lt;/a&gt;Go语言学习05-数组和切片&lt;/h2&gt;&lt;h3 id=&quot;数组的声明&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习04-条件与循环</title>
    <link href="https://www.ckxgzxa.top/road2go04.html"/>
    <id>https://www.ckxgzxa.top/road2go04.html</id>
    <published>2022-11-07T14:45:20.000Z</published>
    <updated>2022-11-07T17:32:43.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习04-条件与循环"><a href="#Go语言学习04-条件与循环" class="headerlink" title="Go语言学习04-条件与循环"></a>Go语言学习04-条件与循环</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><font color="Blue">与其他主要编程语言的差异</font></p><p>Go语言仅支持循环关键字 <code>for</code></p><p> <code>for j := 7; j &lt;= 9; j++</code></p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p><font color="green">while条件循环 </font></p><p><font color="green">while (n &lt; 5) </font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">n := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> n &lt; <span class="hljs-number">5</span> &#123;<br>    n++<br>    fmt.Println(n)<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="green">无限循环 </font></p><p><font color="green">while (true) </font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">n := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> n &lt; <span class="hljs-number">5</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if条件"><a href="#if条件" class="headerlink" title="if条件"></a>if条件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> condition &#123;<br>    <span class="hljs-comment">// code to be executed if condition is true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// code to be executed if condition is false</span><br>&#125;<br><br><span class="hljs-keyword">if</span> condition<span class="hljs-number">-1</span> &#123;<br>    <span class="hljs-comment">// code to be executed if condition-1 is true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> condition<span class="hljs-number">-2</span> &#123;<br>    <span class="hljs-comment">// code to be executed if condition-2 is true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// code to be executed if both condition1 and condition2 are false</span><br>&#125;<br></code></pre></td></tr></table></figure><p><font color="blue">与其他主要编程语言的差异</font></p><ol><li><p>condition 表达式结果必须为布尔值</p></li><li><p>支持变量赋值:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> <span class="hljs-keyword">var</span> declaration; condition &#123;<br>    <span class="hljs-comment">// code to be executed if conditon is true</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="switch条件"><a href="#switch条件" class="headerlink" title="switch条件"></a>switch条件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> os := runtime.GOOS; os &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;darwin&quot;</span>:<br>fmt.Println(<span class="hljs-string">&quot;OS X.&quot;</span>)<br><span class="hljs-comment">// break</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;linux&quot;</span>:<br>fmt.Println(<span class="hljs-string">&quot;Linux.&quot;</span>)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// freebsd, openbsd,</span><br><span class="hljs-comment">// plan9, windows...</span><br>fmt.Printf(<span class="hljs-string">&quot;%s.&quot;</span>, os)<br>&#125;<br><br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span> &lt;= Num &amp;&amp; Num &lt;= <span class="hljs-number">3</span>:<br>fmt.Printf(<span class="hljs-string">&quot;0-3&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span> &lt;= Num &amp;&amp; Num &lt;= <span class="hljs-number">6</span>:<br>fmt.Printf(<span class="hljs-string">&quot;4-6&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span> &gt;= Num &amp;&amp; Num &lt;= <span class="hljs-number">9</span>:<br>fmt.Printf(<span class="hljs-string">&quot;7-9&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="blue">与其他主要编程语言的差异</font></p><ol><li>条件表达式不限制为常量或者整数;</li><li>单个case中, 可以出现多个结果选项, 使用逗号分隔;</li><li>与C语言等规则相反, Go语言不需要用break来明确退出一个case;</li><li>可以不设定 switch 之后的条件表达式, 在此种情况下, 整个switch结构与多个if…else…的逻辑作用等同</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习04-条件与循环&quot;&gt;&lt;a href=&quot;#Go语言学习04-条件与循环&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习04-条件与循环&quot;&gt;&lt;/a&gt;Go语言学习04-条件与循环&lt;/h2&gt;&lt;h3 id=&quot;循环&quot;&gt;&lt;a href=&quot;#循环&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习03-数据类型、运算符</title>
    <link href="https://www.ckxgzxa.top/road2go03.html"/>
    <id>https://www.ckxgzxa.top/road2go03.html</id>
    <published>2022-11-07T13:30:41.000Z</published>
    <updated>2022-11-07T14:45:09.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习03-数据类型、运算符"><a href="#Go语言学习03-数据类型、运算符" class="headerlink" title="Go语言学习03-数据类型、运算符"></a>Go语言学习03-数据类型、运算符</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table>    <tr>        <td>bool</td>    </tr>    <tr>        <td>string</td>    </tr>    <tr>        <td>int int8 int16 int32 int64</td>    </tr>    <tr>        <td>uint uint8 uint16 uint32 uint64 uintptr</td>    </tr>    <tr>        <td>byte // alias for uint8</td>    </tr>    <tr>        <td>rune // alias for int32, represents a Unicode code point</td>    </tr>    <tr>        <td>float32 float64</td>    </tr>    <tr>        <td>complex32 complex64</td>    </tr></table><h3 id="类型的预定义值"><a href="#类型的预定义值" class="headerlink" title="类型的预定义值"></a>类型的预定义值</h3><ol><li>math.MaxInt64</li><li>math.MaxFloat64</li><li>math.MaxUint32</li></ol><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p>与其他主要编程语言的差异</p><ol><li>不支持指针运算</li><li>string 是值类型, 其默认的初始化值为空字符串, 而不是 nil</li></ol><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>相加</td><td>A + B 输出结果 30</td></tr><tr><td>-</td><td>相减</td><td>A - B 输出结果 -10</td></tr><tr><td>*</td><td>相乘</td><td>A * B 输出结果 200</td></tr><tr><td>/</td><td>相除</td><td>B / A 输出结果 2</td></tr><tr><td>%</td><td>求余</td><td>B % A 输出结果 0</td></tr><tr><td>++</td><td>自增</td><td>A ++ 输出结果 11</td></tr><tr><td>–</td><td>自减</td><td>A – 输出结果 9</td></tr></tbody></table><blockquote><p>Go 语言没有前置的 ++, –,  <del>(++a)</del></p></blockquote><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>检查两个值是否相等, 如果相等返回 True 否则返回 False</td><td>(A == B) 为 False</td></tr><tr><td>!=</td><td>检查两个值是否不相等, 如果不相等返回 True 否则返回 False</td><td>(A != B) 为 True</td></tr><tr><td>&gt;</td><td>检查左边值是否大于右边值, 如果是返回 True 否则返回 False</td><td>(A &gt; B) 为 False</td></tr><tr><td>&lt;</td><td>检查左边值是否小于右边值, 如果是返回 True 否则返回 False</td><td>(A &lt; B) 为 True</td></tr><tr><td>&gt;=</td><td>检查左边值是否大于等于右边值, 如果是返回 True 否则返回 False</td><td>(A &gt;= B) 为 False</td></tr><tr><td>&lt;=</td><td>检查左边值是否小于等于右边值, 如果是返回 True 否则返回 False</td><td>(A &lt;= B) 为True</td></tr></tbody></table><h5 id="用-比较数组"><a href="#用-比较数组" class="headerlink" title="用 == 比较数组"></a>用 == 比较数组</h5><ul><li>相同维数且含有相同个数元素的数组才可以比较</li><li>每个元素都相同的才相等</li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑 AND 运算符. 如果两边的操作数都是 True, 则条件 True, 否则为 False.</td><td>(A &amp;&amp; B) 为 False</td></tr><tr><td>||</td><td>逻辑 OR 运算符. 如果两边的操作数有一个 True, 则条件 True, 否则为 False.</td><td>(A || B) 为 True</td></tr><tr><td>!</td><td>逻辑 NOT 运算符. 如果条件为 True, 则逻辑 NOT 条件 False, 否则为 True.</td><td>!(A &amp;&amp; B) 为 True</td></tr></tbody></table><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符 “&amp;” 是双目运算符. 其功能是参与运算的两数各对应的二进位相与.</td><td>(A &amp; B)结果为 12, 二进制为 0000 1100</td></tr><tr><td>|</td><td>按位与运算符 “|” 是双目运算符. 其功能是参与运算的两数各对应的二进位相或.</td><td>(A | B) 结果为61, 二进制为 0011 1101</td></tr><tr><td>^</td><td>按位与运算符 “^” 是双目运算符. 其功能是参与运算的两数各对应的二进位相异或.</td><td>(A ^ B) 结果为49, 二进制为 0011 1101</td></tr><tr><td>&lt;&lt;</td><td>左移运算符 “&lt;&lt;” 是双目运算符. 左移 n 位就是乘以 2 的 n 次方. 其功能把 “&lt;&lt;” 左边的运算数的各二进位全部左移若干位, 由 “&lt;&lt;” 右边的数指定移动的位数, 高位丢弃, 低位补0</td><td>A &lt;&lt; 2 结果为 240, 二进制为 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移运算符 “&gt;&gt;” 是双目运算符. 右移 n 位就是除以 2 的 n 次方. 其功能是把 “&gt;&gt;” 左边的运算数的各二进位全部右移若干位, “&gt;&gt;” 右边的数指定移动的位数</td><td>A &gt;&gt; 2 结果为 0000 1111</td></tr></tbody></table><h5 id="与其他主要编程语言的差异"><a href="#与其他主要编程语言的差异" class="headerlink" title="与其他主要编程语言的差异"></a>与其他主要编程语言的差异</h5><p>&amp;^ 按位 置零</p><p>1 &amp;^ 0 – 1</p><p>1 &amp;^ 1 – 0</p><p>0 &amp;^ 1 – 0</p><p>0 &amp;^ 0 – 0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习03-数据类型、运算符&quot;&gt;&lt;a href=&quot;#Go语言学习03-数据类型、运算符&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习03-数据类型、运算符&quot;&gt;&lt;/a&gt;Go语言学习03-数据类型、运算符&lt;/h2&gt;&lt;h3 id=&quot;基本数据类</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习02-变量、常量以及与其他语言的差异</title>
    <link href="https://www.ckxgzxa.top/road2go02.html"/>
    <id>https://www.ckxgzxa.top/road2go02.html</id>
    <published>2022-11-07T13:05:05.000Z</published>
    <updated>2022-11-07T14:23:56.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习02-变量、常量以及与其他语言的差异"><a href="#Go语言学习02-变量、常量以及与其他语言的差异" class="headerlink" title="Go语言学习02-变量、常量以及与其他语言的差异"></a>Go语言学习02-变量、常量以及与其他语言的差异</h2><h3 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h3><ol><li>源码文件以 <code>_test</code> 结尾: xxx_test.go</li><li>测试方法名以 <code>Test</code> 开头: <code>func TestXXX(t *testing.T) &#123;...&#125;</code></li></ol><h3 id="快速设置连续值"><a href="#快速设置连续值" class="headerlink" title="快速设置连续值"></a>快速设置连续值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>Monday = <span class="hljs-literal">iota</span> + <span class="hljs-number">1</span><br>    Tuesday<br>    Wednesday<br>    Thursday<br>    Friday<br>    Saturday<br>    Sunday<br>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>Open = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-literal">iota</span><br>    Close<br>    Pending<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习02-变量、常量以及与其他语言的差异&quot;&gt;&lt;a href=&quot;#Go语言学习02-变量、常量以及与其他语言的差异&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习02-变量、常量以及与其他语言的差异&quot;&gt;&lt;/a&gt;Go语言学习02-变量、常量</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习01-编写第一个Go程序</title>
    <link href="https://www.ckxgzxa.top/road2go01.html"/>
    <id>https://www.ckxgzxa.top/road2go01.html</id>
    <published>2022-11-06T19:18:28.000Z</published>
    <updated>2022-11-07T13:30:02.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go语言学习01-编写第一个Go程序"><a href="#Go语言学习01-编写第一个Go程序" class="headerlink" title="Go语言学习01-编写第一个Go程序"></a>Go语言学习01-编写第一个Go程序</h1><h3 id="基本程序结构"><a href="#基本程序结构" class="headerlink" title="基本程序结构"></a>基本程序结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-comment">// 包, 表明代码所在的模块(包)</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-comment">// 引入代码依赖</span><br><span class="hljs-comment">// 功能实现</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="应用程序入口"><a href="#应用程序入口" class="headerlink" title="应用程序入口"></a>应用程序入口</h3><ol><li>必须是 main 包: <code>package main</code></li><li>必须是 main 方法: <code>func main()</code></li><li>文件名不一定是 <code>main.go</code></li></ol><h3 id="退出返回值"><a href="#退出返回值" class="headerlink" title="退出返回值"></a>退出返回值</h3><p><strong>与其他主要编程语言的差异</strong></p><ul><li><p>Go 中main 函数不支持任何返回值</p></li><li><p>通过 <code>os.Exit</code> 来返回状态</p></li><li><p>main 函数不支持传入参数</p><p>func main(<del>arg [] string</del>)</p></li><li><p>在程序中直接通过 <code>os.Args</code> 获取命令行参数</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Go语言学习01-编写第一个Go程序&quot;&gt;&lt;a href=&quot;#Go语言学习01-编写第一个Go程序&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习01-编写第一个Go程序&quot;&gt;&lt;/a&gt;Go语言学习01-编写第一个Go程序&lt;/h1&gt;&lt;h3 id=&quot;基</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>2023年中国石油招聘笔试03——EPI解题技巧</title>
    <link href="https://www.ckxgzxa.top/cnpc-recuit-03.html"/>
    <id>https://www.ckxgzxa.top/cnpc-recuit-03.html</id>
    <published>2022-09-26T15:29:33.000Z</published>
    <updated>2022-10-01T18:40:07.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧"><a href="#2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧" class="headerlink" title="2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧"></a>2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧</h1><h2 id="1-常识解决技巧"><a href="#1-常识解决技巧" class="headerlink" title="1. 常识解决技巧"></a>1. 常识解决技巧</h2><p>从知识的偏重性来说，常识判断部分的导向性非常清晰，即加强考生对国情、社情的了解程度。</p><p>此阶段备考重在平时，平时多了解一些国家大事和重大举措，例如两会、政府工作报道、国家主权、法律等知识，平时多留意、多观察、多思考。</p><h2 id="2-判断推理题解题技巧"><a href="#2-判断推理题解题技巧" class="headerlink" title="2. 判断推理题解题技巧"></a>2. 判断推理题解题技巧</h2><h3 id="2-1-图形推理"><a href="#2-1-图形推理" class="headerlink" title="2.1 图形推理"></a>2.1 图形推理</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209282005198.png"></p><h4 id="2-1-1-规律推理-数量类"><a href="#2-1-1-规律推理-数量类" class="headerlink" title="2.1.1 规律推理: 数量类"></a>2.1.1 规律推理: 数量类</h4><p>概要说明:数量指图形中包含某种元素的多少，如含有几条边、含有几种元素等。题目中的每个图形仅代表一个或几个数量。</p><p>识别方法:观察题干中的图形组成元紊是否凌乱，或者部分相同元紊数量上的变化是否明显。如果某道题目组成元素混乱，那么可以判别该题目为数量类规律推理。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209282024638.png"></p><ul><li><strong>数量型解题要点总结: 点  线  角  面  素</strong><ol><li>首先从整体数考虑, 识别”点线角面素”, 确定数量规律;</li><li>如果整体不行的话, 可以从部分(分位置或分样式)的角度确定数量, 得出规律.</li></ol></li></ul><blockquote><p><strong>元素组成不同, 且无明显属性规律, 考虑数量规律</strong></p><p>例题:</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209280318192.png"></p><p>观察图形可知, 第一个图形是分为2个区域, 第二个图形分为3个区域, 第三个图形分为4个区域…, 以此类推,可以判断第6个图形应该选择可以划分出7个区域的A图形,故选择A    <em>(面)</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209280340384.png"></p><p>黑块内部直角数量, B <em>(角)</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209280346454.png"></p><p>切点数量分类, ①④⑤/②③⑥, <em>(点)</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209291149293.png"></p><p>元素组成不同，无明显属性规律，考虑数量。分别数出曲线和直线数量可以得出选C  <em>（线）</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209291154913.png"></p><p>黑点 2 0 2 2<br>白点 1 2 3 5<br>可以得到规律后一项等于前两项之和，B <em>（素）</em></p></blockquote><h4 id="2-1-2-规律推理：样式类"><a href="#2-1-2-规律推理：样式类" class="headerlink" title="2.1.2 规律推理：样式类"></a>2.1.2 规律推理：样式类</h4><p>概要说明:样式是指图形的形状模样, 它表明了某个图形区别于其他图形的本质特征.</p><p>识别方法:观察题干中图形的组成元素是否相似, 相似也就是图形部分元素非实质性残缺. 如果某道题目组成的元素相似, 那么可以判别该题目为样式类规律推理.</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209282054071.png"></p><ul><li><strong>样式类解题要点总结: 先看样式遍历, 再看加减同异</strong><ol><li>首先观察是否属于样式遍历;</li><li>其次观察是否属于样式运算, 熟练掌握 ”加、减、同、异“四种情况；</li><li>最后再观察其他诸如周期、属性的变化规律</li></ol></li></ul><blockquote><p>例题：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209290049422.png"></p><p>对称性， 选D ， 轴对称、中心对称、中心对称/轴对称</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209290050371.png"></p><p>第一步，观察特征。组成元素相似，优先考虑样式类。第二步，九宫格，横向、纵向观察，没有明显规律，考虑“米”字型规律。题干对角线及十字位置的图形相加均得九宫格中心的图形，应用规律，B项符合。因此，选择B选项。</p></blockquote><h4 id="2-1-3-规律推理：位置类"><a href="#2-1-3-规律推理：位置类" class="headerlink" title="2.1.3 规律推理：位置类"></a>2.1.3 规律推理：位置类</h4><p>概要说明：位置是指图形本身变化的一个属性，就单个平面图形而言，其位置变化仅可能为平移、旋转和翻转。</p><p>识别方法：观察题干中图形的组成元素是否相同，且图形位置的变化是否明显。如果某道题目组成的元索相同，那么就可以判别该题目为位置类规律推理。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209290108994.png"></p><ul><li><strong>位置型解题要点总结：三种位置变化</strong>   平移     旋转     翻转</li></ul><h4 id="2-1-4-第四、五、六、七节：重构推理"><a href="#2-1-4-第四、五、六、七节：重构推理" class="headerlink" title="2.1.4 第四、五、六、七节：重构推理"></a>2.1.4 第四、五、六、七节：重构推理</h4><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209290238196.png"></p><ul><li><p><strong>空间构成型解题要点总结：一个面的特征+两个面的关系</strong></p><p>一个面的特征：寻找“特征面”</p><p>两个面的关系：“相对关系” 有一面</p><p>“相邻关系” 用排除</p></li><li><p><strong>平面组成型解题要点总结:种类不同数个数，种类相同看时针</strong></p></li><li><p><strong>平面拼合型解题要点总结：直线消去法</strong></p></li><li><p><strong>线条组合型解题要点总结：对比排除法</strong></p></li></ul><h3 id="2-2-逻辑判断"><a href="#2-2-逻辑判断" class="headerlink" title="2.2 逻辑判断"></a>2.2 逻辑判断</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202210012317974.png"></p><h4 id="2-2-1-形式推理-翻译推理"><a href="#2-2-1-形式推理-翻译推理" class="headerlink" title="2.2.1 形式推理: 翻译推理"></a>2.2.1 形式推理: 翻译推理</h4><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202210012345243.png"></p><ul><li><strong>翻译推理解题要点总结: 翻译 + 推理</strong><ol><li>翻译。就是指利用“三个关联翻译”和“三个判断翻译”将题目转化成逻辑语言。</li><li>推理。就是利用“肯定信息优先原则”，通过“三个等价”得到答案。</li></ol></li></ul><h4 id="2-2-2-形式推理：真假推理"><a href="#2-2-2-形式推理：真假推理" class="headerlink" title="2.2.2 形式推理：真假推理"></a>2.2.2 形式推理：真假推理</h4><p>概要说明：在题目中给出若干个前提，前提中有真有假，要求通过判断命题的真假情况，进而推理出指定的结论。</p><p>识别方法：题干中给出几个论断，但是几个论断中只有一个是真（假）的，要求由此得到一个肯定的结论。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202210020238675.png"></p><ul><li><strong>真假推理解题要点总结：先看矛盾，其次想反对，最后找包容</strong></li></ul><ol><li>首先看矛盾。一真其余全假，一假其余全真。</li><li>第二步：其次想反对。“有的”、“有的”必一真，“所有”、“所有”必一假。</li><li>第三步：最后找包容。一真前假，一假后真。</li></ol><h4 id="2-2-3-形式推理：分析推理"><a href="#2-2-3-形式推理：分析推理" class="headerlink" title="2.2.3 形式推理：分析推理"></a>2.2.3 形式推理：分析推理</h4><p>概要说明：在题目中给出若干人或事物，要求利用它们间的相互关系，对它们的烦序进行排列组合，实现一一对应。<br>识别方法：题目中给出多个肯定论断，交代相互间的关系，要求由此得到一个肯定的结论。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202210012358204.png"></p><ul><li><p><strong>分析推理解题要点总结：三个优先原则+四种典型方法</strong></p><p>三个优先原则：肯定信息优先、信息最大优先、特殊信息优先</p><p>四种典型方法：列表法、假设法、排除法、中途法</p></li></ul><h4 id="2-2-4-加强论证：假设加强"><a href="#2-2-4-加强论证：假设加强" class="headerlink" title="2.2.4 加强论证：假设加强"></a>2.2.4 加强论证：假设加强</h4><p>概要说明：假设是支持作者结论所隐含的前提，是前提与结论之间的连接，是推出结论所必要的条件。当否定这个假设的时候，论证将不能成立。</p><p>识别方法：其典型的问法有一一上文的说法基于以下哪一个假设？上述论证中假设了下列哪个前提？上文基于下列哪一个假设？如果上述断定为真，则必须假设一下哪项作为前提？</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202210020229787.png"></p><ul><li><p><strong>假设型加强解题总结：本质、有效方式、验证</strong></p><p>本质：寻找孤立信息，有效建立联系</p><p>有效方式：搭设桥梁    建立联系    肯定前提</p><p>验证：否定代入</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧&quot;&gt;&lt;a href=&quot;#2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧&quot; class=&quot;headerlink&quot; title=&quot;2023年中国石油校园招聘笔试03——EPI综合能力测试</summary>
      
    
    
    
    <category term="秋招" scheme="https://www.ckxgzxa.top/categories/%E7%A7%8B%E6%8B%9B/"/>
    
    
    <category term="中石油" scheme="https://www.ckxgzxa.top/tags/%E4%B8%AD%E7%9F%B3%E6%B2%B9/"/>
    
  </entry>
  
  <entry>
    <title>2023年中国石油招聘笔试02——考点归纳</title>
    <link href="https://www.ckxgzxa.top/cnpc-recuit-02.html"/>
    <id>https://www.ckxgzxa.top/cnpc-recuit-02.html</id>
    <published>2022-09-25T16:30:20.000Z</published>
    <updated>2022-09-30T03:28:07.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年中国石油校园招聘笔试02——考点归纳"><a href="#2023年中国石油校园招聘笔试02——考点归纳" class="headerlink" title="2023年中国石油校园招聘笔试02——考点归纳"></a>2023年中国石油校园招聘笔试02——考点归纳</h1><h2 id="1-中国石油笔试专业题考点"><a href="#1-中国石油笔试专业题考点" class="headerlink" title="1. 中国石油笔试专业题考点"></a>1. 中国石油笔试专业题考点</h2><p>一般涉及较少，请扫码关注公众号回复 “中石油专业题考点” ：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209262041045.png"></p><h2 id="2-中国石油笔试行测题考点"><a href="#2-中国石油笔试行测题考点" class="headerlink" title="2. 中国石油笔试行测题考点"></a>2. 中国石油笔试行测题考点</h2><ol><li><strong>常识题【考的少】：</strong> 包括历史常识、地理常识、文化常识、科技常识、生活常识等，设计范围广泛。考查知识广度</li><li><strong>推理【必考】：</strong> 根据给出的一组图形、数字、文字、一段话寻找规律，并据此找到另一组图形、数字、文字、一段话中类似关系。考查对图形的敏感性和推理能力</li><li><strong>数量关系【必考】：</strong> 一种类似于数列题，找出给出数列的规律，据此推断出下一个数字；另一种类似于应用题，根据给出条件计算结果。</li><li><strong>言语理解与表达【必考】：</strong> 言语理解与表达主要有四种类型的试题：<ul><li>词语替换，选词填空, 语句表达和阅读理解。近年出现语句表达和阅读理解居多;词语替换；从所给的四个选项中选一个填入句中划线部分，尽量使句子的意思保持不变；</li><li><strong>选词填空【必考】：</strong>从所给的四个词或四组词中选出一个或一组来填入句中的空格内，从而使句子的意思表达得最准确；</li><li><strong>语句表达【必考】：</strong> 从给出的几句话中选出没有或有歧义的一句或从给出的几句话中选出有或没有语病的一句；</li><li><strong>阅读理解【必考】：</strong> 形式较多，主要是对长句的意思进行准确的理解，即先给你一个复杂的长句，然后针对长句提出一个问题，提供四个选项，要求你根据长句的意思对这一问题作出正确的回答，选择出正确答案, 考查应试者对长句语意的理解和语言的组合、表达能力。</li></ul></li><li><strong>资料分析【必考】：</strong> 资料分析测验一般提供一组资料，这组资料可能是一个统计表，一个统计图，或者是一段文字的内容，考查包括三个部分:一是对某项工作或任务的进展或完成情况做出评价和判断，如对政策、计划执行情况的检查和监督: 二是对被研究现象的统计规律、现象之间的依存关系及依存程度的规律等加以揭示和阐述;三是对被研究现象的未来发展趋势及其变化特征进行预测或推断。考查应试者对各种资料(主要是统计资料，包括图表和文字资料)进行准确理解、转换与分析综合的能力。</li></ol><h2 id="3-中国石油笔试英语题考点"><a href="#3-中国石油笔试英语题考点" class="headerlink" title="3. 中国石油笔试英语题考点"></a>3. 中国石油笔试英语题考点</h2><p>一般都是考阅读理解题、语法题或者完型填空或改错，难度与托业考试或英语六级相当，多为金融英语。</p><p><strong>—-中石化发展历史、发展近况、企业文化、获奖情况等基本知识点</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年中国石油校园招聘笔试02——考点归纳&quot;&gt;&lt;a href=&quot;#2023年中国石油校园招聘笔试02——考点归纳&quot; class=&quot;headerlink&quot; title=&quot;2023年中国石油校园招聘笔试02——考点归纳&quot;&gt;&lt;/a&gt;2023年中国石油校园招聘笔试02</summary>
      
    
    
    
    <category term="秋招" scheme="https://www.ckxgzxa.top/categories/%E7%A7%8B%E6%8B%9B/"/>
    
    
    <category term="中石油" scheme="https://www.ckxgzxa.top/tags/%E4%B8%AD%E7%9F%B3%E6%B2%B9/"/>
    
  </entry>
  
  <entry>
    <title>2023年中国石油招聘笔试01——综述</title>
    <link href="https://www.ckxgzxa.top/cnpc-recuit-01.html"/>
    <id>https://www.ckxgzxa.top/cnpc-recuit-01.html</id>
    <published>2022-09-25T16:03:25.000Z</published>
    <updated>2022-09-30T03:27:47.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年中国石油校园招聘笔试01——综述"><a href="#2023年中国石油校园招聘笔试01——综述" class="headerlink" title="2023年中国石油校园招聘笔试01——综述"></a>2023年中国石油校园招聘笔试01——综述</h1><h2 id="1-中国石油招聘流程"><a href="#1-中国石油招聘流程" class="headerlink" title="1. 中国石油招聘流程"></a>1. 中国石油招聘流程</h2><p>一般分为如下四个环节：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209282132242.svg"></p><p>一般笔试在前， 面试在后，</p><p>大部分分公司考试类型为 <strong>综合能力测试</strong> 或者 <strong>综合能力测试 + 专业题</strong> 的形式，少数分公司考试题型为 <strong>英语测试+综合测试+性格测试</strong>。 面试一般分为初面、专业面等几个环节。。。</p><h2 id="2-中国石油招聘笔试考什么？"><a href="#2-中国石油招聘笔试考什么？" class="headerlink" title="2. 中国石油招聘笔试考什么？"></a>2. 中国石油招聘笔试考什么？</h2><p>大部分中国石油为 <strong>EPI 综合能力测试</strong> 的形式， 有的分公司还会考查英语知识，写作能力等。</p><p>EPI 综合能力测试也就是 <strong>行测题测试</strong> .</p><h2 id="3-中国石油招聘笔试考试时长"><a href="#3-中国石油招聘笔试考试时长" class="headerlink" title="3. 中国石油招聘笔试考试时长"></a>3. 中国石油招聘笔试考试时长</h2><p>据绝大部分考过的考生反馈, 时间很紧张, 根本不够用, 尤其是没搞过行测专业训练的考生.</p><h2 id="4-应对笔试整体方案-关键在于准度、速度、技巧"><a href="#4-应对笔试整体方案-关键在于准度、速度、技巧" class="headerlink" title="4. 应对笔试整体方案: 关键在于准度、速度、技巧"></a>4. 应对笔试整体方案: 关键在于准度、速度、技巧</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年中国石油校园招聘笔试01——综述&quot;&gt;&lt;a href=&quot;#2023年中国石油校园招聘笔试01——综述&quot; class=&quot;headerlink&quot; title=&quot;2023年中国石油校园招聘笔试01——综述&quot;&gt;&lt;/a&gt;2023年中国石油校园招聘笔试01——综述&lt;/</summary>
      
    
    
    
    <category term="秋招" scheme="https://www.ckxgzxa.top/categories/%E7%A7%8B%E6%8B%9B/"/>
    
    
    <category term="中石油" scheme="https://www.ckxgzxa.top/tags/%E4%B8%AD%E7%9F%B3%E6%B2%B9/"/>
    
  </entry>
  
  <entry>
    <title>对KMP算法的一些认识</title>
    <link href="https://www.ckxgzxa.top/KMP.html"/>
    <id>https://www.ckxgzxa.top/KMP.html</id>
    <published>2022-08-26T06:54:39.000Z</published>
    <updated>2022-08-26T06:56:21.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;KMP算法&quot;&gt;&lt;a href=&quot;#KMP算法&quot; class=&quot;headerlink&quot; title=&quot;KMP算法&quot;&gt;&lt;/a&gt;KMP算法&lt;/h1&gt;</summary>
      
    
    
    
    <category term="校招" scheme="https://www.ckxgzxa.top/categories/%E6%A0%A1%E6%8B%9B/"/>
    
    <category term="算法" scheme="https://www.ckxgzxa.top/categories/%E6%A0%A1%E6%8B%9B/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>从零搭建ELK日志分析系统</title>
    <link href="https://www.ckxgzxa.top/ELKLogConstruction.html"/>
    <id>https://www.ckxgzxa.top/ELKLogConstruction.html</id>
    <published>2022-08-19T05:29:58.000Z</published>
    <updated>2022-08-19T15:42:06.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从零搭建ELK-filebeat-日志分析系统-以Windows为例"><a href="#从零搭建ELK-filebeat-日志分析系统-以Windows为例" class="headerlink" title="从零搭建ELK + filebeat 日志分析系统(以Windows为例)"></a>从零搭建ELK + filebeat 日志分析系统(以Windows为例)</h1><h2 id="1-什么是ELK"><a href="#1-什么是ELK" class="headerlink" title="1. 什么是ELK?"></a>1. 什么是ELK?</h2><p>ELK 是elastic公司提供的一套完整的日志收集以及展示的解决方案，是三个产品的首字母缩写，分别是 ElasticSearch、Logstash 和 Kibana。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191354749.png"></p><h2 id="2-filebeat"><a href="#2-filebeat" class="headerlink" title="2. filebeat"></a>2. filebeat</h2><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191357605.png" alt="Filebeat工作流程图"></p><p>​        Filebeat是用于转发和集中日志数据的轻量级传送工具。Filebeat监视您指定的日志文件或位置，收集日志事件，并将它们转发到Elasticsearch或 Logstash进行索引。</p><p>　　Filebeat的工作方式如下：启动Filebeat时，它将启动一个或多个输入，这些输入将在为日志数据指定的位置中查找。对于Filebeat所找到的每个日志，Filebeat都会启动收集器。每个收集器都读取单个日志以获取新内容，并将新日志数据发送到libbeat，libbeat将聚集事件，并将聚集的数据发送到为Filebeat配置的输出。</p><h2 id="3-安装ElasticSearch"><a href="#3-安装ElasticSearch" class="headerlink" title="3. 安装ElasticSearch"></a>3. 安装ElasticSearch</h2><h3 id="3-1-ES-单节点搭建"><a href="#3-1-ES-单节点搭建" class="headerlink" title="3.1 ES 单节点搭建"></a>3.1 ES 单节点搭建</h3><ol><li><p>首先在官网下载Windows版本的<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0">Elasticsearch压缩包</a>, 在任意处解压。</p><p>解压后文件结构如下：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191840111.png"></p></li><li><p>启动方式：</p><p>进入bin文件目录，在此处打开终端窗口，运行 <code>elasticsearch.bat</code>文件即可</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191844657.png"></p><p>待命令行窗口显示<code>started</code>即为启动成功.</p></li><li><p>此时可以在浏览器访问<a href="http://localhost:9200/">http://localhost:9200</a>, 可以看到浏览器返回如下信息</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191847965.png"></p></li></ol><h3 id="3-2-ES-集群搭建"><a href="#3-2-ES-集群搭建" class="headerlink" title="3.2 ES 集群搭建"></a>3.2 ES 集群搭建</h3><ol><li><p>创建<code>elasticsearch-cluster</code> 文件夹, 将ES安装包解压出的内容物复制三份分别命名如下：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191852452.png"></p></li><li><p>配置各节点的配置文件(各节点config文件夹下的<code>elasticsearch.yml</code>文件)</p><p>节点1配置文件配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 节点1的配置信息:</span><br><span class="hljs-comment"># 集群名称, 节点之间要保持一致</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-elasticsearch</span><br><span class="hljs-comment">#节点名称, 集群唯一</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># ip地址</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-string">localhost</span><br><span class="hljs-comment"># http端口</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9201</span><br><span class="hljs-comment"># tcp监听端口</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9301</span><br><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;localhost:9301&quot;</span>, <span class="hljs-string">&quot;localhost:9302&quot;</span>,<span class="hljs-string">&quot;localhost:9303&quot;</span>]<br><span class="hljs-attr">discovery.zen.fd.ping_timeout:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">discovery.zen.fd.ping_retries:</span> <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 集群内可被选为主节点的节点列表</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>, <span class="hljs-string">&quot;node-2&quot;</span>, <span class="hljs-string">&quot;node-3&quot;</span>]<br><br><span class="hljs-comment"># 跨域配置</span><br><span class="hljs-comment"># action.destructive_requires_name: true</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>节点2配置文件配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 节点 2 的配置信息：</span><br><span class="hljs-comment"># 集群名称，节点之间要保持一致</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-elasticsearch</span><br><span class="hljs-comment"># 节点名称，集群内唯一</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-2</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#ip 地址</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-string">localhost</span><br><span class="hljs-comment"># http端口</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9202</span><br><span class="hljs-comment">#tcp监听端口</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9302</span><br><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;localhost:9301&quot;</span>]<br><span class="hljs-attr">discovery.zen.fd.ping_timeout:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">discovery.zen.fd.ping_retries:</span> <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 集群内可被选为主节点的节点列表</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>, <span class="hljs-string">&quot;node-2&quot;</span>, <span class="hljs-string">&quot;node-3&quot;</span>]<br><br><span class="hljs-comment"># 跨域配置</span><br><span class="hljs-comment"># action.destructive_requires_name: true</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><p>节点3配置文件配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 节点 3 的配置信息：</span><br><span class="hljs-comment"># 集群名称，节点之间要保持一致</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-elasticsearch</span><br><span class="hljs-comment"># 节点名称，集群内要唯一</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-3</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#ip 地址</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-string">localhost</span><br><span class="hljs-comment"># http端口</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9203</span><br><span class="hljs-comment">#tcp监听端口</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9303</span><br><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;localhost:9301&quot;</span>, <span class="hljs-string">&quot;localhost:9302&quot;</span>]<br><span class="hljs-attr">discovery.zen.fd.ping_timeout:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">discovery.zen.fd.ping_retries:</span> <span class="hljs-number">5</span><br><br><span class="hljs-comment"># 集群内可被选为主节点的节点列表</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>, <span class="hljs-string">&quot;node-2&quot;</span>, <span class="hljs-string">&quot;node-3&quot;</span>]<br><br><span class="hljs-comment"># 跨域配置</span><br><span class="hljs-comment"># action.destructive_requires_name: true</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>修改好各节点的配置文件之后, 依次启动各节点即可成功创建ES集群</p></li><li><p><a href="https://chrome.google.com/webstore/detail/multi-elasticsearch-head/cpmmilfkofbeimbmgiclohpodggeheim">Multi Elasticsearch Head</a> 插件的安装</p><p>我们可以在如下链接下载此浏览器插件进行安装,浏览器插件安装方式请自行搜索有关资料</p><ul><li>Chrome应用商店直接安装<a href="https://chrome.google.com/webstore/detail/multi-elasticsearch-head/cpmmilfkofbeimbmgiclohpodggeheim">https://chrome.google.com/webstore/detail/multi-elasticsearch-head/cpmmilfkofbeimbmgiclohpodggeheim</a></li><li>Github仓库<a href="https://github.com/Mu-L/multi-elasticsearch-head-chrome">https://github.com/Mu-L/multi-elasticsearch-head-chrome</a></li></ul><p>安装插件完成之后我们可以点击插件,进入监控 Elasticsearch 状态界面,</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191905241.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191906392.png"></p><p>在此页面我们可以方便地对ES集群进行管理，可以查看到索引所有节点各个分片的健康度等信息，并且能够对索引进行增删改查操作</p></li></ol><h2 id="4-Kibana的安装及启动"><a href="#4-Kibana的安装及启动" class="headerlink" title="4. Kibana的安装及启动"></a>4. Kibana的安装及启动</h2><ol><li><p>在官网下载<a href="https://www.elastic.co/cn/downloads/past-releases/kibana-7-8-0">Kibana安装压缩包</a>, 并解压</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191918424.png"></p><ol start="2"><li><p>进入bin目录，双击<code>kibana.bat</code>即可启动成功</p><p>访问<a href="http://localhost:5601/">http://localhost:5601</a>, 查看kibana页面：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191920483.png"></p><blockquote><p>页面修改为中文需要在 <code>config/kibana.yml</code>中添加 <code>i18n.locale: &quot;zh-CN&quot;</code> 配置</p></blockquote></li></ol><h2 id="5-Logstash-的安装与配置"><a href="#5-Logstash-的安装与配置" class="headerlink" title="5. Logstash 的安装与配置"></a>5. Logstash 的安装与配置</h2><ol><li><p>首先从官网下载<a href="https://www.elastic.co/cn/downloads/past-releases/logstash-7-8-0">Logstash的zip压缩包</a>, 随后解压:</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208191928354.png" alt="image-20220819192802301"></p></li><li><p>修改<code>config/logstash.conf</code> 文件如下, 为修改elasticsearch:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Sample Logstash configuration for creating a simple</span><br><span class="hljs-comment"># Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br> <br><span class="hljs-attr">input</span> <span class="hljs-string">&#123;</span><br>  <span class="hljs-attr">beats</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">port</span> =<span class="hljs-string">&gt; 5044</span><br>  <span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br> <br><span class="hljs-attr">filter</span> <span class="hljs-string">&#123;</span><br>    <span class="hljs-attr">grok</span> <span class="hljs-string">&#123;</span><br>        <span class="hljs-attr">match</span> =<span class="hljs-string">&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;NGINXACCESS&#125;&quot; &#125;</span><br><br>    <span class="hljs-attr">&#125;</span><br>    <span class="hljs-attr">geoip</span> <span class="hljs-string">&#123;</span><br>      <span class="hljs-attr">source</span> =<span class="hljs-string">&gt; &quot;http_x_forwarded_for&quot;</span><br>      <span class="hljs-attr">target</span> =<span class="hljs-string">&gt; &quot;geoip&quot;</span><br>      <span class="hljs-attr">database</span> =<span class="hljs-string">&gt; &quot;C:\Software\nginx-1.22.0\GeoLiteCity.dat&quot;</span><br>      <span class="hljs-attr">add_field</span> =<span class="hljs-string">&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][longitude]&#125;&quot; ]</span><br>      <span class="hljs-attr">add_field</span> =<span class="hljs-string">&gt; [ &quot;[geoip][coordinates]&quot;, &quot;%&#123;[geoip][latitude]&#125;&quot; ]</span><br>    <span class="hljs-attr">&#125;</span><br><br>    <span class="hljs-attr">mutate</span> <span class="hljs-string">&#123;</span><br>      <span class="hljs-attr">convert</span> =<span class="hljs-string">&gt; [ &quot;[geoip][coordinates]&quot;, &quot;float&quot; ]</span><br>      <span class="hljs-attr">convert</span> =<span class="hljs-string">&gt; [ &quot;response&quot;,&quot;integer&quot; ]</span><br>      <span class="hljs-attr">convert</span> =<span class="hljs-string">&gt; [ &quot;bytes&quot;,&quot;integer&quot; ]</span><br>      <span class="hljs-attr">replace</span> =<span class="hljs-string">&gt; &#123; &quot;type&quot; =&gt; &quot;nginx_access&quot; &#125;</span><br>      <span class="hljs-attr">remove_field</span> =<span class="hljs-string">&gt; &quot;message&quot;</span><br>    <span class="hljs-attr">&#125;</span><br><br>    <span class="hljs-attr">date</span> <span class="hljs-string">&#123;</span><br>      <span class="hljs-attr">match</span> =<span class="hljs-string">&gt; [ &quot;timestamp&quot;,&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;]</span><br><br>    <span class="hljs-attr">&#125;</span><br>    <span class="hljs-attr">mutate</span> <span class="hljs-string">&#123;</span><br>      <span class="hljs-attr">remove_field</span> =<span class="hljs-string">&gt; &quot;timestamp&quot;</span><br><br>    <span class="hljs-attr">&#125;</span><br><br><br><span class="hljs-attr">&#125;</span><br> <br> <br><span class="hljs-attr">output</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">elasticsearch</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">hosts</span> =<span class="hljs-string">&gt;  [&quot;http://localhost:9201&quot;]</span><br><span class="hljs-attr">&#125;</span><br> <br> <br><span class="hljs-attr">stdout</span> <span class="hljs-string">&#123;</span><br><span class="hljs-attr">codec</span> =<span class="hljs-string">&gt; rubydebug</span><br><span class="hljs-attr">&#125;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>启动命令<code>.\bin\logstash.bat -f &lt;配置文件路径(config/logstash.conf)&gt;</code> </p></li></ol></li></ol><h2 id="6-Filebeat-的安装与配置"><a href="#6-Filebeat-的安装与配置" class="headerlink" title="6. Filebeat 的安装与配置"></a>6. Filebeat 的安装与配置</h2><ol><li><p>从官网下载<a href="https://www.elastic.co/cn/downloads/past-releases/filebeat-7-8-0">Filebeat压缩包</a>, 并解压缩<br><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208192136902.png"></p></li><li><p>随后以采集nginx产生的日志为例:</p><p>配置<code>filebeat.yml</code>:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">output.logstash:</span><br>  <span class="hljs-comment"># The Logstash hosts</span><br>  <span class="hljs-attr">hosts:</span> [<span class="hljs-string">&quot;localhost:5044&quot;</span>]<br></code></pre></td></tr></table></figure><p>运行<code>.\filebeat.exe modules enable nginx</code>,随后更改<code>modules.d\nginx.yml</code>设置nginx日志的输出路径.</p><p>随后使用<code>.\filebeat.exe -e</code>运行filebeat即可</p><p>也或可将filebeat注册到Windows服务启动</p></li></ol><h2 id="7-启动整个日志系统"><a href="#7-启动整个日志系统" class="headerlink" title="7. 启动整个日志系统"></a>7. 启动整个日志系统</h2><p>按顺序(ES(集群)=&gt;logstash=&gt;filebeat=&gt;kibana)依次启动各项服务,随后启动nginx服务,并产生部分日志:</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208192205968.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208192322272.png"></p><p>随后回到kibana界面, 使用logstash-* 新建索引模式</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208192209991.png"></p><p>随后就可看见kibana收集来的nginx日志</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208192322492.png"></p><p>更多使用方法可以查阅<a href="https://www.elastic.co/guide/en/elastic-stack/7.8/index.html">Kibana官网文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从零搭建ELK-filebeat-日志分析系统-以Windows为例&quot;&gt;&lt;a href=&quot;#从零搭建ELK-filebeat-日志分析系统-以Windows为例&quot; class=&quot;headerlink&quot; title=&quot;从零搭建ELK + filebeat 日志分析系</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>0718 Excel表格</title>
    <link href="https://www.ckxgzxa.top/icbcinternship05.html"/>
    <id>https://www.ckxgzxa.top/icbcinternship05.html</id>
    <published>2022-08-08T20:33:27.000Z</published>
    <updated>2022-08-09T15:57:25.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10个Excel中的小问题"><a href="#10个Excel中的小问题" class="headerlink" title="10个Excel中的小问题"></a>10个Excel中的小问题</h1><h2 id="1-为什么丢数据"><a href="#1-为什么丢数据" class="headerlink" title="1. 为什么丢数据"></a>1. 为什么丢数据</h2><table>    <caption>Excel 文件最大存储容量</caption>    <tr>        <td>文件扩展名</td>        <td>.xls</td>        <td>.xlsx</td>    </tr>    <tr>        <td>行R</td>        <td>65536</td>        <td>1048576</td>    </tr>    <tr>        <td>列C</td>        <td>256</td>        <td>16384</td>    </tr>    <tr>        <td>版本</td>        <td>2003以前</td>        <td>2007以后</td>    </tr></table><h2 id="2-大表格如何固定表头"><a href="#2-大表格如何固定表头" class="headerlink" title="2. 大表格如何固定表头"></a>2. 大表格如何固定表头</h2><ul><li><p><strong>查阅</strong>固定表头</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090455764.png"></p></li><li><p>选中</p><p><kbd>Ctrl</kbd> + <kbd>A</kbd> : 选中内容部分任意单元格后，按组合键，全选内容部分</p><p><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>↑↓←→</kbd>   : 按组合键, 可逐步选择内容</p></li></ul><h2 id="3-快速分离数据"><a href="#3-快速分离数据" class="headerlink" title="3. 快速分离数据"></a>3. 快速分离数据</h2><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090459982.png"></p><ul><li>分列</li></ul><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090500978.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090500747.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090501112.png" alt="image-20220809050122059"></p><h2 id="4-编码中的0怎么不见了"><a href="#4-编码中的0怎么不见了" class="headerlink" title="4. 编码中的0怎么不见了"></a>4. 编码中的0怎么不见了</h2><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090503824.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090503944.png"></p><blockquote><p>知识补充：</p><ul><li><p>单元格默认格式是“常规”，如果输入的数值前面带“0”，系统会自动忽略。</p></li><li><p>文本格式的单元格一般显示为左对齐，左上角有个绿色的小三角形。</p></li><li><p>数值格式一般右对齐。</p></li><li><p>快速输入文本的方法是，首先输入一个英文(半角）状态下的单引号，再输入数字。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090505681.png"></p></li></ul></blockquote><h2 id="5-身份证号码这是怎么了"><a href="#5-身份证号码这是怎么了" class="headerlink" title="5. 身份证号码这是怎么了"></a>5. 身份证号码这是怎么了</h2><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090507125.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090508412.png"></p><blockquote><p>知识补充：</p><ul><li>Excel中默认数值显示11位，如果超过11位，则用科学计数法显示。</li><li>Excel中默认数值如果超过15位，15位后的非0自动变成0，且不可逆转。</li><li>计算字符串长度的公式是: =LEN(需要计算的单元格)</li></ul></blockquote><h2 id="6-数字为什么不能计算"><a href="#6-数字为什么不能计算" class="headerlink" title="6. 数字为什么不能计算"></a>6. 数字为什么不能计算</h2><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090510998.png"></p><p>文本转数据的三种方法：</p><h3 id="1-直接修改"><a href="#1-直接修改" class="headerlink" title="1. 直接修改"></a>1. 直接修改</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090512098.png"></p><h3 id="2-选择性粘贴"><a href="#2-选择性粘贴" class="headerlink" title="2. 选择性粘贴"></a>2. 选择性粘贴</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090516939.png"></p><h3 id="3-分列"><a href="#3-分列" class="headerlink" title="3. 分列"></a>3. 分列</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202208090517260.png"></p><h2 id="7-快速正确输入性别、单位等"><a href="#7-快速正确输入性别、单位等" class="headerlink" title="7. 快速正确输入性别、单位等"></a>7. 快速正确输入性别、单位等</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;10个Excel中的小问题&quot;&gt;&lt;a href=&quot;#10个Excel中的小问题&quot; class=&quot;headerlink&quot; title=&quot;10个Excel中的小问题&quot;&gt;&lt;/a&gt;10个Excel中的小问题&lt;/h1&gt;&lt;h2 id=&quot;1-为什么丢数据&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="2022新疆工行星令营" scheme="https://www.ckxgzxa.top/categories/2022%E6%96%B0%E7%96%86%E5%B7%A5%E8%A1%8C%E6%98%9F%E4%BB%A4%E8%90%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>0714 可视化思维与表达</title>
    <link href="https://www.ckxgzxa.top/icbcinternship04.html"/>
    <id>https://www.ckxgzxa.top/icbcinternship04.html</id>
    <published>2022-07-15T04:10:18.000Z</published>
    <updated>2022-07-15T18:08:45.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0714-可视化思维与表达"><a href="#0714-可视化思维与表达" class="headerlink" title="0714 可视化思维与表达"></a>0714 可视化思维与表达</h1><h2 id="1-可视化思维缘起"><a href="#1-可视化思维缘起" class="headerlink" title="1. 可视化思维缘起"></a>1. 可视化思维缘起</h2><blockquote><p>思维可视化：是指运用一系列图示技术把本来不可视的思维(思考方法和思考路径)呈现出来，使其清晰可见的过。被可视化的”思维”更有利于理解和记忆，因此可以有效提高信息加工及信息传递的效能。</p></blockquote><p>由巴普洛夫实验等相关的实验表明：</p><ul><li><p>学习的宏观本质：<strong>建立联系</strong></p></li><li><p>学习的微观本质：<strong>赫布定律</strong></p></li></ul><p>可视化思维：</p><ol><li>知识数量是基础，联结是关键；</li><li>内存有限，需要提供辅助；</li><li>广泛的联结需要更丰富的刺激；</li><li>可以通过练习达成稳定的联结。</li></ol><h2 id="2-可视化工具介绍"><a href="#2-可视化工具介绍" class="headerlink" title="2. 可视化工具介绍"></a>2. 可视化工具介绍</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p>传统笔记缺点：</p><ol><li><strong>关键性信息少</strong>，不超过全部信息的20%;</li><li>笔记的修改整理让人头痛，内容<strong>存在重复</strong>;</li><li>难以看出材料中的内在<strong>逻辑关系</strong>;</li><li>单一的文字信息，让大脑<strong>昏昏欲睡</strong>;</li><li>阅读资料<strong>被动式接受</strong>，信息传递单向性，缺乏互动和创造;</li><li>传统的笔记记录方式容易有疏漏造成<strong>记忆断层</strong>。</li></ol><p>思维导图的原则：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207160206835.png"></p><h2 id="3-可视化表达应用"><a href="#3-可视化表达应用" class="headerlink" title="3. 可视化表达应用"></a>3. 可视化表达应用</h2><h3 id="3-1-提升自我"><a href="#3-1-提升自我" class="headerlink" title="3.1 提升自我"></a>3.1 提升自我</h3><h3 id="3-2-分析问题"><a href="#3-2-分析问题" class="headerlink" title="3.2 分析问题"></a>3.2 分析问题</h3><h3 id="3-3-改善团队"><a href="#3-3-改善团队" class="headerlink" title="3.3 改善团队"></a>3.3 改善团队</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0714-可视化思维与表达&quot;&gt;&lt;a href=&quot;#0714-可视化思维与表达&quot; class=&quot;headerlink&quot; title=&quot;0714 可视化思维与表达&quot;&gt;&lt;/a&gt;0714 可视化思维与表达&lt;/h1&gt;&lt;h2 id=&quot;1-可视化思维缘起&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="2022新疆工行星令营" scheme="https://www.ckxgzxa.top/categories/2022%E6%96%B0%E7%96%86%E5%B7%A5%E8%A1%8C%E6%98%9F%E4%BB%A4%E8%90%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>0712 结构性思维笔记</title>
    <link href="https://www.ckxgzxa.top/icbcinternship03.html"/>
    <id>https://www.ckxgzxa.top/icbcinternship03.html</id>
    <published>2022-07-14T14:37:23.000Z</published>
    <updated>2022-07-15T04:09:49.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0712-结构性思维笔记"><a href="#0712-结构性思维笔记" class="headerlink" title="0712 结构性思维笔记"></a>0712 结构性思维笔记</h1><blockquote><p>结构的定义：组成整体的各部分的搭配和安排</p><p>作用：</p><ul><li>在建筑中，决定形状建立连接</li><li>在影片中，不可见，确保故事精彩</li><li>在企业中，建立管理体系，决定组织效率</li></ul></blockquote><h2 id="1-构建结构性思维"><a href="#1-构建结构性思维" class="headerlink" title="1. 构建结构性思维"></a>1. 构建结构性思维</h2><h3 id="1-1-结构性思维的四个特点"><a href="#1-1-结构性思维的四个特点" class="headerlink" title="1.1 结构性思维的四个特点"></a>1.1 结构性思维的四个特点</h3><ul><li>结构先行</li><li>上下对应</li><li>分类清楚</li><li>排序逻辑</li></ul><h3 id="1-2-结构性思维接收信息"><a href="#1-2-结构性思维接收信息" class="headerlink" title="1.2 结构性思维接收信息"></a>1.2 结构性思维接收信息</h3><ol><li><strong>识别</strong>：识别信息中的事实与个人观点或判断</li><li><strong>对应</strong>：找到事实与观点之间的对应关系</li><li><strong>结构</strong>：画出结构性关系图</li><li><strong>表达</strong>：用语言表达信息的主要含义</li></ol><h2 id="2-纵向结构"><a href="#2-纵向结构" class="headerlink" title="2. 纵向结构"></a>2. 纵向结构</h2><h3 id="2-1-从上到下提问回答"><a href="#2-1-从上到下提问回答" class="headerlink" title="2.1 从上到下提问回答"></a>2.1 从上到下提问回答</h3><ol><li>步骤一、设定场景</li><li>步骤二、确定主题</li><li>步骤三、设想问题</li><li>步骤四、回答问题</li></ol><h3 id="2-2-从下到上概括总结"><a href="#2-2-从下到上概括总结" class="headerlink" title="2.2 从下到上概括总结"></a>2.2 从下到上概括总结</h3><blockquote><ol><li>文章的标题句就是主题句；</li><li>PPT的标题句就是主题句；</li><li>自然段的段首句就是主题句。</li></ol></blockquote><h3 id="3-横向结构"><a href="#3-横向结构" class="headerlink" title="3. 横向结构"></a>3. 横向结构</h3><h4 id="3-1-演绎论证"><a href="#3-1-演绎论证" class="headerlink" title="3.1 演绎论证"></a>3.1 演绎论证</h4><blockquote><p>从普遍性的理论知识出发认识个别、特殊的现象的一种论证推理方法、</p></blockquote><p>演绎论证的两种结构：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207150135950.png"></p><h4 id="3-2-归纳论证"><a href="#3-2-归纳论证" class="headerlink" title="3.2 归纳论证"></a>3.2 归纳论证</h4><blockquote><p>从许多个别的事务中概括出性概念、原则或结论的推理方法。</p></blockquote><p>三种排序：时间顺序、结构顺序、重要性顺序</p><p>分类的标准：<strong>MECE</strong>原则</p><blockquote><p>Mutually Exclusive &amp; Collectively Exhaustive</p><p>相互独立 完全穷尽 | 不重不漏</p><p>互不交叉 应有尽有 | 分清分尽</p></blockquote><h3 id="4-序言结构"><a href="#4-序言结构" class="headerlink" title="4. 序言结构"></a>4. 序言结构</h3><table>    <caption>序言的四要素</caption>    <tr>        <td style="background-color:red">S(情景)</td>        <td>发展和科技的进步，人群结构中的“老龄化”已经呈现明显的趋势</td>    </tr>    <tr>        <td style="background-color:red">C(冲突)</td>        <td>然而记者在调查中发现，虽然老年人越来越多，然而他们在服装购买方面却存在着各种各样的困难，在商场中很难找到老年人专柜，老年人也没有自己的“名牌”</td>    </tr>      <tr>        <td style="background-color:red">Q(疑问)</td>        <td>如何满足老年人的服装购买需要</td>    </tr>    <tr>        <td style="background-color:red">A(回答)</td>        <td>这一问题引起了嗅觉敏捷的商家开始经营老年人的服装，并初见成效</td>    </tr>    </table><p>序言标准结构及变化</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202207150147153.png"></p><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5 小结"></a>5 小结</h3><p>第一部分:构建结构性思维，共学习了两个四。第一个，结构性思维的四大基本特点:结论先行、上下对应、分类清楚、排序逻辑。第二个，结构性思维接收信息的四大步骤:<br>第一识别，识别信息中的事实和观点;第二对应，找出事实与观点的对应关系;第三结构，画出结构图;<br>第四表达,表达成一句话，“在序的基础上，从ABC三个方面说明了G”</p><p>第二部分:纵向结构。纵向结构是两个方向:从上到下和从下到上。<br>从上到下是提问回答，从下到上是概括总结。<br>那从上到下的提问回答又做了两个延展，问到多深?公理定理和已知条件;问到多宽?重点是保证主题中所有的关键词都被提问到。<br>从下到上的概括总结基本要求是严格的上下对应，相当于数学题的等号，在商务文体写作中做到有内容的主题句。</p><p>第三部分:横向结构。两种逻辑关系:一个演绎、第二个归纳。<br>演绎论证有两种形式，第一个叫标准式，也叫三段论，也就是大前提、小前提和结论;第二个是常见式，也分三个部分，是现象、原因、解决方案。<br>归纳的重点两个知识点:排序和分类。三种常见的排序方法:第一个是按时间，第二个按结构，第三个按重要性。分类的衡量标准式MECE原则，分清和分净,或者相互独立、完全穷尽、或者不重不漏。分类的重要行为要求是界定范围和明确标准。</p><p>第四部分:序言结构。四要素，用英文字母是SCQA,用中文表达是:背景、冲突、提问和回答。一起做个变形:开门见山式是A在前面,突出忧虑式是C在前,突出信心式Q在前面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0712-结构性思维笔记&quot;&gt;&lt;a href=&quot;#0712-结构性思维笔记&quot; class=&quot;headerlink&quot; title=&quot;0712 结构性思维笔记&quot;&gt;&lt;/a&gt;0712 结构性思维笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;结构的定义：组成整体的各部分的搭配</summary>
      
    
    
    
    <category term="2022新疆工行星令营" scheme="https://www.ckxgzxa.top/categories/2022%E6%96%B0%E7%96%86%E5%B7%A5%E8%A1%8C%E6%98%9F%E4%BB%A4%E8%90%A5/"/>
    
    
  </entry>
  
</feed>
