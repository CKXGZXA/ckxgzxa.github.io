<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>技术匝记簿</title>
  
  
  <link href="https://www.ckxgzxa.top/atom.xml" rel="self"/>
  
  <link href="https://www.ckxgzxa.top/"/>
  <updated>2023-12-04T15:06:27.277Z</updated>
  <id>https://www.ckxgzxa.top/</id>
  
  <author>
    <name>残魁斜罡</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1.Oracle学习笔记-Oracle 19c概述</title>
    <link href="https://www.ckxgzxa.top/OracleDB01.html"/>
    <id>https://www.ckxgzxa.top/OracleDB01.html</id>
    <published>2023-12-02T19:41:37.000Z</published>
    <updated>2023-12-04T15:06:27.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Oracle-19c概述"><a href="#1-Oracle-19c概述" class="headerlink" title="1. Oracle 19c概述"></a>1. Oracle 19c概述</h2><pre class="mermaid">graph LRA[Oracle19c 概述]-->Oracle的发展史A-->关系数据库的基本理论A-->B[Oracle 19c的安装与卸载]A-->C[Oracle 19c的管理工具]A-->启动与关闭数据库实例</pre><h3 id="1-1-Oracle-的发展史"><a href="#1-1-Oracle-的发展史" class="headerlink" title="1.1 Oracle 的发展史"></a>1.1 Oracle 的发展史</h3><p>Oracle是甲骨文公司的一款关系数据库管理系统，也是目前较流行的关系数据管理系统，在数据库领域中一直处于领先地位。该系统具有可移植性好、使用方便、功能强等特点。<br>Oracle数据库自发布至今，也经历了一个从不稳定到稳定，从功能简单至强大的过程。Oracle的每一次版本变迁，都具有里程碑意义。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312030413956.png" alt="Oracle的版本发展"></p><blockquote><ul><li>小型: Access</li><li>中型: SQL server、MySQL、TiDB</li><li>大型: Oracle、DB2、SyBase</li></ul></blockquote><p>Oracle 的特点:</p><ul><li>可用性强</li><li>可扩展性强</li><li>数据安全性强</li><li>稳定性强</li></ul><h3 id="1-2-关系数据库"><a href="#1-2-关系数据库" class="headerlink" title="1.2  关系数据库"></a>1.2  关系数据库</h3><h4 id="1-2-1-数据库的特点"><a href="#1-2-1-数据库的特点" class="headerlink" title="1.2.1 数据库的特点:"></a>1.2.1 数据库的<strong>特点</strong>:</h4><p>永久存储、有组织、可共享</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312030430601.png"></p><h4 id="1-2-2-数据库的地位"><a href="#1-2-2-数据库的地位" class="headerlink" title="1.2.2 数据库的地位:"></a>1.2.2 数据库的<strong>地位</strong>:</h4><p>数据库技术产生于六十年代末，是数据管理的有效技术，是计算机科学的重要分支。<br>数据库技术是信息系统的核心和基础，它的出现极大地促进了计算机应用向各行各业的渗透。数据库已经成为每个人生活中不可缺少的部分。</p><h4 id="1-2-3-数据库的4个基本概念"><a href="#1-2-3-数据库的4个基本概念" class="headerlink" title="1.2.3 数据库的4个基本概念"></a>1.2.3 数据库的4个基本概念</h4><ul><li>数据 (Data)</li></ul><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312030438789.gif"></p><p>数据（Data）是数据库中存储的基本对象<br>数据的定义：描述事物的符号记录<br>数据的种类：数字、文字、图形、图像、音频、视频、学生的档案记录等</p><blockquote><p>数据的含义称为数据的语义，数据与其语义是不可分的。例如  93是一个数据<br>语义1：学生某门课的成绩<br>语义2：某人的体重<br>语义3：计算机系2013级学生人数</p><p>语义3：……</p><p>学生档案中的学生记录<br>（李明，男，199505，江苏南京市，计算机系，2013）<br>语义：学生姓名、性别、出生年月、出生地、所在院系、入学时间<br>解释：李明是个大学生，1995年5月出生，江苏南京市人，  2013年考入计算机系</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312030440805.png"></p></blockquote><ul><li><p>数据库 (Database)</p><ul><li>数据库的定义<br>数据库（Database，简称DB）是长期储存在计算机内、有组织的、可共享的大量数据的集合。</li><li>数据库的基本特征<ol><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易扩展</li></ol></li></ul></li><li><p>数据库管理系统 (DBMS, DataBase Management System)</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312030450943.png"></p><ul><li><p>什么是数据库管理系统</p><ul><li>位于用户与操作系统之间的一层数据管理软件</li><li>是基础软件, 是一个大型复杂的软件系统</li></ul></li><li><p>数据库管理系统的用途</p><p>科学地组织和存储数据、高效地获取和维护数据</p></li></ul><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312031343623.png" alt="数据库在计算机系统中的位置"></p><p>数据库管理系统的主要功能</p><ul><li><p>数据定义功能</p><p>提供数据定义语言（DDL）定义数据库中的数据对象</p></li><li><p>数据组织、存储和管理</p><ul><li>分类组织、存储和管理各种数据</li><li>确定组织数据的文件结构和存取方式</li><li>实现数据之间的联系</li><li>提供多种存取方法提高存取效率</li></ul></li><li><p>数据操纵功能</p><p>提供数据操纵语言（DML）实现对数据库的基本操作 （查询、插入、删除和修改）</p></li><li><p>数据库的事务管理和运行管理</p><ul><li>数据库在建立数据库在建立、运行和维护时由数据库管理系统统一管理和控制</li><li>保证数据的安全性、完整性、多用户对数据的并发使用</li><li>发生故障后的系统恢复</li></ul></li><li><p>数据库的建立和维护功能</p><ul><li>数据库的初始数据的装载和转换</li><li>数据库转储、恢复功能</li><li>数据库的重组织</li><li>性能监视、分析等</li></ul></li><li><p>其它功能<br>数据库管理系统与网络中其它软件系统的通信数据库管理系统系统之间的数据转换<br>异构数据库之间的互访和互操作</p></li></ul></li><li><p>数据库系统 (DBS)</p><ul><li><p>数据库系统的构成</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312031616935.png"></p><ul><li>数据库</li><li>数据库管理系统（及其应用开发工具）</li><li>应用程序</li><li>数据库管理员</li></ul></li><li><p>数据管理技术的产生和发展</p><ul><li><p>什么是数据管理</p><p>对数据进行分类、组织、编码、存储、检索和维护， 是数据管理的中心问题</p></li><li><p>数据管理技术的发展过程</p><p>人工管理阶段（20世纪50年代中期以前）</p><p>文件系统阶段（20世纪50年代末~60年代中期）</p><p>数据库系统阶段（20世纪60年代末~现在）</p></li><li><p>数据管理技术的发展动力</p><p>应用需求的推动</p><p>计算机硬件的发展</p><p>计算机软件的发展</p></li></ul></li><li><p>数据库系统的特点</p><table><thead><tr><th align="left">学号</th><th>姓名</th><th>性别</th><th>年龄</th><th>专业</th></tr></thead><tbody><tr><td align="left">2019015200</td><td>刘源</td><td>男</td><td>21</td><td>软件工程</td></tr><tr><td align="left">2019015401</td><td>马超</td><td>男</td><td>22</td><td>石油工程</td></tr><tr><td align="left">2020015621</td><td>李湘芸</td><td>女</td><td>20</td><td>储运</td></tr><tr><td align="left">…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><table><thead><tr><th align="center">奖励</th></tr></thead><tbody><tr><td align="center">2020学年校级奖学金， 2021学年国家奖学金</td></tr><tr><td align="center">2021校级优秀学生</td></tr></tbody></table></li></ul></li></ul><pre><code>- 数据结构化  ![](https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312031646575.png)  - 数据的整体结构化是数据库的主要特征之一  - 整体结构化    不再仅仅针对某一个应用，而是面向全组织    不仅数据内部结构化，整体是结构化的，数据之间具有联系    数据记录可以变长    数据的最小存取单位是数据项- 数据的共享性高，冗余度低且易扩充  - 数据面向整个系统，可以被多个用户、多个应用共享使用。  - 数据共享的好处    减少数据冗余，节约存储空间    避免数据之间的不相容性与不一致性    使系统易于扩充- 数据独立性高  - 物理独立性    指用户的应用程序与数据库中数据的物理存储是相互独立的。当数据的物理存储改变了，应用程序不用改变。  - 逻辑独立性    指用户的应用程序与数据库的逻辑结构是相互独立的。数据的逻辑结构改变了，应用程序不用改变。  - 数据独立性    由数据库管理系统的二级映像功能来保证。- 数据由数据库管理系统统一管理和控制  1. 数据的安全性（Security）保护     保护数据以防止不合法的使用造成的数据的泄密和破坏。  2. 数据的完整性（Integrity）检查     保证数据的正确性、有效性和相容性。  3. 并发（Concurrency）控制     对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果。  4. 数据库恢复（Recovery）     将数据库从错误状态恢复到某一已知的正确状态。</code></pre><h4 id="1-2-4-数据库概念小结"><a href="#1-2-4-数据库概念小结" class="headerlink" title="1.2.4 数据库概念小结"></a>1.2.4 数据库概念小结</h4><ol><li>数据库是长期存储在计算机内有组织的大量的共享的数据集合。</li><li>可以供各种用户共享，具有最小冗余度和较高的数据独立性。</li><li>数据库管理系统在数据库建立、运用和维护时对数据库进行统一控制，以保证数据的完整性、安<br>全性，并在多用户同时使用数据库时进行并发控制，在发生故障后对数据库进行恢复。</li></ol><h3 id="1-3-数据模型"><a href="#1-3-数据模型" class="headerlink" title="1.3  数据模型"></a>1.3  数据模型</h3><ul><li><p>数据模型是对现实世界数据特征的抽象。</p></li><li><p>通俗地讲数据模型就是现实世界的模拟。</p></li><li><p>数据模型应满足三方面要求：</p><ol><li>能比较真实地模拟现实世界</li><li>容易为人所理解</li><li>便于在计算机上实现</li></ol></li><li><p>数据模型是数据库系统的核心和基础</p></li></ul><h4 id="1-3-1-两类数据模型"><a href="#1-3-1-两类数据模型" class="headerlink" title="1.3.1  两类数据模型"></a>1.3.1  两类数据模型</h4><p>数据模型分为两类（两个不同的层次）</p><ol><li><strong>概念模型</strong> 也称信息模型，它是按用户的观点来对数据和信息建模，用于数据库设计。</li><li><strong>逻辑模型</strong>和<strong>物理模型</strong><br>逻辑模型主要包括网状模型、层次模型、关系模型、面向对象数据模型、对象关系数据模型、<br>半结构化数据模型等。按计算机系统的观点对数据建模，用于DBMS实现。<br>物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁<br>带上的存储方式和存取方法。</li></ol><p>客观对象的抽象过程——两步抽象</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312031957495.png"></p><ul><li><p>现实世界中的客观对象抽象为概念模型；</p><p>将现实世界抽象为信息世界</p></li><li><p>把概念模型转换为某一数据库管理系统支持的数据模型。<br>将信息世界转换为机器世界</p></li></ul><p><strong>概念模型</strong></p><ul><li><p>概念模型的用途</p><p>概念模型用于信息世界的建模<br>是现实世界到机器世界的一个中间层次<br>是数据库设计的有力工具<br>数据库设计人员和用户之间进行交流的语言</p></li><li><p>对概念模型</p><p>较强的语义表达能力<br>简单、清晰、易于用户理解</p></li></ul><h4 id="1-3-2-信息世界中的基本概念"><a href="#1-3-2-信息世界中的基本概念" class="headerlink" title="1.3.2 信息世界中的基本概念"></a>1.3.2 信息世界中的基本概念</h4><ul><li><p>基本概念</p><ol><li>实体（Entity）<br>客观存在并可相互区别的事物称为实体。可以是具体的人、事、物或抽象的概念。</li><li>属性（Attribute）<br>实体所具有的某一特性称为属性。一个实体可以由若干个属性来刻画。</li><li>码（Key）<br>唯一标识实体的属性集称为码。</li><li>实体型（Entity Type）<br>用实体名及其属性名集合来抽象和刻画同类实体称为实体型。</li><li>实体集（Entity Set）<br>同一类型实体的集合称为实体集。</li><li>联系（Relationship）<br>现实世界中事物内部以及事物之间的联系在信息世界中反映为实体（型）内部的联系和实体（型）之间的联系。<br>实体内部的联系通常是指组成实体的各属性之间的联系；<br>实体之间的联系通常是指不同实体集之间的联系；<br>实体之间的联系有一对一、一对多和多对多等多种类型。</li></ol></li><li><p>实体-联系方法</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312032222537.png"></p><p>用E-R图来描述现实世界的概念模型，E-R方法（Entity-Relationship Approach）也称为E-R模型</p></li><li><p>数据操作</p><p>对数据库中各种对象（型）的实例（值）允许执行的操作的集合，包括操作及有关的操作规则</p><ul><li><p>数据操作的类型</p><p>查询和更新（包括插入、删除、修改）</p></li><li><p>数据模型对操作的定义<br>操作的确切含义、操作符号、操作规则（如优先级）、实现操作的语言</p></li><li><p>数据操作是对系统动态特性的描述</p></li></ul></li><li><p>数据的完整性约束条件</p><p>一组完整性规则的集合<br>完整性规则：给定的数据模型中数据及其联系所具有的制约和依存规则，用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效和相容</p><p>数据模型对完整性约束条件的定义</p><ul><li>反映和规定必须遵守的基本的通用的完整性约束条件。</li><li>提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件。</li></ul></li></ul><h4 id="1-3-3-常用的数据模型"><a href="#1-3-3-常用的数据模型" class="headerlink" title="1.3.3 常用的数据模型"></a>1.3.3 常用的数据模型</h4><ul><li><p>层次模型（Hierarchical Model）</p><ul><li><p>层次模型是数据库系统中最早出现的数据模型, 层次数据库系统的典型代表是IBM公司的IMS（Information Management System）数据库管理系统, 层次模型用树形结构来表示各类实体以及实体间的联系</p></li><li><p>满足下面两个条件的基本层次联系的集合为层次模型</p><ol><li>有且只有一个结点没有双亲结点，这个结点称为根结点</li><li>根以外的其它结点有且只有一个双亲结点</li></ol></li><li><p>根结点，双亲结点，兄弟结点，叶结点</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312032307300.png" alt="0105"></p></li><li><p>层次模型的特点</p><ul><li>结点的双亲是唯一的</li><li>只能直接处理一对多的实体联系</li><li>每个记录类型可以定义一个排序字段，也称为码字段</li><li>任何记录值只有按其路径查看时，才能显出它的全部意义</li><li>没有一个子女记录值能够脱离双亲记录值而独立存在</li></ul></li><li><p>层次模型的完整性约束条件</p><p>无相应的双亲结点值就不能插入子女结点值</p><p>如果删除双亲结点值，则相应的子女结点值也被同时删除</p><p>更新操作时，应更新所有相应记录，以保证数据的一致性</p></li><li><p>层次模型的优越点</p><ul><li><p>优点</p><p>层次模型的数据结构比较简单清晰<br>查询效率高，性能优于关系模型，不低于网状模型<br>层次数据模型提供了良好的完整性支持</p></li><li><p>缺点</p><p>结点之间的多对多联系表示不自然<br>对插入和删除操作的限制多，应用程序的编写比较复杂<br>查询子女结点必须通过双亲结点<br>层次命令趋于程序化</p></li></ul></li></ul></li><li><p>网状模型（Network Model）</p><p>网状数据库系统采用网状模型作为数据的组织方式<br>满足下面两个条件的基本层次联系的集合：</p><ol><li>允许一个以上的结点无双亲；</li><li>一个结点可以有多于一个的双亲。</li></ol><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312032317640.png"></p><blockquote><p>例如：一个学生可以选修若干门课程，某一课程可以被多个学生选修，学生与课程之间是多对多联<br>系<br>引进一个学生选课的联结记录，由3个数据项组成<br>学号、课程号、成绩——表示某个学生选修某一门课程及其成绩</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312032318373.png"></p></blockquote><ul><li><p>优点</p><p>能够更为直接地描述现实世界，如一个结点可以有多个双亲</p><p>具有良好的性能，存取效率较高</p></li><li><p>缺点</p><p>结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握<br>DDL、DML语言复杂，用户不容易使用<br>记录之间联系是通过存取路径实现的，用户必须了解系统结构的细节</p></li></ul></li><li><p>关系模型（Relational Model)）</p><p>关系数据库系统采用关系模型作为数据的组织方式</p><p>1970年美国IBM公司San Jose研究室的研究员E.F.Codd首次提出了数据库系统的关系模型</p><p>计算机厂商新推出的数据库管理系统几乎都支持关系模型</p><blockquote><p>在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312032322817.png"></p><ul><li>关系（Relation）<br>一个关系对应通常说的一张表</li><li>元组（Tuple）<br>表中的一行即为一个元组</li><li>属性（Attribute）<br>表中的一列即为一个属性，给每一个属性起一个名称即属性名</li><li>主码（Key）<br>也称码键。表中的某个属性组，它可以唯一确定一个元组</li><li>域（Domain）<br>是一组具有相同数据类型的值的集合。属性的取值范围来自某个域。</li><li>分量<br>元组中的一个属性值。</li><li>关系模式：对关系的描述<br>关系名（属性1，属性2，…，属性n）<br>学生（学号，姓名，年龄，性别，系名，年级）</li></ul></blockquote><p>关系必须是规范化的，满足一定的规范条件<br>最基本的规范条件：关系的每一个分量必须是一个不可分的数据项, 不允许表中还有表<br>下图中工资和扣除是可分的数据项 ,不符合关系模型要求</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312032324597.png"></p><ul><li><p>术语对比</p><table><thead><tr><th align="center">关系术语</th><th align="center">一般表格的术语</th></tr></thead><tbody><tr><td align="center">关系名</td><td align="center">表名</td></tr><tr><td align="center">关系模式</td><td align="center">表头(表格的描述)</td></tr><tr><td align="center">关系</td><td align="center">(一张) 二维表</td></tr><tr><td align="center">元组</td><td align="center">记录或行</td></tr><tr><td align="center">属性</td><td align="center">列</td></tr><tr><td align="center">属性名</td><td align="center">列名</td></tr><tr><td align="center">属性值</td><td align="center">列值</td></tr><tr><td align="center">分量</td><td align="center">一条记录中的一个列值</td></tr><tr><td align="center">非规范关系</td><td align="center">表中有表(大表中嵌有小表)</td></tr></tbody></table></li><li><p>关系模型的操纵与完整性约束</p><p>数据操作是集合操作，操作对象和操作结果都是关系</p><ul><li>查询</li><li>插入</li><li>删除</li><li>更新</li></ul><p>存取路径对用户隐蔽，用户只要指出“干什么”，不必详细说明“怎么干”</p><p>关系的完整性约束条件</p><ul><li>实体完整性</li><li>参照完整性</li><li>用户定义的完整性</li></ul></li><li><p>优点</p><ul><li>建立在严格的数学概念的基础上</li><li>概念单一<br>实体和各类联系都用关系来表示<br>对数据的检索结果也是关系</li><li>关系模型的存取路径对用户透明<br>具有更高的数据独立性，更好的安全保密性<br>简化了程序员的工作和数据库开发建立的工作</li></ul></li><li><p>缺点<br>存取路径对用户透明，查询效率往往不如格式化数据模型<br>为提高性能，必须对用户的查询请求进行优化，增加了开发数据库管理系统的难度</p></li></ul></li><li><p>面向对象数据模型（Object Oriented Data Model）</p></li><li><p>对象关系数据模型（Object Relational Data Model）</p></li><li><p>半结构化数据模型（Semistruture Data Model）</p></li></ul><h3 id="1-4-Oracle的安装"><a href="#1-4-Oracle的安装" class="headerlink" title="1.4 Oracle的安装"></a>1.4 Oracle的安装</h3><ol><li><p>访问 <a href="https://www.oracle.com/cn/">Oracle 中国官网</a> <a href="https://www.oracle.com/cn/">https://www.oracle.com/cn/</a></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312040010182.png"></p></li><li><p>点击菜单栏上产品–&gt;硬件和软件–&gt;Oracle Database</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312040011578.png"></p></li><li><p>进入之后点击 <code>下载Oracle Database 19c</code>, 随后根据待安装系统架构选择适合的进行下载即可, 比如我这次想在下载之前需要登录Oracle账号即可, 当然Oracle还提供了Docker中的安装方式, 请自行学习.</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312040014470.png"></p></li><li><p>下载解压之后运行 <code>Setup.exe</code> 文件</p></li><li><p>安装过程</p><ul><li><p>选择创建并配置单实例数据库， 点击下一步</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312042133262.png"></p></li><li><p>选择桌面类系统安装，供我们自己学习，生产环境安装到Linux服务器上一般选择服务器， 随后点击下一步</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312042133648.png"></p></li><li><p>指定Oracle主目录用户</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312042134017.png"></p></li><li><p>选择好Oracle目录并设置好口令点击下一步， 密码不强需要二次确认</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312042134946.png"></p></li><li><p>随后直接下一步等待安装完成</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202312042134090.png"></p></li></ul></li></ol><h3 id="1-5-Oracle的卸载"><a href="#1-5-Oracle的卸载" class="headerlink" title="1.5 Oracle的卸载"></a>1.5 Oracle的卸载</h3><p>Oracle的卸载非常简单，只需要在服务中将Oracle开头的相关服务全部停止，再删除如下注册表项目即可：</p><blockquote><p>要删除的注册表项：</p><p><code>HKEY_LOCAL_MACHINE\SOFTWARE\ORACLE</code></p><p><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\</code> 下的Oracle相关项</p><p>要重装Oracle 数据库， 建议重启计算机</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Oracle-19c概述&quot;&gt;&lt;a href=&quot;#1-Oracle-19c概述&quot; class=&quot;headerlink&quot; title=&quot;1. Oracle 19c概述&quot;&gt;&lt;/a&gt;1. Oracle 19c概述&lt;/h2&gt;&lt;pre class=&quot;mermaid&quot;&gt;gr</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="数据库" scheme="https://www.ckxgzxa.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>04.Docker Compose</title>
    <link href="https://www.ckxgzxa.top/road2docker04.html"/>
    <id>https://www.ckxgzxa.top/road2docker04.html</id>
    <published>2023-08-13T05:37:38.000Z</published>
    <updated>2023-08-13T15:48:49.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h2 id="1-docker-compose-安装"><a href="#1-docker-compose-安装" class="headerlink" title="1. docker-compose 安装"></a>1. <code>docker-compose</code> 安装</h2><p>Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址：<a href="https://github.com/docker/compose/releases%E3%80%82">https://github.com/docker/compose/releases。</a></p><p>运行以下命令以下载 Docker Compose 的当前稳定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/版本号/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>添加执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><p>创建软链：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose <span class="hljs-regexp">/usr/</span>bin/docker-compose<br></code></pre></td></tr></table></figure><p>测试是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker compose version <br>Docker Compose version v2.12.2<br></code></pre></td></tr></table></figure><p>也可以使用 <code>pip</code> 安装docker-compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install docker-compose<br></code></pre></td></tr></table></figure><h2 id="2-compose文件的结构和版本"><a href="#2-compose文件的结构和版本" class="headerlink" title="2.compose文件的结构和版本"></a>2.compose文件的结构和版本</h2><ul><li><p><strong>基本语法结构</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><br><span class="hljs-attr">services:</span> <span class="hljs-comment"># 容器</span><br>  <span class="hljs-attr">servicename:</span> <span class="hljs-comment"># 服务名字，可为内部bridge网络的 DNS name</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-comment"># 镜像的名字</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-comment"># 可选，如果设置，则会覆盖默认镜像里的 CMD命令</span><br>    <span class="hljs-attr">environment:</span> <span class="hljs-comment"># 可选，相当于 docker run里的 --env</span><br>    <span class="hljs-attr">volumes:</span> <span class="hljs-comment"># 可选，相当于docker run里的 -v</span><br>    <span class="hljs-attr">networks:</span> <span class="hljs-comment"># 可选，相当于 docker run里的 --network</span><br>    <span class="hljs-attr">ports:</span> <span class="hljs-comment"># 可选，相当于 docker run里的 -p</span><br>  <span class="hljs-attr">servicename2:</span><br><br><span class="hljs-attr">volumes:</span> <span class="hljs-comment"># 可选，相当于 docker volume create</span><br><br><span class="hljs-attr">networks:</span> <span class="hljs-comment"># 可选，相当于 docker network create</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-Compose&quot;&gt;&lt;a href=&quot;#Docker-Compose&quot; class=&quot;headerlink&quot; title=&quot;Docker Compose&quot;&gt;&lt;/a&gt;Docker Compose&lt;/h1&gt;&lt;h2 id=&quot;1-docker-compose-</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="cloud" scheme="https://www.ckxgzxa.top/categories/cloud/"/>
    
    
    <category term="Docker" scheme="https://www.ckxgzxa.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>03.Dockerfile</title>
    <link href="https://www.ckxgzxa.top/road2docker03.html"/>
    <id>https://www.ckxgzxa.top/road2docker03.html</id>
    <published>2023-08-12T16:06:58.000Z</published>
    <updated>2023-08-13T05:37:24.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="1-基础镜像的选择"><a href="#1-基础镜像的选择" class="headerlink" title="1. 基础镜像的选择"></a>1. 基础镜像的选择</h2><p>基本原则:</p><ul><li>官方镜像优于非官方的镜像，如果没有官方镜像，则尽量选择Dockerfile开源的</li><li>固定版本tag而不是每次都使用latest</li><li>尽量选择体积小的镜像</li></ul><h2 id="2-通过RUN执行指令"><a href="#2-通过RUN执行指令" class="headerlink" title="2.通过RUN执行指令"></a>2.通过<code>RUN</code>执行指令</h2><p><code>RUN</code> 主要用于在Image里执行指令, 比如安装软件, 下载文件等. 使用 <code>\</code> 拼接命令防止不必要的分层</p><h2 id="3-文件复制和目录操作"><a href="#3-文件复制和目录操作" class="headerlink" title="3.文件复制和目录操作"></a>3.文件复制和目录操作</h2><p>使用<code>COPY</code> 和 <code>ADD</code> 命令</p><ul><li><p>复制普通文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.9</span>.<span class="hljs-number">5</span>-alpine3.<span class="hljs-number">13</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> hello.py /app/hello.py</span><br></code></pre></td></tr></table></figure></li><li><p>复制压缩文件</p><p>使用 <code>ADD</code>  时如果复制的是一个gzip等压缩文件时，ADD会帮助我们自动去解压缩文件。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.9</span>.<span class="hljs-number">5</span>-alpine3.<span class="hljs-number">13</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> hello.tar.gz /app/</span><br></code></pre></td></tr></table></figure></li><li><p>命令的选择</p><p>在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>.</p></li><li><p><code>WORKDIR</code></p><p><code>WORKDIR</code> 指令为 Dockerfile 中紧随其后的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>COPY</code> 和 <code>ADD</code> 指令设置工作目录。如果指定的工作目录不存在，即使在后续的 Dockerfile 指令中没有使用，它也会被创建。</p></li></ul><h2 id="4-构建参数和环境变量-ARG-vs-ENV"><a href="#4-构建参数和环境变量-ARG-vs-ENV" class="headerlink" title="4.构建参数和环境变量(ARG vs ENV)"></a>4.构建参数和环境变量(ARG vs ENV)</h2><p>当在 Docker 中构建镜像时，我们经常需要考虑如何传递配置信息和变量到镜像内部。</p><h3 id="构建参数（ARG）"><a href="#构建参数（ARG）" class="headerlink" title="构建参数（ARG）"></a>构建参数（ARG）</h3><p>构建参数（<code>ARG</code>）是在构建镜像时传递给构建过程的变量。它们可以用于在构建过程中进行条件判断、选择不同的分支或在构建过程中传递信息。以下是使用 <code>ARG</code> 的示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># 使用构建参数定义变量</span><br><span class="hljs-keyword">ARG</span> APP_VERSION<br><br><span class="hljs-comment"># 在构建过程中使用构建参数</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Building app version: <span class="hljs-variable">$APP_VERSION</span>&quot;</span></span><br></code></pre></td></tr></table></figure><p>在构建过程中，可以通过 <code>--build-arg</code> 选项来传递构建参数的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build --build-arg APP_VERSION=1.0 -t myapp .<br></code></pre></td></tr></table></figure><h3 id="环境变量（ENV）"><a href="#环境变量（ENV）" class="headerlink" title="环境变量（ENV）"></a>环境变量（ENV）</h3><p>环境变量（<code>ENV</code>）是在容器内运行时使用的变量。它们可以用于在容器内部设置配置、传递信息或指定行为。以下是使用 <code>ENV</code> 的示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># 设置环境变量</span><br><span class="hljs-keyword">ENV</span> DB_HOST=localhost<br><span class="hljs-keyword">ENV</span> DB_PORT=<span class="hljs-number">5432</span><br><br><span class="hljs-comment"># 在容器内使用环境变量</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Connecting to database at <span class="hljs-variable">$DB_HOST</span>:<span class="hljs-variable">$DB_PORT</span>&quot;</span></span><br></code></pre></td></tr></table></figure><p>使用 <code>-e</code> 选项可以在运行容器时设置环境变量的值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -e DB_HOST=mydbhost -e DB_PORT=5432 myapp<br></code></pre></td></tr></table></figure><h3 id="ARG-vs-ENV：选择哪种方式？"><a href="#ARG-vs-ENV：选择哪种方式？" class="headerlink" title="ARG vs ENV：选择哪种方式？"></a>ARG vs ENV：选择哪种方式？</h3><p>在选择使用 <code>ARG</code> 还是 <code>ENV</code> 时，需要考虑以下几点：</p><ul><li><code>ARG</code> 用于构建时，<code>ENV</code> 用于运行时。如果您希望在构建过程中传递变量值，使用 <code>ARG</code>。如果需要在容器运行时设置配置或环境，使用 <code>ENV</code>。</li><li><code>ARG</code> 值只在构建过程中可用，不会在容器内保留。<code>ENV</code> 值将在容器内持续存在。</li><li><code>ENV</code> 更适合在容器内部设置常驻环境变量，如配置信息、路径等。</li></ul><p>综合考虑，根据需要选择适当的方式来管理构建参数和环境变量，以实现更有效的 Docker 镜像管理。</p><h2 id="5-CMD-容器启动命令"><a href="#5-CMD-容器启动命令" class="headerlink" title="5.CMD 容器启动命令"></a>5.<code>CMD</code> 容器启动命令</h2><p>在 Docker 中，<code>CMD</code> 是用于定义容器启动时默认执行的命令或应用程序。这个命令会在容器启动时自动执行，如果在 <code>docker run</code> 命令中没有指定要运行的特定命令。</p><p>以下是关于 <code>CMD</code> 的一些重要信息：</p><ul><li><code>CMD</code> 可以在 Dockerfile 中使用，用于指定在容器启动时要运行的默认命令。这个命令可以是应用程序，也可以是一条脚本。</li><li>如果在 Dockerfile 中有多个 <code>CMD</code> 指令，只有最后一个会生效。</li><li><code>CMD</code> 指令的格式可以是列表形式，也可以是字符串形式。列表形式使用 JSON 数组格式（例如 <code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>），字符串形式则使用标准 shell 命令（例如 <code>CMD executable param1 param2</code>）。</li><li>如果在 <code>docker run</code> 命令中指定了要运行的命令，它将覆盖 <code>CMD</code> 中定义的默认命令。</li><li><code>CMD</code> 中指定的命令不会在容器内创建新的进程，而是替代了容器的默认进程。<strong>这意味着当指定的命令运行结束时，容器也会自动终止。</strong></li></ul><h2 id="6-ENTRYPOINT-容器启动命令"><a href="#6-ENTRYPOINT-容器启动命令" class="headerlink" title="6.ENTRYPOINT 容器启动命令"></a>6.<code>ENTRYPOINT</code> 容器启动命令</h2><p>在 Docker 中，<code>ENTRYPOINT</code> 用于定义容器启动时要执行的主要命令或应用程序。与 <code>CMD</code> 不同，<code>ENTRYPOINT</code> 定义的命令在容器启动时始终执行，无论是否在 <code>docker run</code> 命令中指定了其他命令。</p><p>以下是关于 <code>ENTRYPOINT</code> 的一些重要信息：</p><ul><li><code>ENTRYPOINT</code> 可以在 Dockerfile 中使用，用于指定容器启动时要运行的主要命令。这个命令可以是应用程序，也可以是一条脚本。</li><li>如果在 <code>docker run</code> 命令中指定了要运行的命令，它将被视为 <code>ENTRYPOINT</code> 中命令的参数，而不会覆盖 <code>ENTRYPOINT</code> 定义的默认命令。</li><li>如果需要在容器启动时传递参数，可以将这些参数放在 <code>ENTRYPOINT</code> 后面。例如：<code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>。</li><li><code>CMD</code> 指令可以与 <code>ENTRYPOINT</code> 一起使用，提供默认的参数。这样可以在运行容器时覆盖 <code>CMD</code> 提供的默认参数，但不会影响 <code>ENTRYPOINT</code> 的命令。</li><li>与 <code>CMD</code> 类似，<code>ENTRYPOINT</code> 中指定的命令也不会在容器内创建新的进程，而是替代了容器的默认进程。这意味着当指定的命令运行结束时，容器也会自动终止。</li></ul><h2 id="7-Shell格式和Exec格式"><a href="#7-Shell格式和Exec格式" class="headerlink" title="7.Shell格式和Exec格式"></a>7.Shell格式和Exec格式</h2><p>在 Docker 的 <code>CMD</code> 和 <code>ENTRYPOINT</code> 指令中，有两种常见的格式：Shell 格式和 Exec 格式。</p><h3 id="Shell-格式"><a href="#Shell-格式" class="headerlink" title="Shell 格式"></a>Shell 格式</h3><p>在 Shell 格式中，<code>CMD</code> 或 <code>ENTRYPOINT</code> 的命令会被解释为在一个 shell 中执行。这意味着你可以使用 shell 的特性，比如通配符和变量替换。</p><p>例如，以下是一个使用 Shell 格式的示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$USER</span>!&quot;</span></span><br></code></pre></td></tr></table></figure><p>在这个示例中，<code>$USER</code> 是一个 shell 变量，将会在容器启动时被替换成实际的用户名。</p><h3 id="Exec-格式"><a href="#Exec-格式" class="headerlink" title="Exec 格式"></a>Exec 格式</h3><p>在 Exec 格式中，<code>CMD</code> 或 <code>ENTRYPOINT</code> 的命令会被直接执行，不会被解释成 shell 命令。这意味着没有 shell 特性可用，也没有变量替换。</p><p>例如，以下是一个使用 Exec 格式的示例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;echo&quot;</span>, <span class="hljs-string">&quot;Hello, World!&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>在这个示例中，命令 <code>[&quot;echo&quot;, &quot;Hello, World!&quot;]</code> 会被直接执行，不会进行任何 shell 解释或变量替换。</p><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>选择使用哪种格式取决于你的需求。如果需要使用 shell 的特性或变量替换，那么可以使用 Shell 格式。但是，Shell 格式可能会引入一些潜在的问题，比如需要处理 shell 的转义和安全性问题。</p><p>Exec 格式通常更安全，因为它避免了 shell 的解释和可能的漏洞。它也更适合于不依赖于 shell 特性的命令。</p><p>总之，根据实际情况选择合适的格式，以满足容器的需求。</p><p>当你想要在 <code>CMD</code> 中使用带有 Shell 变量的命令，你可以使用 Shell 格式，如下所示：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, <span class="hljs-variable">$USER</span>!&quot;</span></span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>$USER</code> 是一个 shell 变量，将会在容器启动时被替换成实际的用户名。然而，如果你想在 Exec 格式中使用变量，你需要使用 Shell 的执行命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;echo Hello, <span class="hljs-variable">$USER</span>!&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>在这个示例中，我们使用了 <code>/bin/sh</code> 作为执行的 shell，然后使用 <code>-c</code> 选项传递要执行的命令。这样，<code>$USER</code> 变量会在 shell 中被解释和替换。</p><p>请注意，虽然这个例子使用了 Exec 格式，但是它还是在容器内部启动了一个 shell 进程，然后执行了命令。这可能会引入一些不必要的额外开销，因此在选择 Shell 格式和 Exec 格式时，需要根据实际需求进行权衡。</p><h2 id="8-合理使用缓存"><a href="#8-合理使用缓存" class="headerlink" title="8.合理使用缓存"></a>8.合理使用缓存</h2><p>在编写 Dockerfile 时，合理使用缓存是优化构建过程和减少镜像构建时间的重要技巧之一。</p><p>Docker 在构建镜像时会使用缓存，以便重复使用之前的构建步骤。</p><p>以下是一些合理使用缓存的技巧：</p><h3 id="1-优先复用不变的步骤"><a href="#1-优先复用不变的步骤" class="headerlink" title="1. 优先复用不变的步骤"></a>1. 优先复用不变的步骤</h3><p>将不太可能发生变化的步骤放在 Dockerfile 的前面，以便在构建过程中复用缓存。比如，安装基础依赖、复制代码等步骤通常不会频繁变化。</p><h3 id="2-分阶段构建"><a href="#2-分阶段构建" class="headerlink" title="2. 分阶段构建"></a>2. 分阶段构建</h3><p>将 Dockerfile 分成多个阶段（<code>FROM</code>），每个阶段执行特定的任务。这样可以确保只有在前面阶段的内容发生变化时才会重新构建。不变的阶段的缓存会被复用。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># 阶段一：构建应用</span><br><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span> AS builder<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package*.json ./</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm build</span><br><br><span class="hljs-comment"># 阶段二：运行应用</span><br><span class="hljs-keyword">FROM</span> nginx:alpine<br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /app/dist /usr/share/nginx/html</span><br></code></pre></td></tr></table></figure><h3 id="3-使用-no-cache"><a href="#3-使用-no-cache" class="headerlink" title="3. 使用 --no-cache"></a>3. 使用 <code>--no-cache</code></h3><p>有时，为了确保获取最新的依赖或代码，你可以在构建时禁用缓存，以防止旧的缓存内容被使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build --no-cache -t myapp .<br></code></pre></td></tr></table></figure><h3 id="4-按需精确刷新缓存"><a href="#4-按需精确刷新缓存" class="headerlink" title="4. 按需精确刷新缓存"></a>4. 按需精确刷新缓存</h3><p>如果你只想刷新特定步骤的缓存，可以在 Dockerfile 中做一些改变，例如修改一个文件的时间戳，以触发后续步骤的重新构建。</p><h3 id="5-使用-dockerignore-文件"><a href="#5-使用-dockerignore-文件" class="headerlink" title="5. 使用 .dockerignore 文件"></a>5. 使用 <code>.dockerignore</code> 文件</h3><p><code>.dockerignore</code> 文件可以用来指定哪些文件不需要被包含在构建上下文中，从而减少构建上下文的大小，提高构建速度。</p><h3 id="6-小心使用-COPY-和-ADD"><a href="#6-小心使用-COPY-和-ADD" class="headerlink" title="6. 小心使用 COPY 和 ADD"></a>6. 小心使用 <code>COPY</code> 和 <code>ADD</code></h3><p><code>COPY</code> 和 <code>ADD</code> 步骤会影响缓存的使用。如果源文件没有变化，那么缓存会被重用。但是如果源文件发生了变化，所有后续步骤都将无法复用缓存。所以，在使用 <code>COPY</code> 和 <code>ADD</code> 时要注意只复制必要的文件。</p><p>总之，合理使用缓存可以显著提高 Docker 镜像的构建效率。通过优化 Dockerfile 的结构和使用缓存技巧，你可以减少构建时间，提高开发效率。</p><h2 id="9-镜像的多阶段构建"><a href="#9-镜像的多阶段构建" class="headerlink" title="9.镜像的多阶段构建"></a>9.镜像的多阶段构建</h2><p>Dockerfile 的多阶段构建是一种强大的技巧，可以在构建镜像时实现更高效的资源利用和减小镜像大小。它适用于需要在构建过程中生成多个临时文件、编译代码或处理多个步骤的场景。以下是关于镜像的多阶段构建的一些技巧：</p><h3 id="1-减小镜像大小"><a href="#1-减小镜像大小" class="headerlink" title="1. 减小镜像大小"></a>1. 减小镜像大小</h3><p>多阶段构建允许你在不同的构建阶段中创建临时镜像，最终仅将需要的文件和结果复制到最终的镜像中。这样可以避免将构建时产生的临时文件和不必要的依赖包含在最终镜像中，从而减小镜像的大小。</p><h3 id="2-分隔构建过程"><a href="#2-分隔构建过程" class="headerlink" title="2. 分隔构建过程"></a>2. 分隔构建过程</h3><p>将不同的构建步骤放在不同的构建阶段中，使得每个阶段专注于一个特定的任务。这有助于保持 Dockerfile 的可读性和维护性，同时也能更好地控制每个步骤的缓存和重新构建。</p><h3 id="3-使用不同的基础镜像"><a href="#3-使用不同的基础镜像" class="headerlink" title="3. 使用不同的基础镜像"></a>3. 使用不同的基础镜像</h3><p>不同的构建阶段可以使用不同的基础镜像，以适应不同的需求。例如，一个阶段可以使用包含编译工具的基础镜像，而另一个阶段可以使用更轻量的生产环境基础镜像。</p><h3 id="4-使用-COPY-from-复制文件"><a href="#4-使用-COPY-from-复制文件" class="headerlink" title="4. 使用 COPY --from 复制文件"></a>4. 使用 <code>COPY --from</code> 复制文件</h3><p>通过使用 <code>COPY --from</code> 语法，你可以从一个构建阶段复制文件到另一个构建阶段，而不必将整个临时镜像中的文件都复制到最终镜像中。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">DockerfileCopy code<span class="hljs-comment"># 第一个阶段：编译</span><br><span class="hljs-keyword">FROM</span> golang:<span class="hljs-number">1.16</span> AS builder<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> go build -o myapp</span><br><br><span class="hljs-comment"># 第二个阶段：最终镜像</span><br><span class="hljs-keyword">FROM</span> alpine:latest<br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=builder /app/myapp /usr/bin/</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;myapp&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，最终镜像只包含了编译后的可执行文件，而不包含编译工具和源代码。</p><h3 id="5-清理不必要的文件"><a href="#5-清理不必要的文件" class="headerlink" title="5. 清理不必要的文件"></a>5. 清理不必要的文件</h3><p>在每个构建阶段的结束时，可以使用 <code>RUN</code> 命令来清理不再需要的临时文件、缓存和依赖项，以进一步减小镜像的大小。</p><p>总之，多阶段构建是一个优秀的技巧，可以创建更小、更高效的 Docker 镜像。通过在不同的阶段处理不同的任务，你可以将构建过程分割为更小的部分，并在最终镜像中仅包含必要的内容。这对于开发、测试和部署都有很大的好处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dockerfile&quot;&gt;&lt;a href=&quot;#Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile&quot;&gt;&lt;/a&gt;Dockerfile&lt;/h1&gt;&lt;h2 id=&quot;1-基础镜像的选择&quot;&gt;&lt;a href=&quot;#1-基础镜像的选择&quot; c</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="cloud" scheme="https://www.ckxgzxa.top/categories/cloud/"/>
    
    
    <category term="Docker" scheme="https://www.ckxgzxa.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>02.Docker 镜像</title>
    <link href="https://www.ckxgzxa.top/road2docker02.html"/>
    <id>https://www.ckxgzxa.top/road2docker02.html</id>
    <published>2023-08-12T14:01:23.000Z</published>
    <updated>2023-08-12T16:07:35.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h1><h2 id="1-镜像的获取方式"><a href="#1-镜像的获取方式" class="headerlink" title="1. 镜像的获取方式"></a>1. 镜像的获取方式</h2><ul><li>从 <code>registry</code> 拉取(online)<ul><li>public</li><li>private</li></ul></li><li>从 <code>Dockerfile</code> 构建(online)</li><li>从 <code>file</code> 文件导入(offline)</li></ul><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202308122209696.png"></p><h2 id="2-镜像基本操作"><a href="#2-镜像基本操作" class="headerlink" title="2. 镜像基本操作"></a>2. 镜像基本操作</h2><ul><li><p>镜像拉取</p><p>从 <code> registry</code> 下载一个镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker image pull NAME[:TAG|@DIGEST]<br></code></pre></td></tr></table></figure></li><li><p>查看镜像列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker image <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure></li><li><p>显示一个或多个镜像详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker image inspect IMAGE [IMAGE...]<br></code></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker image <span class="hljs-built_in">rm</span> [OPTIONS] IMAGE [IMAGE...]<br></code></pre></td></tr></table></figure><p><code>-f</code>, 强制删除</p></li><li><p>导出镜像文件</p><p>将一个或多个镜像保存到一个tar归档文件中（默认流式传输到标准输出）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker image save [OPTIONS] IMAGE [IMAGE...]<br></code></pre></td></tr></table></figure><p><code>--output</code> , <code>-o</code>写入文件, 而不是标准输出</p></li><li><p>导入镜像文件</p><p>从一个tar归档文件或标准输入加载一个镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker image load [OPTIONS]<br></code></pre></td></tr></table></figure><p>–input , -i 从tar归档文件中读取，而不是从标准输入读取</p></li><li><p>创建新的镜像</p><p>从容器的更改创建新的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]<br></code></pre></td></tr></table></figure><p><code>--author </code>, <code>-a</code>  作者</p><p> <code>--change</code> , <code>-c</code>   将 Dockerfile 指令应用于创建的镜像</p><p><code> --message</code> , <code>-m</code>  提交消息</p><p><code>--pause</code> , <code>-p</code>  默认为true, 在提交过程中暂停容器</p><p>从Dockerfile构建镜像</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">docker image build [OPTIONS] PATH |<span class="hljs-string"> URL </span>|<span class="hljs-string"> -</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>名称，简写</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>--add-host</code></td><td></td><td>添加自定义主机到IP映射（主机:IP）</td></tr><tr><td><code>--build-arg</code></td><td></td><td>设置构建时的变量</td></tr><tr><td><code>--cache-from</code></td><td></td><td>要视为缓存源的镜像</td></tr><tr><td><code>--cgroup-parent</code></td><td></td><td>容器的可选父cgroup</td></tr><tr><td><code>--compress</code></td><td></td><td>使用gzip压缩构建上下文</td></tr><tr><td><code>--cpu-period</code></td><td></td><td>限制CPU CFS（完全公平调度程序）周期</td></tr><tr><td><code>--cpu-quota</code></td><td></td><td>限制CPU CFS（完全公平调度程序）配额</td></tr><tr><td><code>--cpu-shares</code>，<code>-c</code></td><td></td><td>CPU份额（相对权重）</td></tr><tr><td><code>--cpuset-cpus</code></td><td></td><td>允许执行的CPU（0-3，0,1）</td></tr><tr><td><code>--cpuset-mems</code></td><td></td><td>允许执行的内存节点（0-3，0,1）</td></tr><tr><td><code>--disable-content-trust</code></td><td><code>true</code></td><td>跳过镜像验证</td></tr><tr><td><code>--file</code>，<code>-f</code></td><td></td><td>Dockerfile的名称（默认为路径/Dockerfile）</td></tr><tr><td><code>--force-rm</code></td><td></td><td>始终删除中间容器</td></tr><tr><td><code>--iidfile</code></td><td></td><td>将镜像ID写入文件</td></tr><tr><td><code>--isolation</code></td><td></td><td>容器隔离技术</td></tr><tr><td><code>--label</code></td><td></td><td>为镜像设置元数据</td></tr><tr><td><code>--memory</code>，<code>-m</code></td><td></td><td>内存限制</td></tr><tr><td><code>--memory-swap</code></td><td></td><td>交换限制等于内存加交换：-1表示启用无限交换</td></tr><tr><td><code>--network</code></td><td></td><td>设置构建期间RUN指令的网络模式</td></tr><tr><td><code>--no-cache</code></td><td></td><td>构建镜像时不使用缓存</td></tr><tr><td><code>--platform</code></td><td></td><td>如果服务器支持多平台，则设置平台</td></tr><tr><td><code>--pull</code></td><td></td><td>始终尝试拉取更新版本的镜像</td></tr><tr><td><code>--quiet</code>，<code>-q</code></td><td></td><td>抑制构建输出，并在成功时打印镜像ID</td></tr><tr><td><code>--rm</code></td><td><code>true</code></td><td>在成功构建后删除中间容器</td></tr><tr><td><code>--security-opt</code></td><td></td><td>安全选项</td></tr><tr><td><code>--shm-size</code></td><td></td><td>/dev/shm的大小</td></tr><tr><td><code>--squash</code></td><td></td><td>实验性（守护程序）将新构建的层压缩为单个新层</td></tr><tr><td><code>--tag</code>，<code>-t</code></td><td></td><td>名称和（可选）标签，格式为name:tag</td></tr><tr><td><code>--target</code></td><td></td><td>设置要构建的目标构建阶段</td></tr><tr><td><code>--ulimit</code></td><td></td><td>Ulimit选项</td></tr></tbody></table></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-镜像&quot;&gt;&lt;a href=&quot;#Docker-镜像&quot; class=&quot;headerlink&quot; title=&quot;Docker 镜像&quot;&gt;&lt;/a&gt;Docker 镜像&lt;/h1&gt;&lt;h2 id=&quot;1-镜像的获取方式&quot;&gt;&lt;a href=&quot;#1-镜像的获取方式&quot; class</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="cloud" scheme="https://www.ckxgzxa.top/categories/cloud/"/>
    
    
    <category term="Docker" scheme="https://www.ckxgzxa.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>01.Docker的安装</title>
    <link href="https://www.ckxgzxa.top/road2docker01.html"/>
    <id>https://www.ckxgzxa.top/road2docker01.html</id>
    <published>2022-11-14T14:56:24.000Z</published>
    <updated>2023-08-12T14:43:36.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h1><ul><li><p>更新库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt apt-get update<br>sudo apt-get install ca-certificates curl gnupg <br></code></pre></td></tr></table></figure></li><li><p>添加Docker <code>GPG</code> 官方密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo install -m 0755 -d /etc/apt/keyrings<br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br>sudo <span class="hljs-built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg<br></code></pre></td></tr></table></figure></li><li><p>设置Docker 源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="hljs-string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="hljs-string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$VERSION_CODENAME</span>&quot;</span>)<span class="hljs-string">&quot; stable&quot;</span> | \<br>  sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>sudo  apt-get update</code>更新库索引</p></li><li><p>安装Docker</p><ul><li><p>最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure></li><li><p>特定版本</p><ol><li><p>首先使用 <code>apt-cache madison docker-ce | awk &#39;&#123; print $3 &#125;&#39;</code>命令查看Docker版本列表</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202308121827429.png"></p></li><li><p>选择特定版本并安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">VERSION_STRING=5:23.0.3-1~ubuntu.20.04~focal<br>sudo apt-get install docker-ce=<span class="hljs-variable">$VERSION_STRING</span> docker-ce-cli=<span class="hljs-variable">$VERSION_STRING</span> containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>验证Docker被成功安装, 运行实例容器 <code>sudo docker run hello-world</code>, 可见以下输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo docker run hello-world<br><br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br><br>To generate this message, Docker took the following steps:<br> 1. The Docker client contacted the Docker daemon.<br> 2. The Docker daemon pulled the <span class="hljs-string">&quot;hello-world&quot;</span> image from the Docker Hub.<br>    (amd64)<br> 3. The Docker daemon created a new container from that image <span class="hljs-built_in">which</span> runs the<br>    executable that produces the output you are currently reading.<br> 4. The Docker daemon streamed that output to the Docker client, <span class="hljs-built_in">which</span> sent it<br>    to your terminal.<br><br>To try something more ambitious, you can run an Ubuntu container with:<br> $ docker run -it ubuntu bash<br><br>Share images, automate workflows, and more with a free Docker ID:<br> https://hub.docker.com/<br><br>For more examples and ideas, visit:<br> https://docs.docker.com/get-started/<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker的安装&quot;&gt;&lt;a href=&quot;#Docker的安装&quot; class=&quot;headerlink&quot; title=&quot;Docker的安装&quot;&gt;&lt;/a&gt;Docker的安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;更新库&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="cloud" scheme="https://www.ckxgzxa.top/categories/cloud/"/>
    
    
    <category term="Docker" scheme="https://www.ckxgzxa.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习14-常见任务</title>
    <link href="https://www.ckxgzxa.top/road2go14.html"/>
    <id>https://www.ckxgzxa.top/road2go14.html</id>
    <published>2022-11-11T16:47:36.000Z</published>
    <updated>2022-11-11T18:32:18.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习14-常见任务"><a href="#Go语言学习14-常见任务" class="headerlink" title="Go语言学习14-常见任务"></a>Go语言学习14-常见任务</h2><h3 id="内置的-JSON-解析"><a href="#内置的-JSON-解析" class="headerlink" title="内置的 JSON 解析"></a>内置的 JSON 解析</h3><p>利用反射实现, 通过 FieldTag 来标识对应的 json 值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> BasicInfo <span class="hljs-keyword">struct</span> &#123;<br>    Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span><br>    Age  <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;age&quot;`</span><br>&#125;<br><span class="hljs-keyword">type</span> JobInfo <span class="hljs-keyword">struct</span> &#123;<br>    Skills []<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;skills&quot;`</span><br>&#125;<br><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>    BasicInfo BasicInfo <span class="hljs-string">`json:&quot;basic_info&quot;`</span><br>    JobInfo   JobInfo   <span class="hljs-string">`json:&quot;job_info&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// embedded_json_test.go</span><br><span class="hljs-keyword">var</span> jsonStr = <span class="hljs-string">`&#123;</span><br><span class="hljs-string">&quot;basic_info&quot;:&#123;</span><br><span class="hljs-string">&quot;name&quot;:&quot;Mike&quot;,</span><br><span class="hljs-string">&quot;age&quot;:30</span><br><span class="hljs-string">&#125;,</span><br><span class="hljs-string">&quot;job_info&quot;:&#123;</span><br><span class="hljs-string">&quot;skills&quot;: [&quot;Java&quot;, &quot;Go&quot;, &quot;C&quot;]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;`</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestEmbeddedJson</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>e := <span class="hljs-built_in">new</span>(Employee)<br>err := json.Unmarshal([]<span class="hljs-type">byte</span>(jsonStr), e)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>t.Error(err)<br>&#125;<br>fmt.Println(*e)<br><span class="hljs-keyword">if</span> v, err := json.Marshal(e); err == <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-type">string</span>(v))<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t.Error(err)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="更快的-JSON-解析"><a href="#更快的-JSON-解析" class="headerlink" title="更快的 JSON 解析"></a>更快的 JSON 解析</h3><p>EasyJSON 采用代码生成而非反射</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211120143847.png"></p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go get -u github.com/mailru/easyjson/...<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">easyjson -all &lt;结构定义&gt;.go<br></code></pre></td></tr></table></figure><h3 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>fmt.Fprintf(w, <span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;)<br>http.HandleFunc(<span class="hljs-string">&quot;/time/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;<br>t := time.Now()<br>timeStr := fmt.Sprintf(<span class="hljs-string">&quot;&#123;\&quot;time\&quot;: \&quot;%s\&quot;&#125;&quot;</span>, t)<br>w.Write([]<span class="hljs-type">byte</span>(timeStr))<br>&#125;)<br><br>http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="路由规则"><a href="#路由规则" class="headerlink" title="路由规则"></a>路由规则</h4><ul><li><p>URL 分为两种，末尾是 / ：表示一个子树，后面可以跟其他子路径； 末尾不 是 /，表示一个叶子，固定的路径</p><p>以/ 结尾的 URL 可以匹配它的任何子路径，比如 /images 会匹配 /images/cute-cat.jpg</p></li><li><p>它采用最长匹配原则，如果有多个匹配，一定采用匹配路径最长的那个进行处</p><p>理</p></li><li><p>如果没有找到任何匹配项，会返回 404 错误</p></li></ul><h4 id="Default-Router"><a href="#Default-Router" class="headerlink" title="Default Router"></a>Default Router</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(sh serverHandler)</span></span> ServeHTTP(rw ResponseWriter, req *Request) &#123;<br>handler := sh.srv.Handler<br><span class="hljs-keyword">if</span> handler == <span class="hljs-literal">nil</span> &#123;<br>handler = DefaultServeMux<br>&#125;<br><span class="hljs-keyword">if</span> req.RequestURI == <span class="hljs-string">&quot;*&quot;</span> &amp;&amp; req.Method == <span class="hljs-string">&quot;OPTIONS&quot;</span> &#123;<br>handler = globalOptionsHandler&#123;&#125;<br>&#125;<br>handler.ServeHTTP(rw, req)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="构建Restful服务"><a href="#构建Restful服务" class="headerlink" title="构建Restful服务"></a>构建Restful服务</h4><h5 id="更好的Router"><a href="#更好的Router" class="headerlink" title="更好的Router"></a>更好的Router</h5><p><a href="https://github.com/julienschmidt/httprouter">https://github.com/julienschmidt/httprouter</a></p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Hello</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;  <br>    fmt.Fprintf(w, <span class="hljs-string">&quot;hello, %s!\n&quot;</span>, ps.ByName(<span class="hljs-string">&quot;name&quot;</span>))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    router := httprouter.New()  router.GET(<span class="hljs-string">&quot;/&quot;</span>, Index)<br>    router.GET(<span class="hljs-string">&quot;/hello/:name&quot;</span>, Hello)<br><br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, router))<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="面向资源的架构-Resource-Oriented-Architecture"><a href="#面向资源的架构-Resource-Oriented-Architecture" class="headerlink" title="面向资源的架构(Resource Oriented Architecture)"></a>面向资源的架构(Resource Oriented Architecture)</h4><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211120215896.png"></p><p>In software engineering, a <strong>resource</strong>-<strong>oriented</strong> <strong>architecture</strong> (ROA) is a style of software <strong>architecture</strong> and programming paradigm for supportive designing and developing software in the form of Internetworking of <strong>resources</strong> with “RESTful” interfaces.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>ID   <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;id&quot;`</span><br>Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span><br>Age  <span class="hljs-type">int</span>    <span class="hljs-string">`json:&quot;age&quot;`</span><br>&#125;<br><br><span class="hljs-keyword">var</span> employeeDB <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*Employee<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>employeeDB = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*Employee&#123;&#125;<br>employeeDB[<span class="hljs-string">&quot;Mike&quot;</span>] = &amp;Employee&#123;<br>ID:   <span class="hljs-string">&quot;e-1&quot;</span>,<br>Name: <span class="hljs-string">&quot;Mike&quot;</span>,<br>Age:  <span class="hljs-number">35</span>,<br>&#125;<br>employeeDB[<span class="hljs-string">&quot;Rose&quot;</span>] = &amp;Employee&#123;<br>ID:   <span class="hljs-string">&quot;e-2&quot;</span>,<br>Name: <span class="hljs-string">&quot;Rose&quot;</span>,<br>Age:  <span class="hljs-number">45</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request, _ httprouter.Params)</span></span> &#123;<br>fmt.Fprint(w, <span class="hljs-string">&quot;Welcome!\n&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetEmployeeByName</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request, ps httprouter.Params)</span></span> &#123;<br>qName := ps.ByName(<span class="hljs-string">&quot;name&quot;</span>)<br><span class="hljs-keyword">var</span> (<br>ok       <span class="hljs-type">bool</span><br>info     *Employee<br>infoJson []<span class="hljs-type">byte</span><br>err      <span class="hljs-type">error</span><br>)<br><span class="hljs-keyword">if</span> info, ok = employeeDB[qName]; !ok &#123;<br>w.Write([]<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;&#123;\&quot;error\&quot;:\&quot;Not Found\&quot;&#125;&quot;</span>))<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> infoJson, err = json.Marshal(info); err != <span class="hljs-literal">nil</span> &#123;<br>w.Write([]<span class="hljs-type">byte</span>(fmt.Sprintf(<span class="hljs-string">&quot;&#123;\&quot;error\&quot;:,\&quot;%s\&quot;&#125;&quot;</span>, err)))<br><span class="hljs-keyword">return</span><br>&#125;<br>w.Write(infoJson)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := httprouter.New()<br>router.GET(<span class="hljs-string">&quot;/&quot;</span>, Index)<br>router.GET(<span class="hljs-string">&quot;/employees/:name&quot;</span>, GetEmployeeByName)<br><br>log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;localhost:8080&quot;</span>, router))<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习14-常见任务&quot;&gt;&lt;a href=&quot;#Go语言学习14-常见任务&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习14-常见任务&quot;&gt;&lt;/a&gt;Go语言学习14-常见任务&lt;/h2&gt;&lt;h3 id=&quot;内置的-JSON-解析&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习13-常见软件架构的实现</title>
    <link href="https://www.ckxgzxa.top/road2go13.html"/>
    <id>https://www.ckxgzxa.top/road2go13.html</id>
    <published>2022-11-11T10:45:41.000Z</published>
    <updated>2022-11-11T17:17:04.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习13-常见软件架构的实现"><a href="#Go语言学习13-常见软件架构的实现" class="headerlink" title="Go语言学习13-常见软件架构的实现"></a>Go语言学习13-常见软件架构的实现</h2><h3 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h3><p>An <font color="blue">architectural pattern</font> is a general, <strong>reusable solution</strong> to a commonly occurring problem in <font color="blue">software architectural</font> within a given context. ——wikipedia</p><h3 id="Pipe-Filter-架构"><a href="#Pipe-Filter-架构" class="headerlink" title="Pipe-Filter 架构"></a>Pipe-Filter 架构</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211111857702.png"></p><h4 id="Pipe-Filter-模式"><a href="#Pipe-Filter-模式" class="headerlink" title="Pipe-Filter 模式"></a>Pipe-Filter 模式</h4><ul><li><p>非常适合于数据处理及数据分析系统</p></li><li><p>Filter 封装数据处理的功能</p></li><li><p>松耦合: Filter只跟数据(格式) 耦合</p></li><li><p>Pipe用于连接 Filter 传递数据或者在异步处理过程中缓冲数据流</p><p>进程内同步调用时, pipe 演变为数据在方法调用间传递</p></li></ul><h4 id="Filter和组合模式"><a href="#Filter和组合模式" class="headerlink" title="Filter和组合模式"></a>Filter和组合模式</h4><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211111911415.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211111911920.png"></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211111924672.png" style="zoom:25%;" /><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// filter.go</span><br><span class="hljs-comment">// Package pipefilter is to define the interfaces</span><br><span class="hljs-comment">// and the structures for pipe-filter style implementation</span><br><span class="hljs-keyword">package</span> pipefilter<br><br><span class="hljs-comment">// Request is the input of the filter</span><br><span class="hljs-keyword">type</span> Request <span class="hljs-keyword">interface</span>&#123;&#125;<br><br><span class="hljs-comment">// Response is the output of the filter</span><br><span class="hljs-keyword">type</span> Response <span class="hljs-keyword">interface</span>&#123;&#125;<br><br><span class="hljs-comment">// Filter interface is the definition of the data processing components</span><br><span class="hljs-comment">// Pipe-Filter structure</span><br><span class="hljs-keyword">type</span> Filter <span class="hljs-keyword">interface</span> &#123;<br>Process(data Request) (Response, <span class="hljs-type">error</span>)<br>&#125;<br><br><span class="hljs-comment">// split_filter.go</span><br><span class="hljs-keyword">package</span> pipefilter<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> SplitFilterWrongFormatError = errors.New(<span class="hljs-string">&quot;input data should be string&quot;</span>)<br><br><span class="hljs-keyword">type</span> SplitFilter <span class="hljs-keyword">struct</span> &#123;<br>delimiter <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewSplitFilter</span><span class="hljs-params">(delimiter <span class="hljs-type">string</span>)</span></span> *SplitFilter &#123;<br><span class="hljs-keyword">return</span> &amp;SplitFilter&#123;delimiter&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(sf *SplitFilter)</span></span> Process(data Request) (Response, <span class="hljs-type">error</span>) &#123;<br>str, ok := data.(<span class="hljs-type">string</span>) <span class="hljs-comment">// 检查数据格式/类型, 是否可以处理</span><br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, SplitFilterWrongFormatError<br>&#125;<br>parts := strings.Split(str, sf.delimiter)<br><span class="hljs-keyword">return</span> parts, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// to_int_filter.go</span><br><span class="hljs-keyword">package</span> pipefilter<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;strconv&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> ToIntFilterWrongFormatError = errors.New(<span class="hljs-string">&quot;input data should be []string&quot;</span>)<br><br><span class="hljs-keyword">type</span> ToIntFilter <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewToIntFilter</span><span class="hljs-params">()</span></span> *ToIntFilter &#123;<br><span class="hljs-keyword">return</span> &amp;ToIntFilter&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(tif *ToIntFilter)</span></span> Process(data Request) (Response, <span class="hljs-type">error</span>) &#123;<br>parts, ok := data.([]<span class="hljs-type">string</span>)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, ToIntFilterWrongFormatError<br>&#125;<br>ret := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> _, part := <span class="hljs-keyword">range</span> parts &#123;<br>s, err := strconv.Atoi(part)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>ret = <span class="hljs-built_in">append</span>(ret, s)<br>&#125;<br><span class="hljs-keyword">return</span> ret, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// sum_filter.go</span><br><span class="hljs-keyword">package</span> pipefilter<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;errors&quot;</span><br><br><span class="hljs-keyword">var</span> SumFilterWrongFormatError = errors.New(<span class="hljs-string">&quot;input data should be []int&quot;</span>)<br><br><span class="hljs-keyword">type</span> SumFilter <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewSumFilter</span><span class="hljs-params">()</span></span> *SumFilter &#123;<br><span class="hljs-keyword">return</span> &amp;SumFilter&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(sf *SumFilter)</span></span> Process(data Request) (Response, <span class="hljs-type">error</span>) &#123;<br>elems, ok := data.([]<span class="hljs-type">int</span>)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, SumFilterWrongFormatError<br>&#125;<br>ret := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, elem := <span class="hljs-keyword">range</span> elems &#123;<br>ret += elem<br>&#125;<br><span class="hljs-keyword">return</span> ret, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">// straight_pipeline.go</span><br><span class="hljs-keyword">package</span> pipefilter<br><br><span class="hljs-comment">// StraightPipeline is composed of the filters, and the filters are piled as a straight line.</span><br><span class="hljs-keyword">type</span> StraightPipeline <span class="hljs-keyword">struct</span> &#123;<br>Name    <span class="hljs-type">string</span><br>Filters *[]Filter<br>&#125;<br><br><span class="hljs-comment">// NewStraightPipeline create a new StraightPipelineWithWallTime</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewStraightPipeline</span><span class="hljs-params">(name <span class="hljs-type">string</span>, filters ...Filter)</span></span> *StraightPipeline &#123;<br><span class="hljs-keyword">return</span> &amp;StraightPipeline&#123;<br>Name:    name,<br>Filters: &amp;filters,<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Process is to process the coming data by the pipeline</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f *StraightPipeline)</span></span> Process(data Request) (Response, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">var</span> ret <span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-keyword">for</span> _, filter := <span class="hljs-keyword">range</span> *f.Filters &#123;<br>ret, err = filter.Process(data)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> ret, err<br>&#125;<br>data = ret<br>&#125;<br><span class="hljs-keyword">return</span> ret, err<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Micro-Kernel架构"><a href="#Micro-Kernel架构" class="headerlink" title="Micro Kernel架构"></a>Micro Kernel架构</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211120114863.png"></p><ul><li>特点<ul><li>易于扩展</li><li>错误隔离</li><li>保持架构一致性</li></ul></li><li>要点<ul><li>内核包含公共流程或通用逻辑</li><li>将可变或可扩展部分规划为扩展点</li><li>抽象扩展点行为, 定义接口</li><li>利用插件进行扩展</li></ul></li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211120116741.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> microkernel<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>Waiting = <span class="hljs-literal">iota</span><br>Running<br>)<br><br><span class="hljs-keyword">var</span> WrongStateError = errors.New(<span class="hljs-string">&quot;can not take the operation in the current state&quot;</span>)<br><br><span class="hljs-keyword">type</span> CollectorsError <span class="hljs-keyword">struct</span> &#123;<br>CollectorsErrors []<span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ce CollectorsError)</span></span> Error() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">var</span> strs []<span class="hljs-type">string</span><br><span class="hljs-keyword">for</span> _, err := <span class="hljs-keyword">range</span> ce.CollectorsErrors &#123;<br>strs = <span class="hljs-built_in">append</span>(strs, err.Error())<br>&#125;<br><span class="hljs-keyword">return</span> strings.Join(strs, <span class="hljs-string">&quot;;&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> Event <span class="hljs-keyword">struct</span> &#123;<br>Source  <span class="hljs-type">string</span><br>Content <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> EventReceiver <span class="hljs-keyword">interface</span> &#123;<br>OnEvent(evt Event)<br>&#125;<br><br><span class="hljs-keyword">type</span> Collector <span class="hljs-keyword">interface</span> &#123;<br>Init(evtReceiver EventReceiver) <span class="hljs-type">error</span><br>Start(agtCtx context.Context) <span class="hljs-type">error</span><br>Stop() <span class="hljs-type">error</span><br>Destroy() <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Agent <span class="hljs-keyword">struct</span> &#123;<br>collectors <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]Collector<br>evtBuf     <span class="hljs-keyword">chan</span> Event<br>cancel     context.CancelFunc<br>ctx        context.Context<br>state      <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(agt *Agent)</span></span> EventProcessGroutine() &#123;<br><span class="hljs-keyword">var</span> evtSeg [<span class="hljs-number">10</span>]Event<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> evtSeg[i] = &lt;-agt.evtBuf:<br><span class="hljs-keyword">case</span> &lt;-agt.ctx.Done():<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>fmt.Println(evtSeg)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewAgent</span><span class="hljs-params">(sizeEvtBuf <span class="hljs-type">int</span>)</span></span> *Agent &#123;<br>agt := Agent&#123;<br>collectors: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]Collector&#123;&#125;,<br>evtBuf:     <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> Event, sizeEvtBuf),<br>state:      Waiting,<br>&#125;<br><br><span class="hljs-keyword">return</span> &amp;agt<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(agt *Agent)</span></span> RegisterCollector(name <span class="hljs-type">string</span>, collector Collector) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> agt.state != Waiting &#123;<br><span class="hljs-keyword">return</span> WrongStateError<br>&#125;<br>agt.collectors[name] = collector<br><span class="hljs-keyword">return</span> collector.Init(agt)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(agt *Agent)</span></span> startCollectors() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-keyword">var</span> errs CollectorsError<br><span class="hljs-keyword">var</span> mutex sync.Mutex<br><br><span class="hljs-keyword">for</span> name, collector := <span class="hljs-keyword">range</span> agt.collectors &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(name <span class="hljs-type">string</span>, collector Collector, ctx context.Context)</span></span> &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>mutex.Unlock()<br>&#125;()<br>err = collector.Start(ctx)<br>mutex.Lock()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>errs.CollectorsErrors = <span class="hljs-built_in">append</span>(errs.CollectorsErrors,<br>errors.New(name+<span class="hljs-string">&quot;:&quot;</span>+err.Error()))<br>&#125;<br>&#125;(name, collector, agt.ctx)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(errs.CollectorsErrors) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> errs<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(agt *Agent)</span></span> stopCollectors() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-keyword">var</span> errs CollectorsError<br><span class="hljs-keyword">for</span> name, collector := <span class="hljs-keyword">range</span> agt.collectors &#123;<br><span class="hljs-keyword">if</span> err = collector.Stop(); err != <span class="hljs-literal">nil</span> &#123;<br>errs.CollectorsErrors = <span class="hljs-built_in">append</span>(errs.CollectorsErrors,<br>errors.New(name+<span class="hljs-string">&quot;:&quot;</span>+err.Error()))<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(errs.CollectorsErrors) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> errs<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(agt *Agent)</span></span> destroyCollectors() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-keyword">var</span> errs CollectorsError<br><span class="hljs-keyword">for</span> name, collector := <span class="hljs-keyword">range</span> agt.collectors &#123;<br><span class="hljs-keyword">if</span> err = collector.Destroy(); err != <span class="hljs-literal">nil</span> &#123;<br>errs.CollectorsErrors = <span class="hljs-built_in">append</span>(errs.CollectorsErrors,<br>errors.New(name+<span class="hljs-string">&quot;:&quot;</span>+err.Error()))<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(errs.CollectorsErrors) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span> errs<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(agt *Agent)</span></span> Start() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> agt.state != Waiting &#123;<br><span class="hljs-keyword">return</span> WrongStateError<br>&#125;<br>agt.state = Running<br>agt.ctx, agt.cancel = context.WithCancel(context.Background())<br><span class="hljs-keyword">go</span> agt.EventProcessGroutine()<br><span class="hljs-keyword">return</span> agt.startCollectors()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(agt *Agent)</span></span> Stop() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> agt.state != Running &#123;<br><span class="hljs-keyword">return</span> WrongStateError<br>&#125;<br>agt.state = Waiting<br>agt.cancel()<br><span class="hljs-keyword">return</span> agt.stopCollectors()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(agt *Agent)</span></span> Destroy() <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">if</span> agt.state != Waiting &#123;<br><span class="hljs-keyword">return</span> WrongStateError<br>&#125;<br><span class="hljs-keyword">return</span> agt.destroyCollectors()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(agt *Agent)</span></span> OnEvent(evt Event) &#123;<br>agt.evtBuf &lt;- evt<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习13-常见软件架构的实现&quot;&gt;&lt;a href=&quot;#Go语言学习13-常见软件架构的实现&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习13-常见软件架构的实现&quot;&gt;&lt;/a&gt;Go语言学习13-常见软件架构的实现&lt;/h2&gt;&lt;h3 id=&quot;架</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习12-反射和Unsafe</title>
    <link href="https://www.ckxgzxa.top/road2go12.html"/>
    <id>https://www.ckxgzxa.top/road2go12.html</id>
    <published>2022-11-11T05:55:01.000Z</published>
    <updated>2022-11-11T10:46:26.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习12-反射和Unsafe"><a href="#Go语言学习12-反射和Unsafe" class="headerlink" title="Go语言学习12-反射和Unsafe"></a>Go语言学习12-反射和Unsafe</h2><h3 id="reflect-TypeOf-vs-reflect-ValueOf"><a href="#reflect-TypeOf-vs-reflect-ValueOf" class="headerlink" title="reflect.TypeOf vs. reflect.ValueOf"></a>reflect.TypeOf vs. reflect.ValueOf</h3><ul><li>reflect.TypeOf 返回类型 (reflect.Type)</li><li>reflect.ValueOf 返回类型 (reflect.Value)</li><li>可以从 reflect.Value 获得类型</li><li>通过 kind 来判断类型</li></ul><h3 id="判断类型——Kind"><a href="#判断类型——Kind" class="headerlink" title="判断类型——Kind()"></a>判断类型——Kind()</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CheckType</span><span class="hljs-params">(v <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>t := reflect.TypeOf(v)<br><span class="hljs-keyword">switch</span> t.Kind() &#123;<br><span class="hljs-keyword">case</span> reflect.Float32, reflect.Float64:<br>fmt.Println(<span class="hljs-string">&quot;Float&quot;</span>)<br><span class="hljs-keyword">case</span> reflect.Int, reflect.Int32, reflect.Int64:<br>fmt.Println(<span class="hljs-string">&quot;Integer&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;Unknown&quot;</span>, t)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="利用反射编写灵活的代码"><a href="#利用反射编写灵活的代码" class="headerlink" title="利用反射编写灵活的代码"></a>利用反射编写灵活的代码</h3><h4 id="按名字访问结构的成员"><a href="#按名字访问结构的成员" class="headerlink" title="按名字访问结构的成员"></a>按名字访问结构的成员</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">reflect.ValueOf(*e).FieldByName(<span class="hljs-string">&quot;Name&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="按名字访问结构的方法"><a href="#按名字访问结构的方法" class="headerlink" title="按名字访问结构的方法"></a>按名字访问结构的方法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">reflect.ValueOf(e).MethodByName(<span class="hljs-string">&quot;UpdateAge&quot;</span>).Call([]reflect.Value&#123;reflect.ValueOf(<span class="hljs-number">1</span>)&#125;)<br></code></pre></td></tr></table></figure><h3 id="Struct-Tag"><a href="#Struct-Tag" class="headerlink" title="Struct Tag"></a>Struct Tag</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> BasicInfo <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span><br>Age  <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;age&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="访问-StructTag"><a href="#访问-StructTag" class="headerlink" title="访问 StructTag"></a>访问 StructTag</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> nameField, ok := reflect.TypeOf(*e).FieldByName(<span class="hljs-string">&quot;Name&quot;</span>); !ok &#123;<br>t.Error(<span class="hljs-string">&quot;Failed to get &#x27;Name&#x27; field.&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t.Log(<span class="hljs-string">&quot;Tag:format&quot;</span>, nameField.Tag.Get(<span class="hljs-string">&quot;format&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Reflect.Type 和 Reflect.Value 都有 FieldByName ⽅方法，注意他们的区别</p></blockquote><h3 id="万能程序"><a href="#万能程序" class="headerlink" title="万能程序"></a>万能程序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FillBySettings</span><span class="hljs-params">(st <span class="hljs-keyword">interface</span>&#123;&#125;, settings <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-comment">// func(v value) Elem() Value</span><br><span class="hljs-comment">// elem returns the value that the interface v contains or that the pointer v points to.</span><br><span class="hljs-comment">// It panics if v&#x27;s Kind is not Interface or Ptr</span><br><span class="hljs-comment">// It returns the zero Value if v is nil.</span><br><br><span class="hljs-keyword">if</span> reflect.TypeOf(st).Kind() != reflect.Ptr &#123;<br><span class="hljs-comment">// Elem() 获取指针指向的值</span><br><span class="hljs-keyword">if</span> reflect.TypeOf(st).Elem().Kind() != reflect.Struct &#123;<br><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;the first param should be a pointer to the struct type&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> settings == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;settings is nil&quot;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> (<br>field reflect.StructField<br>ok    <span class="hljs-type">bool</span><br>)<br><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> settings &#123;<br><span class="hljs-keyword">if</span> field, ok = (reflect.ValueOf(st)).Elem().Type().FieldByName(k); !ok &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-keyword">if</span> field.Type == reflect.TypeOf(v) &#123;<br>vstr := reflect.ValueOf(st)<br>vstr = vstr.Elem()<br>vstr.FieldByName(k).Set(reflect.ValueOf(v))<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反射的特点"><a href="#反射的特点" class="headerlink" title="反射的特点"></a>反射的特点</h3><ul><li>提高了程序的灵活性</li><li>降低了程序的可读性</li><li>降低了程序的性能</li></ul><h3 id="“不安全”-编程"><a href="#“不安全”-编程" class="headerlink" title="“不安全” 编程"></a>“不安全” 编程</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestUnsafe</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>i := <span class="hljs-number">10</span><br>f := *(*<span class="hljs-type">float64</span>)(unsafe.Pointer(&amp;i))<br>t.Log(unsafe.Pointer(&amp;i))<br>t.Log(f)<br>&#125;<br><br><span class="hljs-comment">// The cases is suitable for unsafe</span><br><span class="hljs-keyword">type</span> MyInt <span class="hljs-type">int</span><br><br><span class="hljs-comment">// 合理的类型转换</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestConvert</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>a := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>b := *(*[]MyInt)(unsafe.Pointer(&amp;a))<br>t.Log(b)<br>&#125;<br><br><span class="hljs-comment">// 原子类型操作</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestAtomic</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> shareBufPtr unsafe.Pointer<br>writeDataFn := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>data := []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>data = <span class="hljs-built_in">append</span>(data, i)<br>&#125;<br>atomic.StorePointer(&amp;shareBufPtr, unsafe.Pointer(&amp;data))<br>&#125;<br>readDataFn := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>data := atomic.LoadPointer(&amp;shareBufPtr)<br>fmt.Println(data, *(*[]<span class="hljs-type">int</span>)(data))<br>&#125;<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br>writeDataFn()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>writeDataFn()<br>time.Sleep(time.Microsecond * <span class="hljs-number">100</span>)<br>&#125;<br>wg.Done()<br>&#125;()<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>readDataFn()<br>time.Sleep(time.Microsecond * <span class="hljs-number">100</span>)<br>&#125;<br>wg.Done()<br>&#125;()<br>&#125;<br>wg.Wait()<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习12-反射和Unsafe&quot;&gt;&lt;a href=&quot;#Go语言学习12-反射和Unsafe&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习12-反射和Unsafe&quot;&gt;&lt;/a&gt;Go语言学习12-反射和Unsafe&lt;/h2&gt;&lt;h3 id=&quot;r</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习11-测试</title>
    <link href="https://www.ckxgzxa.top/road2go11.html"/>
    <id>https://www.ckxgzxa.top/road2go11.html</id>
    <published>2022-11-10T19:47:58.000Z</published>
    <updated>2022-11-11T05:54:39.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习11-测试"><a href="#Go语言学习11-测试" class="headerlink" title="Go语言学习11-测试"></a>Go语言学习11-测试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// functions.go</span><br><span class="hljs-keyword">package</span> testing<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">square</span><span class="hljs-params">(op <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> op * op<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// functions_test.go</span><br><span class="hljs-keyword">package</span> testing<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;github.com/stretchr/testify/assert&quot;</span><br><span class="hljs-string">&quot;testing&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSquare</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>inputs := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>expected := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(inputs); i++ &#123;<br>ret := square(inputs[i])<br>assert.Equal(t, expected[i], ret)<br><span class="hljs-comment">//if ret != expected[i] &#123;</span><br><span class="hljs-comment">//t.Errorf(&quot;input is %d, the expcted is %d, the actual %d&quot;,</span><br><span class="hljs-comment">//inputs[i], expected[i], ret)</span><br><span class="hljs-comment">//&#125;</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestErrorInCode</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Start&quot;</span>)<br>t.Error(<span class="hljs-string">&quot;Error&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;End&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFailInCode</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Start&quot;</span>)<br>t.Fatal(<span class="hljs-string">&quot;Error&quot;</span>)<br>fmt.Println(<span class="hljs-string">&quot;End&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="内置单元测试框架"><a href="#内置单元测试框架" class="headerlink" title="内置单元测试框架"></a>内置单元测试框架</h4><ul><li><p>Fail, Error: 该测试失败, 该测试继续, 其他测试继续执行</p></li><li><p>FailNow, Fatal: 该测试失败, 该测试中止, 其他测试继续执行</p></li><li><p>代码覆盖率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go <span class="hljs-built_in">test</span> -v -cover<br></code></pre></td></tr></table></figure></li><li><p>断言<a href="https://github.com/stretchr/testify">https://github.com/stretchr/testify</a></p></li></ul><h3 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkConcatStringByAdd</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br><span class="hljs-comment">// 与性能测试无关的代码</span><br>b.ResetTimer()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br><span class="hljs-comment">// 测试代码</span><br>&#125;<br>b.StopTimer()<br>    <span class="hljs-comment">// 与性能测试无关的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="benchmark命令"><a href="#benchmark命令" class="headerlink" title="benchmark命令"></a>benchmark命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go <span class="hljs-built_in">test</span> -bench=. -benchmem<br></code></pre></td></tr></table></figure><p>-bench=&lt;相关benchmark测试&gt;</p><p>Windows下使用<code>go test</code>命令行时, <code>-bench=.</code> 应写为 <code>-bench=&quot;.&quot;</code></p><h3 id="Behavior-Driven-Development"><a href="#Behavior-Driven-Development" class="headerlink" title="Behavior Driven Development"></a>Behavior Driven Development</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211110432503.png" alt="让业务领域的专家参与开发"></p><p><em>“I believe that the hardest part of software projects, the most common source of project failure, is <strong>communication</strong> with the customers and users of that software. By providing a clear yet precise language to deal with domains, a DSL can help improve this communication.” – Martin Fowler.</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211110434362.png" alt="用业务领域的语言来描述"></p><h4 id="BDD-in-Go"><a href="#BDD-in-Go" class="headerlink" title="BDD in Go"></a>BDD in Go</h4><h5 id="项目网站"><a href="#项目网站" class="headerlink" title="项目网站"></a>项目网站</h5><p><a href="https://github.com/smartystreets/goconvey">https://github.com/smartystreets/goconvey</a></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go get -u github.com/smartystreets/goconvey/convey<br></code></pre></td></tr></table></figure><h5 id="启动-web-ui"><a href="#启动-web-ui" class="headerlink" title="启动 web ui"></a>启动 web ui</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$GOPATH</span>/bin/goconvey<br></code></pre></td></tr></table></figure><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSpec</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-comment">// Only pass t into top-level Convey calls</span><br>Convey(<span class="hljs-string">&quot;Given 2 even numbers&quot;</span>, t, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-number">2</span><br>b := <span class="hljs-number">4</span><br><br>Convey(<span class="hljs-string">&quot;When add the two numbers&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>c := a + b<br><br>Convey(<span class="hljs-string">&quot;Then the result is still even&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>So(c%<span class="hljs-number">2</span>, ShouldEqual, <span class="hljs-number">0</span>)<br>&#125;)<br>&#125;)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习11-测试&quot;&gt;&lt;a href=&quot;#Go语言学习11-测试&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习11-测试&quot;&gt;&lt;/a&gt;Go语言学习11-测试&lt;/h2&gt;&lt;h3 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习10-sync.Pool对象缓存</title>
    <link href="https://www.ckxgzxa.top/road2go10.html"/>
    <id>https://www.ckxgzxa.top/road2go10.html</id>
    <published>2022-11-10T19:08:16.000Z</published>
    <updated>2022-11-10T19:48:38.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习10-sync-Pool对象缓存"><a href="#Go语言学习10-sync-Pool对象缓存" class="headerlink" title="Go语言学习10-sync.Pool对象缓存"></a>Go语言学习10-sync.Pool对象缓存</h2><h3 id="sync-Pool-对象获取"><a href="#sync-Pool-对象获取" class="headerlink" title="sync.Pool 对象获取"></a><code>sync.Pool</code> 对象获取</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211110340058.png"></p><ul><li>尝试从私有对象获取</li><li>私有对象不存在, 尝试从当前 Processor 的共享池获取</li><li>如果当前 Processor 共享池也是空的, name就尝试去其他 Processor 的共享池获取</li><li>如果所有子池都是空的, 最后就用用户指定的 New 函数产生一个新的对象返回</li></ul><h3 id="sync-Pool-对象的放回"><a href="#sync-Pool-对象的放回" class="headerlink" title="sync.Pool 对象的放回"></a><code>sync.Pool</code> 对象的放回</h3><ul><li>如果私有对象不存在则保存为私有对象</li><li>如果私有对象存在, 放入当前 Processor 子池的共享池中</li></ul><h3 id="使用-sync-Pool"><a href="#使用-sync-Pool" class="headerlink" title="使用 sync.Pool"></a>使用 <code>sync.Pool</code></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">pool := &amp;sync.Pool&#123;<br>New: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;,<br>&#125;<br><br>arry := pool.Get().(<span class="hljs-type">int</span>)<br>...<br>pool.Put(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h3 id="sync-Pool-对象的生命周期"><a href="#sync-Pool-对象的生命周期" class="headerlink" title="sync.Pool 对象的生命周期"></a><code>sync.Pool</code> 对象的生命周期</h3><ul><li>GC 会清除 sync.pool 缓存的对象</li><li>对象的缓存有效期为下一次 GC 之前</li></ul><h3 id="sync-Pool-总结"><a href="#sync-Pool-总结" class="headerlink" title="sync.Pool  总结"></a><code>sync.Pool</code>  总结</h3><ul><li>适合于通过复用, 降低复杂对象的创建 和 GC 代价</li><li>协程安全, <font color="red">会有锁的开销</font></li><li><font color="red">声明周期受 GC 影响, 不适合于做连接池等, 需自己管理声明周期的资源的池化</font></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习10-sync-Pool对象缓存&quot;&gt;&lt;a href=&quot;#Go语言学习10-sync-Pool对象缓存&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习10-sync.Pool对象缓存&quot;&gt;&lt;/a&gt;Go语言学习10-sync.Pool对象</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习09-典型并发任务</title>
    <link href="https://www.ckxgzxa.top/road2go09.html"/>
    <id>https://www.ckxgzxa.top/road2go09.html</id>
    <published>2022-11-10T17:28:05.000Z</published>
    <updated>2022-11-10T19:08:05.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习09-典型并发任务"><a href="#Go语言学习09-典型并发任务" class="headerlink" title="Go语言学习09-典型并发任务"></a>Go语言学习09-典型并发任务</h2><h3 id="单例模式-懒汉式-线程安全"><a href="#单例模式-懒汉式-线程安全" class="headerlink" title="单例模式(懒汉式, 线程安全)"></a>单例模式(懒汉式, 线程安全)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Singleton <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">var</span> singleInstance *Singleton<br><span class="hljs-keyword">var</span> once sync.Once<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetSingletonObj</span><span class="hljs-params">()</span></span> *Singleton &#123;<br>once.Do(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Create Obj&quot;</span>)<br>singleInstance = <span class="hljs-built_in">new</span>(Singleton)<br>&#125;)<br><span class="hljs-keyword">return</span> singleInstance<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestGetSingletonObj</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>obj := GetSingletonObj()<br>fmt.Println(unsafe.Pointer(obj))<br>wg.Done()<br>&#125;()<br>&#125;<br>wg.Wait()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="场景01-仅需任意任务完成"><a href="#场景01-仅需任意任务完成" class="headerlink" title="场景01: 仅需任意任务完成"></a>场景01: 仅需任意任务完成</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runTask</span><span class="hljs-params">(id <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>time.Sleep(<span class="hljs-number">10</span> * time.Millisecond)<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;The result is from %d&quot;</span>, id)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FirstResponse</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br>numOfRunner := <span class="hljs-number">10</span><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, numOfRunner)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; numOfRunner; i++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> &#123;<br>ret := runTask(i)<br>ch &lt;- ret<br>&#125;(i)<br>&#125;<br><span class="hljs-keyword">return</span> &lt;-ch<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFirstResponse</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>t.Log(<span class="hljs-string">&quot;Before:&quot;</span>, runtime.NumGoroutine())<br>t.Log(FirstResponse())<br>time.Sleep(time.Second * <span class="hljs-number">1</span>)<br>t.Log(<span class="hljs-string">&quot;After:&quot;</span>, runtime.NumGoroutine())<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="场景02-等待所有任务完成"><a href="#场景02-等待所有任务完成" class="headerlink" title="场景02: 等待所有任务完成"></a>场景02: 等待所有任务完成</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">runTask</span><span class="hljs-params">(id <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>time.Sleep(<span class="hljs-number">10</span> * time.Millisecond)<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;The result is from %d&quot;</span>, id)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AllResponse</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br>numOfRunner := <span class="hljs-number">10</span><br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, numOfRunner)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; numOfRunner; i++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> &#123;<br>ret := runTask(i)<br>ch &lt;- ret<br>&#125;(i)<br>&#125;<br>finalRet := <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; numOfRunner; j++ &#123;<br>finalRet += &lt;-ch + <span class="hljs-string">&quot;\n&quot;</span><br>&#125;<br><span class="hljs-keyword">return</span> finalRet<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestFirstResponse</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>t.Log(<span class="hljs-string">&quot;Before:&quot;</span>, runtime.NumGoroutine())<br>t.Log(AllResponse())<br>time.Sleep(time.Second * <span class="hljs-number">1</span>)<br>t.Log(<span class="hljs-string">&quot;After:&quot;</span>, runtime.NumGoroutine())<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实现池化"><a href="#实现池化" class="headerlink" title="实现池化"></a>实现池化</h3><h4 id="使用-buffered-channel-实现对象池"><a href="#使用-buffered-channel-实现对象池" class="headerlink" title="使用 buffered channel 实现对象池"></a>使用 buffered channel 实现对象池</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ReusableObj <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">type</span> ObjPool <span class="hljs-keyword">struct</span> &#123;<br>bufChan <span class="hljs-keyword">chan</span> *ReusableObj <span class="hljs-comment">// 用于缓冲可重用对象</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewObjPool</span><span class="hljs-params">(numOfObj <span class="hljs-type">int</span>)</span></span> *ObjPool &#123;<br>objPool := ObjPool&#123;&#125;<br>objPool.bufChan = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> *ReusableObj, numOfObj)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; numOfObj; i++ &#123;<br>objPool.bufChan &lt;- &amp;ReusableObj&#123;&#125;<br>&#125;<br><span class="hljs-keyword">return</span> &amp;objPool<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *ObjPool)</span></span> GetObj(timeout time.Duration) (*ReusableObj, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> ret := &lt;-p.bufChan:<br><span class="hljs-keyword">return</span> ret, <span class="hljs-literal">nil</span><br><span class="hljs-keyword">case</span> &lt;-time.After(timeout): <span class="hljs-comment">// 超时控制</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;time out&quot;</span>)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *ObjPool)</span></span> ReleaseObj(obj *ReusableObj) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> p.bufChan &lt;- obj:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;overflow&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习09-典型并发任务&quot;&gt;&lt;a href=&quot;#Go语言学习09-典型并发任务&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习09-典型并发任务&quot;&gt;&lt;/a&gt;Go语言学习09-典型并发任务&lt;/h2&gt;&lt;h3 id=&quot;单例模式-懒汉式-线程安全</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习08-并发编程</title>
    <link href="https://www.ckxgzxa.top/road2go08.html"/>
    <id>https://www.ckxgzxa.top/road2go08.html</id>
    <published>2022-11-10T05:08:07.000Z</published>
    <updated>2022-11-10T19:04:02.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习08-并发编程"><a href="#Go语言学习08-并发编程" class="headerlink" title="Go语言学习08-并发编程"></a>Go语言学习08-并发编程</h2><h3 id="Thread-vs-Groutine"><a href="#Thread-vs-Groutine" class="headerlink" title="Thread vs. Groutine"></a>Thread vs. Groutine</h3><ol><li><p>创建时默认的stack的大小</p><ul><li>JDK5 以后 Java Thread stack 默认为 1M</li><li>Groutine 的 Stack 初始化大小为 2K</li></ul></li><li><p>和 KSE (Kernel Space Entity) 的对应关系</p><ul><li>Java Thread 是 1:1 </li><li>Groutine 是 M:N</li></ul><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211101405748.png"></p></li></ol><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211110251760.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestGroutine</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Println(i)<br>&#125;(i)<br>&#125;<br>time.Sleep(time.Millisecond * <span class="hljs-number">50</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="共享内存并发机制"><a href="#共享内存并发机制" class="headerlink" title="共享内存并发机制"></a>共享内存并发机制</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCounterThreadSafe</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> mut sync.Mutex<br>counter := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>mut.Unlock()<br>&#125;()<br>mut.Lock()<br>counter++<br>&#125;()<br>&#125;<br>time.Sleep(<span class="hljs-number">1</span> * time.Second)<br>t.Logf(<span class="hljs-string">&quot;counter = %d&quot;</span>, counter)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCounterWaitGroup</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> mut sync.Mutex<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br>counter := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++ &#123;<br>wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>mut.Unlock()<br>&#125;()<br>mut.Lock()<br>counter++<br>wg.Done()<br>&#125;()<br>&#125;<br>wg.Wait()<br>t.Logf(<span class="hljs-string">&quot;counter = %d&quot;</span>, counter)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSP并发机制"><a href="#CSP并发机制" class="headerlink" title="CSP并发机制"></a>CSP并发机制</h3><h4 id="CSP-vs-Actor"><a href="#CSP-vs-Actor" class="headerlink" title="CSP vs. Actor"></a>CSP vs. Actor</h4><ul><li><p>和Actor的直接通讯不不同，CSP模式则是通过Channel进行通讯的，更松耦合⼀些</p></li><li><p>Go中channel是有容量限制并且独立于处理Groutine，而如Erlang，Actor模式中的mailbox容量是无限的，接收进程也总是被动地处理消息。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211110302506.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211110302716.png"></p><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211110302717.png"></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211110302668.png"></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">service</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span> &#123;<br>time.Sleep(time.Millisecond * <span class="hljs-number">50</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Done&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">otherTask</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;working on something else&quot;</span>)<br>time.Sleep(time.Millisecond * <span class="hljs-number">100</span>)<br>fmt.Println(<span class="hljs-string">&quot;Task is done.&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestService</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>fmt.Println(service())<br>otherTask()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AsyncService</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-comment">//retCh := make(chan string)</span><br>retCh := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>ret := service()<br>fmt.Println(<span class="hljs-string">&quot;returned result.&quot;</span>)<br>retCh &lt;- ret<br>fmt.Println(<span class="hljs-string">&quot;service exited.&quot;</span>)<br>&#125;()<br><span class="hljs-keyword">return</span> retCh<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestAsynService</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>retCh := AsyncService()<br>otherTask()<br>fmt.Println(&lt;-retCh)<br>time.Sleep(time.Second * <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多路选择和超时控制"><a href="#多路选择和超时控制" class="headerlink" title="多路选择和超时控制"></a>多路选择和超时控制</h3><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p><font color="blue">多渠道的选择</font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">select</span> &#123;<br>    <span class="hljs-keyword">case</span> ret := &lt;-retCh1:<br>    t.Logf(<span class="hljs-string">&quot;result %s&quot;</span>, ret)<br>    <span class="hljs-keyword">case</span> ret := &lt;-retCh2:<br>    t.Logf(<span class="hljs-string">&quot;result %s&quot;</span>, ret)<br>    <span class="hljs-keyword">default</span>:<br>    t.Error(<span class="hljs-string">&quot;No one returned&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="blue">超时控制</font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">select</span> &#123;<br>       <span class="hljs-keyword">case</span> ret := &lt;-retCh:<br>t.Logf(<span class="hljs-string">&quot;result %s&quot;</span>, ret)<br><span class="hljs-keyword">case</span> &lt;-time.After(time.Second * <span class="hljs-number">1</span>):<br>t.Error(<span class="hljs-string">&quot;time out&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="channel的关闭和广播"><a href="#channel的关闭和广播" class="headerlink" title="channel的关闭和广播"></a>channel的关闭和广播</h3><h4 id="channel的关闭"><a href="#channel的关闭" class="headerlink" title="channel的关闭"></a>channel的关闭</h4><ul><li>向 关闭的channel发送数据, 会导致 panic</li><li><code>v, ok &lt;-ch</code>; ok 为bool值, true 表示正常接受, false 表示通道关闭</li><li>所有的 channel 接收者都会在channel关闭时, 立刻从阻塞等待中返回且上述ok值为false. 这个广播机制常被利用, 进行向多个订阅者同时发送信号. 如: 退出信号</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dataProducer</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, wg *sync.WaitGroup)</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>ch &lt;- i<br>&#125;<br><span class="hljs-built_in">close</span>(ch)<br><span class="hljs-comment">//ch &lt;- 11</span><br>wg.Done()<br>&#125;()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">dataReceiver</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, wg *sync.WaitGroup)</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++ &#123;<br><span class="hljs-comment">//data := &lt;-ch</span><br><span class="hljs-comment">//fmt.Println(data)</span><br><span class="hljs-keyword">if</span> data, ok := &lt;-ch; ok &#123;<br>fmt.Println(data)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>wg.Done()<br>&#125;()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCloseChannel</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">var</span> wg sync.WaitGroup<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>wg.Add(<span class="hljs-number">1</span>)<br>dataProducer(ch, &amp;wg)<br>wg.Add(<span class="hljs-number">1</span>)<br>dataReceiver(ch, &amp;wg)<br><span class="hljs-comment">//wg.Add(1)</span><br><span class="hljs-comment">//dataReceiver(ch, &amp;wg)</span><br>wg.Wait()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="context处理复杂场景任务的取消"><a href="#context处理复杂场景任务的取消" class="headerlink" title="context处理复杂场景任务的取消"></a>context处理复杂场景任务的取消</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isCancelled</span><span class="hljs-params">(cancelChan <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-cancelChan:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cancel_1</span><span class="hljs-params">(cancelChan <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> &#123;<br>cancelChan &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cancel_2</span><span class="hljs-params">(cancelChan <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-built_in">close</span>(cancelChan)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestCancel</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>cancelChan := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-type">int</span>, cancelCh <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">if</span> isCancelled(cancelCh) &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>time.Sleep(time.Millisecond * <span class="hljs-number">5</span>)<br>&#125;<br>fmt.Println(i, <span class="hljs-string">&quot;Cancelled&quot;</span>)<br>&#125;(i, cancelChan)<br>&#125;<br><span class="hljs-comment">//cancel_1(cancelChan)</span><br>cancel_2(cancelChan)<br>time.Sleep(time.Second * <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Context与关联任务取消"><a href="#Context与关联任务取消" class="headerlink" title="Context与关联任务取消"></a>Context与关联任务取消</h4><ul><li>根Context: 通过 context.Background() 创建</li><li>子Context: context.WithCancel(parentContext) 创建<ul><li>ctx, cancel := context.WithCancel(context.Background())</li></ul></li><li>当前Context 被取消时, 基于他的子 context 都会被取消</li><li>接收取消通知 <code>&lt;-ctx.Done()</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习08-并发编程&quot;&gt;&lt;a href=&quot;#Go语言学习08-并发编程&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习08-并发编程&quot;&gt;&lt;/a&gt;Go语言学习08-并发编程&lt;/h2&gt;&lt;h3 id=&quot;Thread-vs-Groutine&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习07-包和依赖管理</title>
    <link href="https://www.ckxgzxa.top/road2go07.html"/>
    <id>https://www.ckxgzxa.top/road2go07.html</id>
    <published>2022-11-09T14:42:43.000Z</published>
    <updated>2022-11-10T18:50:40.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习07-包和依赖管理"><a href="#Go语言学习07-包和依赖管理" class="headerlink" title="Go语言学习07-包和依赖管理"></a>Go语言学习07-包和依赖管理</h2><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><ol><li><p><strong>基本复用模块单元</strong></p><p>以首字母大写来表明可被包外代码访问</p></li><li><p><strong>代码的 package 可以和所在的目录不一致</strong></p></li><li><p><strong>同一目录里的 Go 代码的 package 要保持一致</strong></p></li></ol><hr><ol><li><p>通过 <code>go get</code> 来获取远程依赖</p><p><code>go get -u</code> 强制从网络更新远程依赖</p></li><li><p>注意代码在 GitHub 上的组织形式, 以适应 <code>go get</code></p><p>直接以代码路径开始, 不要有 src</p></li></ol><h3 id="init-方法"><a href="#init-方法" class="headerlink" title="init 方法"></a>init 方法</h3><ul><li>在 main 被执行前, 所有依赖的 package 的 init 方法都会被执行</li><li>不同包的 init 函数按照包导入的依赖关系决定执行顺序</li><li>每个包可以有多个init函数</li><li>包的每个源文件也可以有多个init函数, 这点比较特殊</li></ul><h3 id="Go-未解决的依赖问题"><a href="#Go-未解决的依赖问题" class="headerlink" title="Go 未解决的依赖问题"></a>Go 未解决的依赖问题</h3><ol><li>统一环境下, 不同项目使用同一包的不同版本</li><li>无法管理对包的特定版本的依赖</li></ol><h3 id="vendor-路径"><a href="#vendor-路径" class="headerlink" title="vendor 路径"></a>vendor 路径</h3><p>随着Go 1.5 release 版本的发布, vendor目录被添加到除了<strong>GOPATH</strong> 和<strong>GOROOT</strong>之外的依赖目录查找的解决方案。在Go 1.6之前，你需要手动的设置环境变量</p><p><strong>查找依赖包路径的解决方案如下:</strong></p><ol><li>当前包下的 vendor 目录</li><li>向上级目录查找, 知道找到 src 下的 vendor 目录</li><li>在 GOPATH 下面查找依赖包</li><li>在 GOROOT 目录下查找</li></ol><h3 id="常用的依赖管理工具"><a href="#常用的依赖管理工具" class="headerlink" title="常用的依赖管理工具"></a>常用的依赖管理工具</h3><p>godep <a href="https://github.com/tools/godep">https://github.com/tools/godep</a></p><p>glide <a href="https://github.com/Masterminds/glide">https://github.com/Masterminds/glide</a></p><p>dep <a href="https://github.com/golang/dep">https://github.com/golang/dep</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习07-包和依赖管理&quot;&gt;&lt;a href=&quot;#Go语言学习07-包和依赖管理&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习07-包和依赖管理&quot;&gt;&lt;/a&gt;Go语言学习07-包和依赖管理&lt;/h2&gt;&lt;h3 id=&quot;package&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习06-错误处理</title>
    <link href="https://www.ckxgzxa.top/road2go06.html"/>
    <id>https://www.ckxgzxa.top/road2go06.html</id>
    <published>2022-11-09T13:45:38.000Z</published>
    <updated>2022-11-10T18:48:45.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习06-错误处理"><a href="#Go语言学习06-错误处理" class="headerlink" title="Go语言学习06-错误处理"></a>Go语言学习06-错误处理</h2><h3 id="Go的错误机制"><a href="#Go的错误机制" class="headerlink" title="Go的错误机制"></a>Go的错误机制</h3><p><font color="blue">与其他主要编程语言的差异</font></p><ol><li><p>没有异常机制</p></li><li><p><code>error</code>类型实现了error接口</p></li><li><p>可以通过 errors.New 来快速创建错误实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> <span class="hljs-type">error</span> <span class="hljs-keyword">interface</span> &#123;<br>    Error() <span class="hljs-type">string</span><br>&#125;<br><br>errors.New(<span class="hljs-string">&quot;n must be in range [0, 10]&quot;</span>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p><font color="blue">定义不同的错误变量, 以便于判断错误类型</font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> LessThanTwoError = errors.New(<span class="hljs-string">&quot;n should be not less than 2&quot;</span>)<br><span class="hljs-keyword">var</span> LargeThanHundredError = errors.New(<span class="hljs-string">&quot;n should be not larger than 100&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetFibonacci</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> ([]<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, LessThanTwoError<br>&#125;<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">100</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, LargeThanHundredError<br>&#125;<br>fibList := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">2</span>; i &lt; n; i++ &#123;<br>fibList = <span class="hljs-built_in">append</span>(fibList, fibList[i<span class="hljs-number">-2</span>]+fibList[i<span class="hljs-number">-1</span>])<br>&#125;<br><span class="hljs-keyword">return</span> fibList, <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestGetFibonacci</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br><span class="hljs-keyword">if</span> v, err := GetFibonacci(<span class="hljs-number">-10</span>); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err == LessThanTwoError &#123;<br>fmt.Println(<span class="hljs-string">&quot;It is less.&quot;</span>)<br>&#125;<br>t.Error(err)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t.Log(v)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="blue"><strong>及早失败, 避免嵌套!</strong></font></p><h3 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h3><ul><li>panic 用于不可恢复的错误</li><li>panic 退出前会执行 defer 指定的内容</li></ul><h4 id="panic-vs-os-Exit"><a href="#panic-vs-os-Exit" class="headerlink" title="panic vs. os.Exit"></a>panic vs. os.Exit</h4><ul><li>os.Exit 退出时不会调用 defer 指定的函数</li><li>os.Exit 退出时不输出当前调用栈信息</li></ul><h3 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 最常见的&quot;错误恢复&quot;</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err := <span class="hljs-built_in">recover</span>(); err != <span class="hljs-literal">nil</span> &#123;<br>        Log.Error(<span class="hljs-string">&quot;recovered panic&quot;</span>, err)<br>&#125;<br>&#125;()<br></code></pre></td></tr></table></figure><p>缺陷:</p><ul><li>形成僵尸服务进程, 导致 health check 失效</li><li>“Let it Crash!” 往往是我们恢复不确定性错误的最好方法</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习06-错误处理&quot;&gt;&lt;a href=&quot;#Go语言学习06-错误处理&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习06-错误处理&quot;&gt;&lt;/a&gt;Go语言学习06-错误处理&lt;/h2&gt;&lt;h3 id=&quot;Go的错误机制&quot;&gt;&lt;a href=&quot;#Go</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习05-面向对象编程</title>
    <link href="https://www.ckxgzxa.top/road2go05.html"/>
    <id>https://www.ckxgzxa.top/road2go05.html</id>
    <published>2022-11-08T19:34:34.000Z</published>
    <updated>2022-11-10T18:47:19.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习05-面向对象编程"><a href="#Go语言学习05-面向对象编程" class="headerlink" title="Go语言学习05-面向对象编程"></a>Go语言学习05-面向对象编程</h2><p>Go语言官方对于Go 语言是否为面向对象编程的描述<a href="https://golang.org/doc/faq">https://golang.org/doc/faq</a>：</p><blockquote><p><font color="blue"><strong>Is Go an object-oriented language?</strong></font></p><p><font color="red">Yes and no.</font> Although Go has types and methods and allows an object-oriented style of programming, there is <strong>no type hierarchy. The concept of “interface” in Go provides a different approach that we believe is wasy to use and in some ways more general.</strong></p><p>Also, the lack of a type hierarchy makes “objects” in Go fell much more lightweight than in language such as C++ or Java.</p></blockquote><h3 id="封装数据和行为"><a href="#封装数据和行为" class="headerlink" title="封装数据和行为"></a>封装数据和行为</h3><h4 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>    Id <span class="hljs-type">string</span><br>    Name <span class="hljs-type">string</span><br>    Age <span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实例创建及初始化"><a href="#实例创建及初始化" class="headerlink" title="实例创建及初始化"></a>实例创建及初始化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">e := Employee&#123;<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">20</span>&#125;<br>e1 := Employee&#123;Name: <span class="hljs-string">&quot;Mike&quot;</span>, Age:<span class="hljs-number">30</span>&#125;<br>e2 := <span class="hljs-built_in">new</span>(Employee)<span class="hljs-comment">// 注意这里返回的引用/指针, 相当于 e:=&amp;EmployeeP&#123;&#125;</span><br>e2.Id = <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">// 与其他编程语言的差异: 通过实例的指针访问成员不需要-&gt;</span><br>e2.Age = <span class="hljs-number">22</span><br>e2.Name = <span class="hljs-string">&quot;Rose&quot;</span><br></code></pre></td></tr></table></figure><h4 id="行为-方法-定义"><a href="#行为-方法-定义" class="headerlink" title="行为 (方法) 定义"></a>行为 (方法) 定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 第一种定义方式在实例对应方法被调用时, 实例的成员会进行值复制</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Employee)</span></span> String() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;ID:%s-Name:%s-Age:%d&quot;</span>, e.Id, e.Name, e.Age)<br>&#125;<br><br><span class="hljs-comment">// 通常情况下为了避免内存拷贝我们使用第二种定义方式</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *Employee)</span></span> String() <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;ID:%s-Name:%s-Age:%d&quot;</span>, e.Id, e.Name, e.Age)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口与依赖"><a href="#接口与依赖" class="headerlink" title="接口与依赖"></a>接口与依赖</h3><pre class="mermaid">classDiagram    class A    class AImpl    class AClient    <<interface>> A    AImpl ..|> A    AClient ..> A    AClient ..> AImpl</pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Programmer.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Programmer</span> &#123;<br>    String <span class="hljs-title function_">WriteCodes</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">// GoProgrammer.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoProgrammer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Programmer</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">WriteCodes</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fmt.Println(\&quot;Hello World!\&quot;)&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Task.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Programmer</span> <span class="hljs-variable">prog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GoProgrammer</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">codes</span> <span class="hljs-operator">=</span> prog.WriteCodes();<br>        System.out.printlv(codes);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Duck-Type式接口实现"><a href="#Duck-Type式接口实现" class="headerlink" title="Duck Type式接口实现"></a>Duck Type式接口实现</h3><h4 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Programmer <span class="hljs-keyword">interface</span> &#123;<br>    WriteHelloWorld() Code<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> GoProgrammer <span class="hljs-keyword">struct</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *GoProgrammer)</span></span> WriteHelloWorld() Code &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;fmt.Printlv(\&quot;Hello World!\&quot;)&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Go-接口"><a href="#Go-接口" class="headerlink" title="Go 接口"></a>Go 接口</h3><p><font color="blue">与其他主要编程语言的差异</font></p><ol><li>接口为非入侵性, 实现不依赖于接口定义</li><li>所以接口的定义可以包含在接口使用者包内</li></ol><h3 id="接口变量"><a href="#接口变量" class="headerlink" title="接口变量"></a>接口变量</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211091513954.png"></p><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><ol><li><code>type IntConvertionFn func(n int) int</code></li><li><code>type Mypoint int</code></li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211091856135.png"></p><h3 id="空接口与断言"><a href="#空接口与断言" class="headerlink" title="空接口与断言"></a>空接口与断言</h3><ol><li><p>空接口可以表示任何类型</p></li><li><p>通过断言来将空接口转换为指定类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">v, ok := p.(<span class="hljs-type">int</span>)   <span class="hljs-comment">//ok = true 时为转换成功</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Go-接口最佳实践"><a href="#Go-接口最佳实践" class="headerlink" title="Go 接口最佳实践"></a>Go 接口最佳实践</h3><ul><li><p>倾向于使用小的接口定义, 很多接口只包含一个方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Reader <span class="hljs-keyword">interface</span> &#123;<br>    Read(p []<span class="hljs-type">byte</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">int</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> Writer <span class="hljs-keyword">interface</span> &#123;<br>    Write(p []<span class="hljs-type">byte</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">int</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>较大的接口定义, 可以由多个小接口定义组合而成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ReadWriter <span class="hljs-keyword">interface</span> &#123;<br>    Reader<br>    Writer<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>只依赖于必要功能的最小接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">StoreData</span><span class="hljs-params">(reader Reader)</span></span> <span class="hljs-type">error</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习05-面向对象编程&quot;&gt;&lt;a href=&quot;#Go语言学习05-面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习05-面向对象编程&quot;&gt;&lt;/a&gt;Go语言学习05-面向对象编程&lt;/h2&gt;&lt;p&gt;Go语言官方对于Go 语言是否为面向</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习04-函数</title>
    <link href="https://www.ckxgzxa.top/road2go04.html"/>
    <id>https://www.ckxgzxa.top/road2go04.html</id>
    <published>2022-11-08T19:13:52.000Z</published>
    <updated>2023-11-19T12:27:35.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习04-函数"><a href="#Go语言学习04-函数" class="headerlink" title="Go语言学习04-函数"></a>Go语言学习04-函数</h2><h3 id="函数是一等公民"><a href="#函数是一等公民" class="headerlink" title="函数是一等公民"></a>函数是一等公民</h3><p><code>&lt;font color=&quot;Blue&quot;&gt;</code>与其他主要编程语言的差异<code>&lt;/font&gt;</code></p><ol><li>可以有多个返回值</li><li>所有参数都是值传递: slice, map, channel 会有传引用的错觉</li><li>函数可以作为变量的值</li><li>函数可以作为参数和返回值</li></ol><blockquote><p>学习函数式编程</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202311192020666.png"></p></blockquote><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(ops ...<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    s := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, op := <span class="hljs-keyword">range</span> ops &#123;<br>        s += op<br>    &#125;<br>    <span class="hljs-keyword">return</span> s<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="defer-函数"><a href="#defer-函数" class="headerlink" title="defer 函数"></a>defer 函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestDefer</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        t.Log(<span class="hljs-string">&quot;Clear resources&quot;</span>)<br>    &#125;()<br>    t.Log(<span class="hljs-string">&quot;Started&quot;</span>)<br>    <span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;Fatal error&quot;</span>) <span class="hljs-comment">// defer仍会执行</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习04-函数&quot;&gt;&lt;a href=&quot;#Go语言学习04-函数&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习04-函数&quot;&gt;&lt;/a&gt;Go语言学习04-函数&lt;/h2&gt;&lt;h3 id=&quot;函数是一等公民&quot;&gt;&lt;a href=&quot;#函数是一等公民&quot; c</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习03-字符串</title>
    <link href="https://www.ckxgzxa.top/road2go03.html"/>
    <id>https://www.ckxgzxa.top/road2go03.html</id>
    <published>2022-11-08T13:14:58.000Z</published>
    <updated>2022-11-10T18:43:54.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习03-字符串"><a href="#Go语言学习03-字符串" class="headerlink" title="Go语言学习03-字符串"></a>Go语言学习03-字符串</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><font color="Blue">与其他主要编程语言的差异</font></p><ol><li>string 是数据类型, 不是引用或指针类型</li><li>string 是只读的 byte slice, len 函数可以返回它所包含的byte数</li><li>string 的byte数组可以存放任何数据</li></ol><h3 id="Unicode-UTF8"><a href="#Unicode-UTF8" class="headerlink" title="Unicode UTF8"></a>Unicode UTF8</h3><ol><li>Unicode 是一种字符集(code point)</li><li>UTF8 是 unicode 的存储实现(转换为字节序列的规则)</li></ol><h3 id="编码与存储"><a href="#编码与存储" class="headerlink" title="编码与存储"></a>编码与存储</h3><table><thead><tr><th align="center">字符</th><th align="center">“中”</th></tr></thead><tbody><tr><td align="center">Unicode</td><td align="center">0x4E2D</td></tr><tr><td align="center">UTF-8</td><td align="center">0xE4B8AD</td></tr><tr><td align="center">string/[]byte</td><td align="center">[0xE4, 0xB8, 0xAD]</td></tr></tbody></table><h3 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h3><ol><li>strings包(<a href="https://golang.org/pkg/strings">https://golang.org/pkg/strings</a>)</li><li>strconv包(<a href="https://golang.org/pkg/strconv">https://golang.org/pkg/strconv</a>)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习03-字符串&quot;&gt;&lt;a href=&quot;#Go语言学习03-字符串&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习03-字符串&quot;&gt;&lt;/a&gt;Go语言学习03-字符串&lt;/h2&gt;&lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习02-常用集合</title>
    <link href="https://www.ckxgzxa.top/road2go02.html"/>
    <id>https://www.ckxgzxa.top/road2go02.html</id>
    <published>2022-11-08T03:18:24.000Z</published>
    <updated>2022-11-10T18:42:36.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习02-常用集合"><a href="#Go语言学习02-常用集合" class="headerlink" title="Go语言学习02-常用集合"></a>Go语言学习02-常用集合</h2><h3 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h3><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p><font color="Blue">与其他主要编程语言的差异</font></p><p>Go语言仅支持循环关键字 <code>for</code></p><p> <code>for j := 7; j &lt;= 9; j++</code></p><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><p><font color="green">while条件循环 </font></p><p><font color="green">while (n &lt; 5) </font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">n := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> n &lt; <span class="hljs-number">5</span> &#123;<br>    n++<br>    fmt.Println(n)<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="green">无限循环 </font></p><p><font color="green">while (true) </font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">n := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> n &lt; <span class="hljs-number">5</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="if条件"><a href="#if条件" class="headerlink" title="if条件"></a>if条件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> condition &#123;<br>    <span class="hljs-comment">// code to be executed if condition is true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// code to be executed if condition is false</span><br>&#125;<br><br><span class="hljs-keyword">if</span> condition<span class="hljs-number">-1</span> &#123;<br>    <span class="hljs-comment">// code to be executed if condition-1 is true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> condition<span class="hljs-number">-2</span> &#123;<br>    <span class="hljs-comment">// code to be executed if condition-2 is true</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// code to be executed if both condition1 and condition2 are false</span><br>&#125;<br></code></pre></td></tr></table></figure><p><font color="blue">与其他主要编程语言的差异</font></p><ol><li><p>condition 表达式结果必须为布尔值</p></li><li><p>支持变量赋值:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> <span class="hljs-keyword">var</span> declaration; condition &#123;<br>    <span class="hljs-comment">// code to be executed if conditon is true</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="switch条件"><a href="#switch条件" class="headerlink" title="switch条件"></a>switch条件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> os := runtime.GOOS; os &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;darwin&quot;</span>:<br>fmt.Println(<span class="hljs-string">&quot;OS X.&quot;</span>)<br><span class="hljs-comment">// break</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;linux&quot;</span>:<br>fmt.Println(<span class="hljs-string">&quot;Linux.&quot;</span>)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-comment">// freebsd, openbsd,</span><br><span class="hljs-comment">// plan9, windows...</span><br>fmt.Printf(<span class="hljs-string">&quot;%s.&quot;</span>, os)<br>&#125;<br><br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span> &lt;= Num &amp;&amp; Num &lt;= <span class="hljs-number">3</span>:<br>fmt.Printf(<span class="hljs-string">&quot;0-3&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span> &lt;= Num &amp;&amp; Num &lt;= <span class="hljs-number">6</span>:<br>fmt.Printf(<span class="hljs-string">&quot;4-6&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span> &gt;= Num &amp;&amp; Num &lt;= <span class="hljs-number">9</span>:<br>fmt.Printf(<span class="hljs-string">&quot;7-9&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="blue">与其他主要编程语言的差异</font></p><ol><li>条件表达式不限制为常量或者整数;</li><li>单个case中, 可以出现多个结果选项, 使用逗号分隔;</li><li>与C语言等规则相反, Go语言不需要用break来明确退出一个case;</li><li>可以不设定 switch 之后的条件表达式, 在此种情况下, 整个switch结构与多个if…else…的逻辑作用等同</li></ol><h3 id="数组与切片"><a href="#数组与切片" class="headerlink" title="数组与切片"></a>数组与切片</h3><h4 id="数组的声明"><a href="#数组的声明" class="headerlink" title="数组的声明"></a>数组的声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a [<span class="hljs-number">3</span>]<span class="hljs-type">int</span> <span class="hljs-comment">//声明并初始化为默认零值</span><br>a[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br><br>b := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<span class="hljs-comment">// 声明同时初始化</span><br>c := [<span class="hljs-number">2</span>][<span class="hljs-number">2</span>]<span class="hljs-type">int</span>&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;&#125;<span class="hljs-comment">// 多位数组初始化</span><br></code></pre></td></tr></table></figure><p><font color="Blue">与其他主要编程语言的差异</font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestTravelArray</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    a := [...]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<span class="hljs-comment">// 不指定元素个数</span><br>    <span class="hljs-keyword">for</span> idx<span class="hljs-comment">/*索引*/</span>, elem<span class="hljs-comment">/*元素*/</span> := <span class="hljs-keyword">range</span> a &#123;<br>        fmt.Println(idx, elem)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数组截取"><a href="#数组截取" class="headerlink" title="数组截取"></a>数组截取</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">a[开始索引(包含)，结束索引(不包含)]<br><br>a := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span>&#125;<br>a[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>] <span class="hljs-comment">//2</span><br>a[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>] <span class="hljs-comment">//2,3</span><br>a[<span class="hljs-number">1</span>:<span class="hljs-built_in">len</span>(a)] <span class="hljs-comment">//2,3,4,5</span><br>a[<span class="hljs-number">1</span>:] <span class="hljs-comment">//2,3,4,5</span><br>a[:<span class="hljs-number">3</span>] <span class="hljs-comment">//1,2,3</span><br></code></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><h5 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h5><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211080205152.png"></p><h5 id="切片声明"><a href="#切片声明" class="headerlink" title="切片声明"></a>切片声明</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s0 []<span class="hljs-type">int</span><br>s0 = <span class="hljs-built_in">append</span>(s0，<span class="hljs-number">1</span>)<br><br>s := []<span class="hljs-type">int</span>&#123;&#125;<br><br>s1 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>&#125;<br><br>s2 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>，<span class="hljs-number">2</span>，<span class="hljs-number">4</span>)<br>   <span class="hljs-comment">/* []type, len, cap</span><br><span class="hljs-comment">   其中len个元素会被初始化为默认零值, 未初始化元素不可以访问</span><br><span class="hljs-comment">   */</span><br></code></pre></td></tr></table></figure><h5 id="切片共享存储结构"><a href="#切片共享存储结构" class="headerlink" title="切片共享存储结构"></a>切片共享存储结构</h5><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202211080216477.png"></p><h4 id="数组-vs-切片"><a href="#数组-vs-切片" class="headerlink" title="数组 vs. 切片"></a>数组 vs. 切片</h4><ol><li>数组容量不可伸缩</li><li>相同维数, 相同长度的数组可以进行比较, 每一个元素都相同, 这两个数组会被认为相同</li></ol><h3 id="Map声明、元素访问及遍历"><a href="#Map声明、元素访问及遍历" class="headerlink" title="Map声明、元素访问及遍历"></a>Map声明、元素访问及遍历</h3><h4 id="Map声明"><a href="#Map声明" class="headerlink" title="Map声明"></a>Map声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">m := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;one&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;two&quot;</span>:<span class="hljs-number">2</span>, <span class="hljs-string">&quot;three&quot;</span>:<span class="hljs-number">3</span>&#125;<br>m1 := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;&#125;<br>m1[<span class="hljs-string">&quot;one&quot;</span>] = <span class="hljs-number">1</span><br>m2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">10</span> <span class="hljs-comment">/*Initial Capacity*/</span>)<br></code></pre></td></tr></table></figure><h4 id="Map元素的访问"><a href="#Map元素的访问" class="headerlink" title="Map元素的访问"></a>Map元素的访问</h4><p><font color="Blue">与其他主要编程语言的差异</font></p><p>在访问的Key不存在时, 仍会返回零值, 不能通过返回nil来判断元素是否存在</p><h4 id="Map遍历"><a href="#Map遍历" class="headerlink" title="Map遍历"></a>Map遍历</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">m := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;one&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;two&quot;</span>:<span class="hljs-number">2</span>, <span class="hljs-string">&quot;three&quot;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> m &#123;<br>    t.Log(k, v)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实现Set"><a href="#实现Set" class="headerlink" title="实现Set"></a>实现Set</h3><p><strong>Go 的内置集合中没有 Set 实现, 可以map[type]bool</strong></p><ol><li><p><strong>元素的唯一性</strong></p></li><li><p><strong>基本操作</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestMapForSet</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>mySet := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>&#123;&#125;<br>mySet[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span><br>n := <span class="hljs-number">3</span><br><span class="hljs-keyword">if</span> mySet[n] &#123;<br>t.Logf(<span class="hljs-string">&quot;%d is existing&quot;</span>, n)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t.Logf(<span class="hljs-string">&quot;%d is not existing&quot;</span>, n)<br>&#125;<br>mySet[<span class="hljs-number">3</span>] = <span class="hljs-literal">true</span><br>t.Log(<span class="hljs-built_in">len</span>(mySet))<br><span class="hljs-built_in">delete</span>(mySet, <span class="hljs-number">1</span>)<br>n = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> mySet[n] &#123;<br>t.Logf(<span class="hljs-string">&quot;%d is existing&quot;</span>, n)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t.Logf(<span class="hljs-string">&quot;%d is not existing&quot;</span>, n)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>添加元素</li><li>判断元素是否存在</li><li>删除元素</li><li>元素个数</li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习02-常用集合&quot;&gt;&lt;a href=&quot;#Go语言学习02-常用集合&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习02-常用集合&quot;&gt;&lt;/a&gt;Go语言学习02-常用集合&lt;/h2&gt;&lt;h3 id=&quot;条件与循环&quot;&gt;&lt;a href=&quot;#条件与循</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言学习01-基本程序结构</title>
    <link href="https://www.ckxgzxa.top/road2go01.html"/>
    <id>https://www.ckxgzxa.top/road2go01.html</id>
    <published>2022-11-07T13:30:41.000Z</published>
    <updated>2022-11-10T18:39:32.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Go语言学习01-基本程序结构"><a href="#Go语言学习01-基本程序结构" class="headerlink" title="Go语言学习01-基本程序结构"></a>Go语言学习01-基本程序结构</h2><h3 id="基本程序结构"><a href="#基本程序结构" class="headerlink" title="基本程序结构"></a>基本程序结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-comment">// 包, 表明代码所在的模块(包)</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-comment">// 引入代码依赖</span><br><span class="hljs-comment">// 功能实现</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="应用程序入口"><a href="#应用程序入口" class="headerlink" title="应用程序入口"></a>应用程序入口</h3><ol><li>必须是 main 包: <code>package main</code></li><li>必须是 main 方法: <code>func main()</code></li><li>文件名不一定是 <code>main.go</code></li></ol><h3 id="退出返回值"><a href="#退出返回值" class="headerlink" title="退出返回值"></a>退出返回值</h3><p><strong>与其他主要编程语言的差异</strong></p><ul><li><p>Go 中main 函数不支持任何返回值</p></li><li><p>通过 <code>os.Exit</code> 来返回状态</p></li><li><p>main 函数不支持传入参数</p><p>func main(<del>arg [] string</del>)</p></li><li><p>在程序中直接通过 <code>os.Args</code> 获取命令行参数</p></li></ul><h3 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h3><ol><li>源码文件以 <code>_test</code> 结尾: xxx_test.go</li><li>测试方法名以 <code>Test</code> 开头: <code>func TestXXX(t *testing.T) &#123;...&#125;</code></li></ol><h3 id="快速设置连续值"><a href="#快速设置连续值" class="headerlink" title="快速设置连续值"></a>快速设置连续值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>Monday = <span class="hljs-literal">iota</span> + <span class="hljs-number">1</span><br>    Tuesday<br>    Wednesday<br>    Thursday<br>    Friday<br>    Saturday<br>    Sunday<br>)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>Open = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-literal">iota</span><br>    Close<br>    Pending<br>)<br></code></pre></td></tr></table></figure><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table>    <tr>        <td>bool</td>    </tr>    <tr>        <td>string</td>    </tr>    <tr>        <td>int int8 int16 int32 int64</td>    </tr>    <tr>        <td>uint uint8 uint16 uint32 uint64 uintptr</td>    </tr>    <tr>        <td>byte // alias for uint8</td>    </tr>    <tr>        <td>rune // alias for int32, represents a Unicode code point</td>    </tr>    <tr>        <td>float32 float64</td>    </tr>    <tr>        <td>complex32 complex64</td>    </tr></table><h3 id="类型的预定义值"><a href="#类型的预定义值" class="headerlink" title="类型的预定义值"></a>类型的预定义值</h3><ol><li>math.MaxInt64</li><li>math.MaxFloat64</li><li>math.MaxUint32</li></ol><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p>与其他主要编程语言的差异</p><ol><li>不支持指针运算</li><li>string 是值类型, 其默认的初始化值为空字符串, 而不是 nil</li></ol><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>相加</td><td>A + B 输出结果 30</td></tr><tr><td>-</td><td>相减</td><td>A - B 输出结果 -10</td></tr><tr><td>*</td><td>相乘</td><td>A * B 输出结果 200</td></tr><tr><td>/</td><td>相除</td><td>B / A 输出结果 2</td></tr><tr><td>%</td><td>求余</td><td>B % A 输出结果 0</td></tr><tr><td>++</td><td>自增</td><td>A ++ 输出结果 11</td></tr><tr><td>–</td><td>自减</td><td>A – 输出结果 9</td></tr></tbody></table><blockquote><p>Go 语言没有前置的 ++, –,  <del>(++a)</del></p></blockquote><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>检查两个值是否相等, 如果相等返回 True 否则返回 False</td><td>(A == B) 为 False</td></tr><tr><td>!=</td><td>检查两个值是否不相等, 如果不相等返回 True 否则返回 False</td><td>(A != B) 为 True</td></tr><tr><td>&gt;</td><td>检查左边值是否大于右边值, 如果是返回 True 否则返回 False</td><td>(A &gt; B) 为 False</td></tr><tr><td>&lt;</td><td>检查左边值是否小于右边值, 如果是返回 True 否则返回 False</td><td>(A &lt; B) 为 True</td></tr><tr><td>&gt;=</td><td>检查左边值是否大于等于右边值, 如果是返回 True 否则返回 False</td><td>(A &gt;= B) 为 False</td></tr><tr><td>&lt;=</td><td>检查左边值是否小于等于右边值, 如果是返回 True 否则返回 False</td><td>(A &lt;= B) 为True</td></tr></tbody></table><h5 id="用-比较数组"><a href="#用-比较数组" class="headerlink" title="用 == 比较数组"></a>用 == 比较数组</h5><ul><li>相同维数且含有相同个数元素的数组才可以比较</li><li>每个元素都相同的才相等</li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑 AND 运算符. 如果两边的操作数都是 True, 则条件 True, 否则为 False.</td><td>(A &amp;&amp; B) 为 False</td></tr><tr><td>||</td><td>逻辑 OR 运算符. 如果两边的操作数有一个 True, 则条件 True, 否则为 False.</td><td>(A || B) 为 True</td></tr><tr><td>!</td><td>逻辑 NOT 运算符. 如果条件为 True, 则逻辑 NOT 条件 False, 否则为 True.</td><td>!(A &amp;&amp; B) 为 True</td></tr></tbody></table><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符 “&amp;” 是双目运算符. 其功能是参与运算的两数各对应的二进位相与.</td><td>(A &amp; B)结果为 12, 二进制为 0000 1100</td></tr><tr><td>|</td><td>按位与运算符 “|” 是双目运算符. 其功能是参与运算的两数各对应的二进位相或.</td><td>(A | B) 结果为61, 二进制为 0011 1101</td></tr><tr><td>^</td><td>按位与运算符 “^” 是双目运算符. 其功能是参与运算的两数各对应的二进位相异或.</td><td>(A ^ B) 结果为49, 二进制为 0011 1101</td></tr><tr><td>&lt;&lt;</td><td>左移运算符 “&lt;&lt;” 是双目运算符. 左移 n 位就是乘以 2 的 n 次方. 其功能把 “&lt;&lt;” 左边的运算数的各二进位全部左移若干位, 由 “&lt;&lt;” 右边的数指定移动的位数, 高位丢弃, 低位补0</td><td>A &lt;&lt; 2 结果为 240, 二进制为 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>右移运算符 “&gt;&gt;” 是双目运算符. 右移 n 位就是除以 2 的 n 次方. 其功能是把 “&gt;&gt;” 左边的运算数的各二进位全部右移若干位, “&gt;&gt;” 右边的数指定移动的位数</td><td>A &gt;&gt; 2 结果为 0000 1111</td></tr></tbody></table><h5 id="与其他主要编程语言的差异"><a href="#与其他主要编程语言的差异" class="headerlink" title="与其他主要编程语言的差异"></a>与其他主要编程语言的差异</h5><h4 id="amp-按位-置零"><a href="#amp-按位-置零" class="headerlink" title="&amp;^ 按位 置零"></a>&amp;^ 按位 置零</h4><p>1 &amp;^ 0 – 1</p><p>1 &amp;^ 1 – 0</p><p>0 &amp;^ 1 – 0</p><p>0 &amp;^ 0 – 0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Go语言学习01-基本程序结构&quot;&gt;&lt;a href=&quot;#Go语言学习01-基本程序结构&quot; class=&quot;headerlink&quot; title=&quot;Go语言学习01-基本程序结构&quot;&gt;&lt;/a&gt;Go语言学习01-基本程序结构&lt;/h2&gt;&lt;h3 id=&quot;基本程序结构&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.ckxgzxa.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Go" scheme="https://www.ckxgzxa.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>2023年中国石油招聘笔试03——EPI解题技巧</title>
    <link href="https://www.ckxgzxa.top/cnpc-recuit-03.html"/>
    <id>https://www.ckxgzxa.top/cnpc-recuit-03.html</id>
    <published>2022-09-26T15:29:33.000Z</published>
    <updated>2022-10-01T18:40:07.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧"><a href="#2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧" class="headerlink" title="2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧"></a>2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧</h1><h2 id="1-常识解决技巧"><a href="#1-常识解决技巧" class="headerlink" title="1. 常识解决技巧"></a>1. 常识解决技巧</h2><p>从知识的偏重性来说，常识判断部分的导向性非常清晰，即加强考生对国情、社情的了解程度。</p><p>此阶段备考重在平时，平时多了解一些国家大事和重大举措，例如两会、政府工作报道、国家主权、法律等知识，平时多留意、多观察、多思考。</p><h2 id="2-判断推理题解题技巧"><a href="#2-判断推理题解题技巧" class="headerlink" title="2. 判断推理题解题技巧"></a>2. 判断推理题解题技巧</h2><h3 id="2-1-图形推理"><a href="#2-1-图形推理" class="headerlink" title="2.1 图形推理"></a>2.1 图形推理</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209282005198.png"></p><h4 id="2-1-1-规律推理-数量类"><a href="#2-1-1-规律推理-数量类" class="headerlink" title="2.1.1 规律推理: 数量类"></a>2.1.1 规律推理: 数量类</h4><p>概要说明:数量指图形中包含某种元素的多少，如含有几条边、含有几种元素等。题目中的每个图形仅代表一个或几个数量。</p><p>识别方法:观察题干中的图形组成元紊是否凌乱，或者部分相同元紊数量上的变化是否明显。如果某道题目组成元素混乱，那么可以判别该题目为数量类规律推理。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209282024638.png"></p><ul><li><strong>数量型解题要点总结: 点  线  角  面  素</strong><ol><li>首先从整体数考虑, 识别”点线角面素”, 确定数量规律;</li><li>如果整体不行的话, 可以从部分(分位置或分样式)的角度确定数量, 得出规律.</li></ol></li></ul><blockquote><p><strong>元素组成不同, 且无明显属性规律, 考虑数量规律</strong></p><p>例题:</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209280318192.png"></p><p>观察图形可知, 第一个图形是分为2个区域, 第二个图形分为3个区域, 第三个图形分为4个区域…, 以此类推,可以判断第6个图形应该选择可以划分出7个区域的A图形,故选择A    <em>(面)</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209280340384.png"></p><p>黑块内部直角数量, B <em>(角)</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209280346454.png"></p><p>切点数量分类, ①④⑤/②③⑥, <em>(点)</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209291149293.png"></p><p>元素组成不同，无明显属性规律，考虑数量。分别数出曲线和直线数量可以得出选C  <em>（线）</em></p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209291154913.png"></p><p>黑点 2 0 2 2<br>白点 1 2 3 5<br>可以得到规律后一项等于前两项之和，B <em>（素）</em></p></blockquote><h4 id="2-1-2-规律推理：样式类"><a href="#2-1-2-规律推理：样式类" class="headerlink" title="2.1.2 规律推理：样式类"></a>2.1.2 规律推理：样式类</h4><p>概要说明:样式是指图形的形状模样, 它表明了某个图形区别于其他图形的本质特征.</p><p>识别方法:观察题干中图形的组成元素是否相似, 相似也就是图形部分元素非实质性残缺. 如果某道题目组成的元素相似, 那么可以判别该题目为样式类规律推理.</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209282054071.png"></p><ul><li><strong>样式类解题要点总结: 先看样式遍历, 再看加减同异</strong><ol><li>首先观察是否属于样式遍历;</li><li>其次观察是否属于样式运算, 熟练掌握 ”加、减、同、异“四种情况；</li><li>最后再观察其他诸如周期、属性的变化规律</li></ol></li></ul><blockquote><p>例题：</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209290049422.png"></p><p>对称性， 选D ， 轴对称、中心对称、中心对称/轴对称</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209290050371.png"></p><p>第一步，观察特征。组成元素相似，优先考虑样式类。第二步，九宫格，横向、纵向观察，没有明显规律，考虑“米”字型规律。题干对角线及十字位置的图形相加均得九宫格中心的图形，应用规律，B项符合。因此，选择B选项。</p></blockquote><h4 id="2-1-3-规律推理：位置类"><a href="#2-1-3-规律推理：位置类" class="headerlink" title="2.1.3 规律推理：位置类"></a>2.1.3 规律推理：位置类</h4><p>概要说明：位置是指图形本身变化的一个属性，就单个平面图形而言，其位置变化仅可能为平移、旋转和翻转。</p><p>识别方法：观察题干中图形的组成元素是否相同，且图形位置的变化是否明显。如果某道题目组成的元索相同，那么就可以判别该题目为位置类规律推理。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209290108994.png"></p><ul><li><strong>位置型解题要点总结：三种位置变化</strong>   平移     旋转     翻转</li></ul><h4 id="2-1-4-第四、五、六、七节：重构推理"><a href="#2-1-4-第四、五、六、七节：重构推理" class="headerlink" title="2.1.4 第四、五、六、七节：重构推理"></a>2.1.4 第四、五、六、七节：重构推理</h4><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202209290238196.png"></p><ul><li><p><strong>空间构成型解题要点总结：一个面的特征+两个面的关系</strong></p><p>一个面的特征：寻找“特征面”</p><p>两个面的关系：“相对关系” 有一面</p><p>“相邻关系” 用排除</p></li><li><p><strong>平面组成型解题要点总结:种类不同数个数，种类相同看时针</strong></p></li><li><p><strong>平面拼合型解题要点总结：直线消去法</strong></p></li><li><p><strong>线条组合型解题要点总结：对比排除法</strong></p></li></ul><h3 id="2-2-逻辑判断"><a href="#2-2-逻辑判断" class="headerlink" title="2.2 逻辑判断"></a>2.2 逻辑判断</h3><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202210012317974.png"></p><h4 id="2-2-1-形式推理-翻译推理"><a href="#2-2-1-形式推理-翻译推理" class="headerlink" title="2.2.1 形式推理: 翻译推理"></a>2.2.1 形式推理: 翻译推理</h4><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202210012345243.png"></p><ul><li><strong>翻译推理解题要点总结: 翻译 + 推理</strong><ol><li>翻译。就是指利用“三个关联翻译”和“三个判断翻译”将题目转化成逻辑语言。</li><li>推理。就是利用“肯定信息优先原则”，通过“三个等价”得到答案。</li></ol></li></ul><h4 id="2-2-2-形式推理：真假推理"><a href="#2-2-2-形式推理：真假推理" class="headerlink" title="2.2.2 形式推理：真假推理"></a>2.2.2 形式推理：真假推理</h4><p>概要说明：在题目中给出若干个前提，前提中有真有假，要求通过判断命题的真假情况，进而推理出指定的结论。</p><p>识别方法：题干中给出几个论断，但是几个论断中只有一个是真（假）的，要求由此得到一个肯定的结论。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202210020238675.png"></p><ul><li><strong>真假推理解题要点总结：先看矛盾，其次想反对，最后找包容</strong></li></ul><ol><li>首先看矛盾。一真其余全假，一假其余全真。</li><li>第二步：其次想反对。“有的”、“有的”必一真，“所有”、“所有”必一假。</li><li>第三步：最后找包容。一真前假，一假后真。</li></ol><h4 id="2-2-3-形式推理：分析推理"><a href="#2-2-3-形式推理：分析推理" class="headerlink" title="2.2.3 形式推理：分析推理"></a>2.2.3 形式推理：分析推理</h4><p>概要说明：在题目中给出若干人或事物，要求利用它们间的相互关系，对它们的烦序进行排列组合，实现一一对应。<br>识别方法：题目中给出多个肯定论断，交代相互间的关系，要求由此得到一个肯定的结论。</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202210012358204.png"></p><ul><li><p><strong>分析推理解题要点总结：三个优先原则+四种典型方法</strong></p><p>三个优先原则：肯定信息优先、信息最大优先、特殊信息优先</p><p>四种典型方法：列表法、假设法、排除法、中途法</p></li></ul><h4 id="2-2-4-加强论证：假设加强"><a href="#2-2-4-加强论证：假设加强" class="headerlink" title="2.2.4 加强论证：假设加强"></a>2.2.4 加强论证：假设加强</h4><p>概要说明：假设是支持作者结论所隐含的前提，是前提与结论之间的连接，是推出结论所必要的条件。当否定这个假设的时候，论证将不能成立。</p><p>识别方法：其典型的问法有一一上文的说法基于以下哪一个假设？上述论证中假设了下列哪个前提？上文基于下列哪一个假设？如果上述断定为真，则必须假设一下哪项作为前提？</p><p><img src="https://zxastaticpages.oss-cn-beijing.aliyuncs.com/blogpictures/202210020229787.png"></p><ul><li><p><strong>假设型加强解题总结：本质、有效方式、验证</strong></p><p>本质：寻找孤立信息，有效建立联系</p><p>有效方式：搭设桥梁    建立联系    肯定前提</p><p>验证：否定代入</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧&quot;&gt;&lt;a href=&quot;#2023年中国石油校园招聘笔试03——EPI综合能力测试解题技巧&quot; class=&quot;headerlink&quot; title=&quot;2023年中国石油校园招聘笔试03——EPI综合能力测试</summary>
      
    
    
    
    <category term="秋招" scheme="https://www.ckxgzxa.top/categories/%E7%A7%8B%E6%8B%9B/"/>
    
    
    <category term="中石油" scheme="https://www.ckxgzxa.top/tags/%E4%B8%AD%E7%9F%B3%E6%B2%B9/"/>
    
  </entry>
  
</feed>
